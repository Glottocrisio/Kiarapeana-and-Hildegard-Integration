1. What do we mean by ‘features’?
Features not meaning modules or functions, but fundamentally what is the purpose of kiara and what does it do. At its most basic: 
Data can be uploaded into kiara's datastore / be converted into a kiara data type so that kiara can understand what it is and trace it.
Ignoring specifically what the jobs are, it can trace 'inputs' (aka decisions made and parameters given) to given modules, and assigning the 'outputs' (aka the 'new' data) a traceable unique identifier.
Following this process it can be exported as a) a new file type (for example graphml with the network one) and b) the ‘timeline’ listed.
In all of this kiara acts as a 'wrapper' to the process, tracing and recording the metadata.

2. Confirming priority use cases and end goals for users: how and where will they use kiara? 
Interfaces for using kiara:
Mini-apps (topic modeling and network analysis/Tropy)
for users with no-coding ability; these will be fairly limited in terms of module choices, but will allow a user to import their data, run some jobs from a list of options, and export the data / ‘timeline’


Jupyter Notebooks
for users with more coding ability; this offers users more flexibility in terms of module choice (i.e. they can mix network analysis and topic modeling if they want to)
for users who also want to design their own modules / plugins and use these in jupyter (modules themselves not to be written in jupyter)

Ultimate priority users - how do we name these for the documentation? We simply need to pick something that offers consistency and clarity for documentation and future reference. We can then put this in a glossary at the top of the docs to help people navigate what information they need / want to be able to use kiara.
no-coders (mini-apps) - Mini-App users (defined as: …)
coders but not module writers (jupyter notebooks) - Module users 
module writers (jupyter notebooks as interface, plus chosen code editor for writing modules) 

Not priority user (sorry developers)
Core Developers - people with software engineering skills / knowledge, interested in kiara backend - NOT A TARGET USER BUT ALSO NEEDS DOCUMENTATION FOR TRANSPARENCY 
CLI users - not target - kiara has the ability to do this but our core users will not interact with kiara in this way (basically as part of dev tool)

3. Requirements: assigned deliverables and deadlines
Python API - this does not require more work or features; the same API can be used for both Jupyter and the mini-apps. What is needed is stability in terms of names and documentation of the features: how can a user run a job, call a list of functions, get info on any given module etc. (Markus)

Plugin Template - this is a priority both for priority users and for module development - we need a stable and useable plugin template to enable us to develop modules for the mini-apps / jupyter users. This needs to be stable for us and for future module users. This also requires documentation: users cannot be expected to find this and understand this on their own. Users who create modules will not / are not software developers and need explicit information on how this works and any future update processes. (Markus)

Modules - Before developing new ones, all repositories / plugins that are not being actively worked on or are an ‘old’ version need to be archived in the github: this keeps things clear for everyone in terms of what to look at and what needs to be the focus of the github channel in slack. 
DEADLINE: 
Topic modeling (Mariella); network analysis (Caitlin); onboarding (Markus) - these will be the core of the mini-apps and the ‘official’ plugins offered as part of kiara, useable in jupyter and/or CLI as well.
Testing currently requires using CLI: we need to develop a way of testing / creating tests that do not involve using CLI - for module writers who aren’t comfortable / don’t want to use the CLI but still need to check for bugs and make  sure this is working (see: https://github.com/DHARPA-Project/kiara-website/issues/19)
Module requirements / best practices need to be defined: standards need to be good but not off-putting and complicated for future module writers - this also requires better documentation / guides for people writing in the future. (opt-ins for developers rather than opt-outs for module writers)
DEADLINE:


Mini-apps - main framework (Caro) with module / workflow support (Mariella & Caitlin) and backend support (Markus); this will then be tested by the team and potentially can involve the design developers in terms of ‘prettying up’ at a later stage.
DEADLINE: October (before SAB meeting)


Documentation - Caro has built the platform for the documentation (https://kiara-website.pages.dev/); team (Petros and Cosimo?) to read through this. Questions/feedback about the site itself (navigability, organisation, how to add / edit content, feature request) to be directed to Caro; questions/feedback about content to be kept as a list of notes / questions to be addressed at an established date by everyone involved in development.

Notes - decision just needs to be made about where notes sit in from a conceptual perspective (Sean and Caitlin - anyone else?); this can then be implemented in a technical sense (Markus), to contribute to the mini-apps and ‘timeline’ (inc. visualisations) (Caro & Mariella)

4. Pixi again
Is this just being used as a virtual environment (as Sean tested, and suggested for workshop users) or more fundamentally in terms of kiara’s construction?
If the latter, why? Is kiara not still predominantly a python based software? (pixi is in rust)
	Predominantly, this needs answering for developing templates and anything at the core 	of kiara: how much do people need to know this to be able to now use or write modules	for kiara, and is this replacing existing (stable) code.



Install development environment¶
Python package¶

> python3 -m venv ~/.venvs/kiara
> source ~/.venvs/kiara/bin/activate
> pip install 'kiara[dev_all]'
...
...
...
Successfully installed ... ... ...
> kiara --help
Usage: kiara [OPTIONS] COMMAND [ARGS]...
   ...
   ...

In addition to the kiara package, you'll need to install plugin packages, for example:

> pip install kiara_plugin.core_types kiara_plugin.tabular

Conda¶

> conda create -n kiara python=3.10
> conda activate kiara
> conda install -c conda-forge -c dharpa kiara

And also plugin packages, like:

> conda install -c conda-forge -c dharpa kiara_plugin.core_types kiara_plugin.tabular

Note, the conda install does not include development dependencies, so you'll need to either install those manually, or use pip:

> pip install 'kiara[dev_all]'



Module and pipeline discovery
kiara module and pipeline discovery

Because we have a requirement to record the versions of code a data set was created with, we need to have a way of versioning our modules and pipelines. This is a harder problem than it looks from the outside, and it's the reason why kiara does not support 'random', unregistered [KiaraModule][kiara.module.KiaraModule] sub-classes.

There are a few ways to register plugin classes like those in Python, the most common one is to use Python entrypoints.

I have decided to also use that, but with a slight twist, to make it easier for people who are not familiar with the Python Packaging ecosystem/dumpster-fire to create their own modules and pipelines.
Registering core modules

To register a core module, kiara checks the entries for the kiara.modules entrypoint in the current Python environment. As a developer, you have two options to add your module:
Register the KiaraModule subclass directly

This is the most straight-forward way to accomplish this, and in line how entrypoints are usually used. You just use the name the module should be registered under as entry point key, and the path to the class as value, ala:

[options.entry_points]
kiara.modules =
    metadata.extract_python_class = kiara.modules.metadata:ExtractPythonClass

Register a variable that contains module information

This is a bit more involved, but ultimately easier to use for end-users, since it can be setup in advance, and it will discover KiaraModule subclasses dynamically, without users even knowing.

Instead of specifying a subclass of KiaraModule, you point the endpoint to a variable somewhere in your package, like this:

[options.entry_points]
kiara.modules =
    playground = kiara_modules.playground:modules

The variable can contain 3 types of values:

    the class object for the KiaraModule subclass (but if you do that, you might as well just use the subclass directly)
    a callable
    tuple with up to three items (in that order):
        a callable
        a list of non-keyword arguments (*args) for the callable
        a map of keyword arguments (**kwargs) for the callable

In case of callables, those will be called (with arguments, if provided). The callable must returns a dictionary with the type name of a module as key, and the KiaraModule subclass as a value. The full kiara type name will be assembled by using the entry point name as prefix, and the module type name (the key in the resulting dict): [entry_point_name].[result_key].

This sounds more complicated than it is, because you can just use the [find_kiara_modules_under][kiara.utils.class_loading.find_kiara_modules_under] helper method, like:

from kiara import find_kiara_modules_under
modules = (find_kiara_modules_under, ["kiara_modules.playground"])

In this example, kiara will recursively walk the kiara_modules.playground Python module and its children, and register every (non-abstract) KiaraModule class it finds (using the module namespace to asssemble the final namespaced module type name).
Registering pipeline modules

As is documented elsewhere, kiara pipelines are just Python dictionaries that follow a certain schema. In practice, they are json or yaml files living in folders that are registered with kiara.

Similar to the way modules are registered, kiara looks for pipelines via an entrypoint: kiara.pipelines.

Because normal resource files or folders can't be registered in Python as an entrypoint, we need to work around that and use the module that contains a folder containing pipelines as the value of the entrypoint:

Something like:

[options.entry_points]
kiara.modules =
    playground = kiara_modules:playground

Depending on how the package is set up, this might or might not work (the reason being 'namespaced packages', if you must know). It's safer to point the entrypoint to a variable within the module, similar to the modules registration explained above:

[options.entry_points]
kiara.modules =
    playground = kiara_modules.playground:pipelines

As above, the value can have 3 types:

    the Python module in question
    a callable
    tuple with up to three items (in that order):
        a callable
        a list of non-keyword arguments (*args) for the callable
        a map of keyword arguments (**kwargs) for the callable

In case of callables, those are supposed to return a list of strings, representing the Python modules to search for pipeline files.

Pipeline files are supposed to be under a folder called pipelines living in the module that was specified. Pipeline names are assembled from the entry point name, the (optional) intermediate folders, and the pipeline name.

Again, kiara provides a helper function so you don't have to worry about setting all this up:

from kiara import find_pipeline_base_path_for_module

pipelines = (find_pipeline_base_path_for_module, ["kiara_modules.language_processing"])

This guide walks through some of the important (and some of the lesser important) features of kiara, the goal is to introduce new users to the overall framework, so they can get a feeling for what it can do, and whether it might be useful for their own usage scenarios.
Setting up kiara¶

In order to use kiara, we'll need to install it into a Python virtual (or conda-) environment, along all the plugins we might want to use. For the purpose of this tutorial, we'll use conda to create such an environment, but you can of course use a 'normal' virtualenv if you prefer. How to install conda itself is out of scope of this tutorial, but you should not have problems finding instructions online.

One simple way is to install the Anaconda (individual edition), then use the Anaconda navigator to create a new environment, install the 'git' package in it if your system does not already have it (you can install 'git' by running the conda install -c anaconda git command in your terminal for example), and use the 'Open Terminal' option of that environment to start up a terminal that has that virtual-/conda-environment already activated.

Here's how to create the environment, activate it, then install the necessary dependencies (assuming conda is installed). At some point in the process, you may be prompted by the terminal to confirm further proceeding (generally by typing "y" and enter) to complete all the steps.

conda create -n kiara_tutorial python=3.9
conda activate kiara_tutorial
conda install -c conda-forge mamba
mamba install -c conda-forge -c dharpa kiara kiara_plugin.core_types kiara_plugin.tabular kiara_plugin.network_analysis

Note

We are using mamba as our package manager here, instead of 'pure' conda. This is optional, but recommended since it makes things a lot faster.
Getting some example data¶

For this tutorial, we'll need some example data, so we can use kiara against it. We've prepared a git repository for that purpose:

git clone https://github.com/DHARPA-Project/kiara.examples.git
cd kiara.examples

Specifically, here we'll be using two CSV files that were created by my colleague Lena Jaskov: files

The files contain information about connection (edges) between medical journals (JournalEdges1902.csv), as well as additional metadata for the journals themselves (JournalNodes1902.csv). We'll use that data to create table and graph structures with kiara.
Checking for available operations¶

First, let's have a look which operations are available, and what we can do with them:

kiara operation list

╭─ Available operations ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   Id                                                             Type(s)       Description                                               │
│  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │
│   create.database.from.file                                      create_from   Create a database from a file.                            │
│   create.database.from.file_bundle                               create_from   Create a database from a file_bundle value.               │
│   create.database.from.table                                     create_from   Create a database value from a table.                     │
│   create.network_data.from.files                                 pipeline      Create table values from files containing edges and       │
│                                                                                node data, then assemble those to the network_data        │
│                                                                                result.                                                   │
│   create.network_data.from.tables                                              Create a graph object from one or two tables.             │
│   create.table.from.file                                         create_from   Create a table from a file, trying to auto-determine      │
│                                                                                the format of said file.                                  │
│   create.table.from.file_bundle                                  create_from   Create a table value from a text file_bundle.             │
│   date.check_range                                                             Check whether a date falls within a specified date        │
│                                                                                range.                                                    │
│   date.extract_from_string                                                     Extract a date object from a string.                      │
│   export.file.as.file                                            export_as     -- n/a --                                                 │
│   export.network_data.as.csv_files                               export_as     Export network data as 2 csv files (one for edges, one    │
│                                                                                for nodes.                                                │
│   export.network_data.as.graphml_file                            export_as     Export network data as graphml file.                      │
│   export.network_data.as.sql_dump                                export_as     Export network data as a sql dump file.                   │
│   export.network_data.as.sqlite_db                               export_as     Export network data as a sqlite database file.            │
│   export.table.as.csv_file                                       export_as     Export a table as csv file.                               │
│   extract.date_array.from.table                                  pipeline      Extract a date array from a table column.                 │
│   file_bundle.pick.file                                                        Pick a single file from a file_bundle value.              │
│   file_bundle.pick.sub_folder                                                  Pick a sub-folder from a file_bundle, resulting in a      │
│                                                                                new file_bundle.                                          │
│   filter.table                                                                 Filter a table.                                           │
│   import.database.from.local_file_path                           pipeline      Import a database from a csv file.                        │
│   import.local.file                                                            Import a file from the local filesystem.                  │
│   import.local.file_bundle                                                     Import a folder (file_bundle) from the local              │
│                                                                                filesystem.                                               │
│   import.network_data.from.local_file_paths                      pipeline      Onboard the edges and nodes from local files, create      │
│                                                                                table values from them, then assemble those to the        │
│                                                                                network_data result.                                      │
│   import.table.from.local_file_path                              pipeline      Import a table from a file on the local filesystem.       │
│   import.table.from.local_folder_path                            pipeline      Import a table from a local folder containing text        │
│                                                                                files.                                                    │
│   kiara_plugin.my_kiara_module.my_kiara_module.tutorial_module                 -- n/a --                                                 │
│   list.contains                                                                Check whether an element is in a list.                    │
│   logic.and                                                                    Returns 'True' if both inputs are 'True'.                 │
│   logic.nand                                                     pipeline      Returns 'False' if both inputs are 'True'.                │
│   logic.nor                                                      pipeline      Returns 'True' if both inputs are 'False'.                │
│   logic.not                                                                    Negates the input.                                        │
│   logic.or                                                                     Returns 'True' if one of the inputs is 'True'.            │
│   logic.xor                                                      pipeline      Returns 'True' if exactly one of it's two inputs is       │
│                                                                                'True'.                                                   │
│   my_kiara_module.example                                                      A very simple example module; concatenate two strings.    │
│   parse.date_array                                                             Create an array of date objects from an array of          │
│                                                                                strings.                                                  │
│   query.database                                                               Execute a sql query against a (sqlite) database.          │
│   query.table                                                                  Execute a sql query against an (Arrow) table.             │
│   string_filter.tokens                                           filter        -- n/a --                                                 │
│   table.pick.column                                                            Pick one column from a table, returning an array.         │
│   table_filter.drop_columns                                      filter        -- n/a --                                                 │
│   table_filter.select_columns                                    filter        -- n/a --                                                 │
│   table_filter.select_rows                                       filter        -- n/a --                                                 │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

Note

In this guide we'll use the term operation to indicate an entity that transforms data in some way or form. kiara also has the concept of module (the differences are explained in more detail here), and in most cases the meaning of 'module' and 'operation' is roughly the same. Especially in the context of this 'Getting started' guide. Nonetheless, keep in mind that technically both terms refer to different things.
Importing data, and creating a table¶

Tables are arguably the most used (and useful) data structures in data science and data engineering. They come in different forms; some people call them spreadsheets, or dataframes. We're not fancy, so we won't do that: we'll call them tables.

A depressingly large amount of (tabular) data comes in CSV files, which is why we'll use one as an example here. Specifically, we will use JournalNodes1902.csv. As stated above, this file contains information about historical medical journals (name, type, where it was from, etc.), and we'll later use it as the table which will provide node information in a network graph. We want to convert this file into a 'proper' table structure, because that will make subsequent processing faster, and also simpler in a lot of cases. 'Proper', in this case means we'll convert it into a better format for internal use, for example containing information about the data type in each column, among other things.
Finding the right command, and how to use it¶

kiara likes its data 'onboarded' (or: 'imported'), meaning it prefers to work with data that was imported into its internal data store. This effectively duplicates a file on a users filesystem (and depending on the filesystem used this could mean doubling the hard-disk space required for that particular dataset). The reason behind this preference is that this ensures the data won't be modified by an external application after import. This enables kiara to employ some techniques to save memory, hard-disk space as well as cpu-resources down the line.

So, in most cases, the first thing you (as a user) want to do is 'import' the source data you want to work with. So, let's run the operation list command again, but let's filter using the term 'import':

kiara operation list import

╭─ Filtered operations ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   Id                                          Type(s)    Description                                                                     │
│  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │
│   import.database.from.local_file_path        pipeline   Import a database from a csv file.                                              │
│   import.local.file                                      Import a file from the local filesystem.                                        │
│   import.local.file_bundle                               Import a folder (file_bundle) from the local filesystem.                        │
│   import.network_data.from.local_file_paths   pipeline   Onboard the edges and nodes from local files, create table values from them,    │
│                                                          then assemble those to the network_data result.                                 │
│   import.table.from.local_file_path           pipeline   Import a table from a file on the local filesystem.                             │
│   import.table.from.local_folder_path         pipeline   Import a table from a local folder containing text files.                       │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

Importing the 'raw' file¶

After looking at the kiara operation list output, it looks like the import.local.file module might be just what we need (to be honest, import.table.from.local_file_path is what we'd really use if we weren't stuck in this getting-started guide, but doing that would skip over a few important basics that are worth understanding).

kiara has the run sub-command, which is used to execute operations. If we only provide a module name, and not any input, this command will tell us what it expects:

kiara run import.local.file

╭─ Run info: import.local.file ────────────────────────────────────────────────╮
│                                                                              │
│ Can't run operation: invalid or insufficient input(s)                        │
│                                                                              │
│ ──────────────────────────────────────────────────────────────────────────── │
│                                                                              │
│ Operation: import.local.file                                                 │
│                                                                              │
│ Import a file from the local filesystem.                                     │
│                                                                              │
│ Inputs:                                                                      │
│                                                                              │
│   field name   status    type     description           required   default   │
│  ──────────────────────────────────────────────────────────────────────────  │
│   path         not set   string   The local path to     yes                  │
│                                   the file.                                  │
│                                                                              │
│                                                                              │
│ Outputs:                                                                     │
│                                                                              │
│   field name   type   description                                            │
│  ──────────────────────────────────────────────────────────────────────────  │
│   file         file   The loaded files.                                      │
│                                                                              │
╰──────────────────────────────────────────────────────────────────────────────╯

As makes obvious sense, we need to provide a path input, of type string, letting kiara know where to pick up the file. The kiara command-line interface can take complex inputs like dictionaries, but fortunately this is not necessary here. If you ever come into a situation where you need that, check out this section.

For simple inputs like string-type things, all we need to do is provide the input name, followed by '=' and the value itself:

kiara run import.local.file path=examples/data/journals/JournalNodes1902.csv

╭─ Result ─────────────────────────────────────────────────────────────────────╮
│                                                                              │
│   field   data_type   value                                                  │
│  ──────────────────────────────────────────────────────────────────────────  │
│   file    file        ﻿Id,Label,JournalType,City,CountryNetworkTime,Prese…   │
│                       75,Psychiatrische en neurologische                     │
│                       bladen,specialized: psychiatry and                     │
│                       neurology,Amsterdam,Netherlands,Netherlands,52.3666…   │
│                       36,The American Journal of Insanity,specialized:       │
│                       psychiatry and neurology,Baltimore,United              │
│                       States,United States,39.289444,-76.615278,English      │
│                       208,The American Journal of Psychology,specialized:    │
│                       psychology,Baltimore,United States,United              │
│                       States,39.289444,-76.615278,English                    │
│                       295,Die Krankenpflege,specialized:                     │
│                       therapy,Berlin,German                                  │
│                       Empire,Germany,52.52,13.405,German                     │
│                       296,Die deutsche Klinik am Eingange des zwanzigsten    │
│                       Jahrhunderts,general medicine,Berlin,German            │
│                       Empire,Germany,52.52,13.405,German                     │
│                       300,Therapeutische Monatshefte,specialized:            │
│                       therapy,Berlin,German                                  │
│                       Empire,Germany,52.52,13.405,German                     │
│                       1,Allgemeine Zeitschrift für                           │
│                       Psychiatrie,specialized: psychiatry and                │
│                       neurology,Berlin,German                                │
│                       Empire,Germany,52.52,13.405,German                     │
│                       7,Archiv für Psychiatrie und                           │
│                       Nervenkrankheiten,specialized: psychiatry and          │
│                       neurology,Berlin,German                                │
│                       Empire,Germany,52.52,13.405,German                     │
│                       10,Berliner klinische Wochenschrift,general            │
│                       medicine,Berlin,German                                 │
│                       Empire,Germany,52.52,13.405,German                     │
│                       13,Charité Annalen,general medicine,Berlin,German      │
│                       Empire,Germany,52.52,13.405,German                     │
│                       21,Monatsschrift für Psychiatrie und                   │
│                       Neurologie,specialized: psychiatry and                 │
│                       neurology,Berlin,German                                │
│                       Empire,Germany,52.52,13.405,German                     │
│                       29,Virchows Archiv,"specialized: anatomy, physiology   │
│                       and pathology",Berlin,German                           │
│                       Empire,Germany,52.52,13.405,German                     │
│                       31,Zeitschrift für pädagogische Psychologie und        │
│                       Pathologie,specialized: psychology and                 │
│                       pedagogy,Berlin,German                                 │
│                       Empire,Germany,52.52,13.405,German                     │
│                       42,Vierteljahrsschrift für gerichtliche Medizin und    │
│                       öffentliches Sanitätswesen,"specialized:               │
│                       anthropology, criminology and                          │
│                       forensics",Berlin,German                               │
│                       Empire,Germany,52.52,13.405,German                     │
│                       47,Centralblatt für Nervenheilkunde und                │
│                       Psychiatrie,specialized: psychiatry and                │
│                       neurology,Berlin,German                                │
│                       Empire,Germany,52.52,13.405,German                     │
│                       50,Russische medicinische Rundschau,general            │
│                       medicine,Berlin,German                                 │
│                       Empire,Germany,52.52,13.405,German                     │
│                       76,Deutsche Aerzte-Zeitung,general                     │
│                       medicine,Berlin,German                                 │
│                       Empire,Germany,52.52,13.405,German                     │
│                       87,Monatsschrift für Geburtshülfe und                  │
│                       Gynäkologie,specialized: gynecology,Berlin,German      │
│                       Empire,Germany,52.52,13.405,German                     │
│                       108,Archiv für klinische Chirurgie,specialized:        │
│                       surgery,Berlin,German                                  │
│                       Empire,Germany,52.52,13.405,German                     │
│                       113,Zeitschrift für klinische Medicin,general          │
│                       medicine,Berlin,German                                 │
│                       Empire,Germany,52.52,13.405,German                     │
│                       159,Deutsche militärärztliche                          │
│                       Zeitschrift,specialized: military                      │
│                       medicine,Berlin,German                                 │
│                       Empire,Germany,52.52,13.405,German                     │
│                       162,Jahresbericht über die Leistungen und              │
│                       Fortschritte auf dem Gebiete der Neurologie und        │
│                       Psychiatrie,specialized: psychiatry and                │
│                       neurology,Berlin,German                                │
│                       Empire,Germany,52.52,13.405,German                     │
│                       192,Ärztliche Sachverständigen-Zeitung,general         │
│                       medicine,Berlin,German                                 │
│                       Empire,Germany,52.52,13.405,German                     │
│                       198,Zeitschrift für die Behandlung Schwachsinniger     │
│                       und Epileptischer,specialized: psychiatry and          │
│                       neurology,Berlin,German                                │
│                       Empire,Germany,52.52,13.405,German                     │
│                       258,Der Pfarrbote,news media,Berlin,German             │
│                       Empire,Germany,52.52,13.405,German                     │
│                       71,Correspondenz-Blatt für Schweizer Aerzte,general    │
│                       medicine,Bern,Switzerland,Switzerland,46.948056,7.4…   │
│                       6,Archiv für mikroskopische Anatomie,"specialized:     │
│                       anatomy, physiology and pathology",Bonn,German         │
│                       Empire,Germany,50.733333,7.1,German                    │
│                       203,The Journal of Abnormal Psychology,specialized:    │
│                       psychology,Boston,United States,United                 │
│                       States,42.358056,-71.063611,English                    │
│                       273,"Correspondenz-Blatt der Deutschen Gesellschaft    │
│                       für Anthropologie, Ethnologie und                      │
│                       Urgeschichte","specialized: anthropology,              │
│                       criminology and forensics",Braunschweig,German         │
│                       Empire,Germany,52.266667,10.516667,German              │
│                       303,Policlinique de Bruxelles,general                  │
│                       medicine,Brussels,Belgium,Belgium,50.85,4.35,French    │
│                       306,Annales de la Société Belge de                     │
│                       Neurologie,specialized: psychiatry and                 │
│                       neurology,Brussels,Belgium,Belgium,50.85,4.35,French   │
│                       19,Journal de neurologie,specialized: psychiatry and   │
│                       neurology,Brussels,Belgium,Belgium,50.85,4.35,French   │
│                       25,"Revue internationale d'électrothérapie, de         │
│                       physiologie, de médecine, de chirurgie,                │
│                       d'obstétrique, de thérapeutique, de chimie et de       │
│                       pharmacie",general                                     │
│                       medicine,Brussels,Belgium,Belgium,50.85,4.35,French    │
│                       35,Bulletin de la Société de Médecine Mentale de       │
│                       Belgique,specialized: psychiatry and                   │
│                       neurology,Brussels,Belgium,Belgium,50.85,4.35,French   │
│                       ...                                                    │
│                                                                              │
│                       ...                                                    │
│                                                                              │
╰──────────────────────────────────────────────────────────────────────────────╯

As you can see from the terminal output, this produced one piece of output data: file (referring to the imported file), and it displays a preview of the file in question for us. By itself, this doesn't do anything yet, it just reads the file and then stops. What we want in this case is to 'save' the file, so we can refer to it again later. The process of 'saving' a value in kiara persists the file (rather: it's content and some metadata) into the kiara data store, giving it an internal unique id (string), and allows the user to 'tag' the value with one or multiple aliases. Aliases are names that are meaningful to the user, in order to make it easy to refer to datasets later on.

kiara supports saving any of the output values of a kiara run command via the --save flag. This --save parameter takes a single string as argument, and can be used in two ways:

    if you want to save all output fields of a run you can just provide a single string (for example imported_journal_csv) as the parameter. In this case, kiara will store all result items with an auto-generated alias in the form of [save_argument].[field_name]. In our case this would result in one item being store in the data store, with the alias imported_journal_csv.file.
    if you want to save only a subset of result values, or want to have more control about the aliases those results get, you can use the --save parameter for every field you want to persist. In this case the argument to --save must be in the form of: [field_name]=[alias]. You can use the --save parameter multiple times, with different field names.

In our case, lets opt for the second option:

kiara run --save file=journal_nodes_file import.local.file path=examples/data/journals/JournalNodes1902.csv

╭─ Result ─────────────────────────────────────────────────────────────────────╮
│                                                                              │
│   field   data_type   value                                                  │
│  ──────────────────────────────────────────────────────────────────────────  │
│   file    file        ﻿Id,Label,JournalType,City,CountryNetworkTime,Prese…   │
│                       75,Psychiatrische en neurologische                     │
│                       bladen,specialized: psychiatry and                     │
│                       neurology,Amsterdam,Netherlands,Netherlands,52.3666…   │
│                       36,The American Journal of Insanity,specialized:       │
│                       psychiatry and neurology,Baltimore,United              │
│                       States,United States,39.289444,-76.615278,English      │
│                       208,The American Journal of Psychology,specialized:    │
│                       psychology,Baltimore,United States,United              │
│                       States,39.289444,-76.615278,English                    │
│                       295,Die Krankenpflege,specialized:                     │
│                       therapy,Berlin,German                                  │
│                       Empire,Germany,52.52,13.405,German                     │
│                       296,Die deutsche Klinik am Eingange des zwanzigsten    │
│                       Jahrhunderts,general medicine,Berlin,German            │
│                       Empire,Germany,52.52,13.405,German                     │
│                       300,Therapeutische Monatshefte,specialized:            │
│                       therapy,Berlin,German                                  │
│                       Empire,Germany,52.52,13.405,German                     │
│                       1,Allgemeine Zeitschrift für                           │
│                       Psychiatrie,specialized: psychiatry and                │
│                       neurology,Berlin,German                                │
│                       Empire,Germany,52.52,13.405,German                     │
│                       7,Archiv für Psychiatrie und                           │
│                       Nervenkrankheiten,specialized: psychiatry and          │
│                       neurology,Berlin,German                                │
│                       Empire,Germany,52.52,13.405,German                     │
│                       10,Berliner klinische Wochenschrift,general            │
│                       medicine,Berlin,German                                 │
│                       Empire,Germany,52.52,13.405,German                     │
│                       13,Charité Annalen,general medicine,Berlin,German      │
│                       Empire,Germany,52.52,13.405,German                     │
│                       21,Monatsschrift für Psychiatrie und                   │
│                       Neurologie,specialized: psychiatry and                 │
│                       neurology,Berlin,German                                │
│                       Empire,Germany,52.52,13.405,German                     │
│                       29,Virchows Archiv,"specialized: anatomy, physiology   │
│                       and pathology",Berlin,German                           │
│                       Empire,Germany,52.52,13.405,German                     │
│                       31,Zeitschrift für pädagogische Psychologie und        │
│                       Pathologie,specialized: psychology and                 │
│                       pedagogy,Berlin,German                                 │
│                       Empire,Germany,52.52,13.405,German                     │
│                       42,Vierteljahrsschrift für gerichtliche Medizin und    │
│                       öffentliches Sanitätswesen,"specialized:               │
│                       anthropology, criminology and                          │
│                       forensics",Berlin,German                               │
│                       Empire,Germany,52.52,13.405,German                     │
│                       47,Centralblatt für Nervenheilkunde und                │
│                       Psychiatrie,specialized: psychiatry and                │
│                       neurology,Berlin,German                                │
│                       Empire,Germany,52.52,13.405,German                     │
│                       50,Russische medicinische Rundschau,general            │
│                       medicine,Berlin,German                                 │
│                       Empire,Germany,52.52,13.405,German                     │
│                       76,Deutsche Aerzte-Zeitung,general                     │
│                       medicine,Berlin,German                                 │
│                       Empire,Germany,52.52,13.405,German                     │
│                       87,Monatsschrift für Geburtshülfe und                  │
│                       Gynäkologie,specialized: gynecology,Berlin,German      │
│                       Empire,Germany,52.52,13.405,German                     │
│                       108,Archiv für klinische Chirurgie,specialized:        │
│                       surgery,Berlin,German                                  │
│                       Empire,Germany,52.52,13.405,German                     │
│                       113,Zeitschrift für klinische Medicin,general          │
│                       medicine,Berlin,German                                 │
│                       Empire,Germany,52.52,13.405,German                     │
│                       159,Deutsche militärärztliche                          │
│                       Zeitschrift,specialized: military                      │
│                       medicine,Berlin,German                                 │
│                       Empire,Germany,52.52,13.405,German                     │
│                       162,Jahresbericht über die Leistungen und              │
│                       Fortschritte auf dem Gebiete der Neurologie und        │
│                       Psychiatrie,specialized: psychiatry and                │
│                       neurology,Berlin,German                                │
│                       Empire,Germany,52.52,13.405,German                     │
│                       192,Ärztliche Sachverständigen-Zeitung,general         │
│                       medicine,Berlin,German                                 │
│                       Empire,Germany,52.52,13.405,German                     │
│                       198,Zeitschrift für die Behandlung Schwachsinniger     │
│                       und Epileptischer,specialized: psychiatry and          │
│                       neurology,Berlin,German                                │
│                       Empire,Germany,52.52,13.405,German                     │
│                       258,Der Pfarrbote,news media,Berlin,German             │
│                       Empire,Germany,52.52,13.405,German                     │
│                       71,Correspondenz-Blatt für Schweizer Aerzte,general    │
│                       medicine,Bern,Switzerland,Switzerland,46.948056,7.4…   │
│                       6,Archiv für mikroskopische Anatomie,"specialized:     │
│                       anatomy, physiology and pathology",Bonn,German         │
│                       Empire,Germany,50.733333,7.1,German                    │
│                       203,The Journal of Abnormal Psychology,specialized:    │
│                       psychology,Boston,United States,United                 │
│                       States,42.358056,-71.063611,English                    │
│                       273,"Correspondenz-Blatt der Deutschen Gesellschaft    │
│                       für Anthropologie, Ethnologie und                      │
│                       Urgeschichte","specialized: anthropology,              │
│                       criminology and forensics",Braunschweig,German         │
│                       Empire,Germany,52.266667,10.516667,German              │
│                       303,Policlinique de Bruxelles,general                  │
│                       medicine,Brussels,Belgium,Belgium,50.85,4.35,French    │
│                       306,Annales de la Société Belge de                     │
│                       Neurologie,specialized: psychiatry and                 │
│                       neurology,Brussels,Belgium,Belgium,50.85,4.35,French   │
│                       19,Journal de neurologie,specialized: psychiatry and   │
│                       neurology,Brussels,Belgium,Belgium,50.85,4.35,French   │
│                       25,"Revue internationale d'électrothérapie, de         │
│                       physiologie, de médecine, de chirurgie,                │
│                       d'obstétrique, de thérapeutique, de chimie et de       │
│                       pharmacie",general                                     │
│                       medicine,Brussels,Belgium,Belgium,50.85,4.35,French    │
│                       35,Bulletin de la Société de Médecine Mentale de       │
│                       Belgique,specialized: psychiatry and                   │
│                       neurology,Brussels,Belgium,Belgium,50.85,4.35,French   │
│                       ...                                                    │
│                                                                              │
│                       ...                                                    │
│                                                                              │
╰──────────────────────────────────────────────────────────────────────────────╯

╭─ Stored result value ────────────────────────────────────────────────────────╮
│                                                                              │
│   field   data type   stored id                         alias(es)            │
│  ──────────────────────────────────────────────────────────────────────────  │
│   file    file        8bb90738-ab11-4cfb-8ada-f43549…   journal_nodes_file   │
│                                                                              │
╰──────────────────────────────────────────────────────────────────────────────╯

Checking the data store¶

To check whether that worked, we can list all of our items in the data store, and see if the one we just created is in there:

kiara data list

╭─ Available aliases ──────────────────────────────────────────────────────────╮
│                                                                              │
│   alias                type       size                                       │
│  ──────────────────────────────────────                                      │
│   journal_nodes_file   file   33.43 KB                                       │
│                                                                              │
╰──────────────────────────────────────────────────────────────────────────────╯

All right! Looks like this worked.
Creating a table from an imported CSV file¶

CSV files are usually not much use by themselves, in most cases we want to create a table-like structure from them, so we can efficiently query the data. This usually also makes sure that the structure and format of the file is valid.

Let's ask kiara what 'create' related operations it has available:

kiara operation list create

╭─ Filtered operations ────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                      │
│   Id                                 Type(s)       Description                                                       │
│  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │
│   create.database.from.file          create_from   Create a database from a file.                                    │
│   create.database.from.file_bundle   create_from   Create a database from a file_bundle value.                       │
│   create.database.from.table         create_from   Create a database value from a table.                             │
│   create.network_data.from.files     pipeline      Create table values from files containing edges and node data,    │
│                                                    then assemble those to the network_data result.                   │
│   create.network_data.from.tables                  Create a graph object from one or two tables.                     │
│   create.table.from.file             create_from   Create a table from a file, trying to auto-determine the format   │
│                                                    of said file.                                                     │
│   create.table.from.file_bundle      create_from   Create a table value from a text file_bundle.                     │
│                                                                                                                      │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

Righto, looks like create.table.from.file might be our ticket! Let's see what it does:

kiara operation explain create.table.from.file

╭─ Operation: create.table.from.file ──────────────────────────────────────────╮
│                                                                              │
│   Documentation   Create a table from a file, trying to auto-determine the   │
│                   format of said file.                                       │
│                                                                              │
│   Inputs                                                                     │
│                     field                                                    │
│                     name        type   descripti…   Required   Default       │
│                    ──────────────────────────────────────────────────────    │
│                     file        file   The source   yes        -- no         │
│                                        value (of               default       │
│                                        type                    --            │
│                                        'file').                              │
│                                                                              │
│                                                                              │
│   Outputs                                                                    │
│                     field name   type    description                         │
│                    ──────────────────────────────────────────────────────    │
│                     table        table   The result value (of type           │
│                                          'table').                           │
│                                                                              │
│                                                                              │
╰──────────────────────────────────────────────────────────────────────────────╯

So, it needs an input file of type ... file, and will return a 'table'-named output of type, well ... table. Looks good. Here is how we run this:

kiara run create.table.from.file file=alias:journal_nodes_file

╭─ Result ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                                                                                      │
│   field   data_type   value                                                                                                                                                                          │
│  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │
│   table   table                                                                                                                                                                                      │
│                         Id    Label                              JournalType                         City        CountryNetworkTime        PresentDayCountry   Latitude    Longitude    Language     │
│                        ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────    │
│                         75    Psychiatrische en neurologische    specialized: psychiatry and neuro   Amsterdam   Netherlands               Netherlands         52.366667   4.9          Dutch        │
│                         36    The American Journal of Insanity   specialized: psychiatry and neuro   Baltimore   United States             United States       39.289444   -76.615278   English      │
│                         208   The American Journal of Psycholo   specialized: psychology             Baltimore   United States             United States       39.289444   -76.615278   English      │
│                         295   Die Krankenpflege                  specialized: therapy                Berlin      German Empire             Germany             52.52       13.405       German       │
│                         296   Die deutsche Klinik am Eingange    general medicine                    Berlin      German Empire             Germany             52.52       13.405       German       │
│                         300   Therapeutische Monatshefte         specialized: therapy                Berlin      German Empire             Germany             52.52       13.405       German       │
│                         1     Allgemeine Zeitschrift für Psych   specialized: psychiatry and neuro   Berlin      German Empire             Germany             52.52       13.405       German       │
│                         7     Archiv für Psychiatrie und Nerve   specialized: psychiatry and neuro   Berlin      German Empire             Germany             52.52       13.405       German       │
│                         10    Berliner klinische Wochenschrift   general medicine                    Berlin      German Empire             Germany             52.52       13.405       German       │
│                         13    Charité Annalen                    general medicine                    Berlin      German Empire             Germany             52.52       13.405       German       │
│                         21    Monatsschrift für Psychiatrie un   specialized: psychiatry and neuro   Berlin      German Empire             Germany             52.52       13.405       German       │
│                         29    Virchows Archiv                    specialized: anatomy, physiology    Berlin      German Empire             Germany             52.52       13.405       German       │
│                         31    Zeitschrift für pädagogische Psy   specialized: psychology and pedag   Berlin      German Empire             Germany             52.52       13.405       German       │
│                         42    Vierteljahrsschrift für gerichtl   specialized: anthropology, crimin   Berlin      German Empire             Germany             52.52       13.405       German       │
│                         47    Centralblatt für Nervenheilkunde   specialized: psychiatry and neuro   Berlin      German Empire             Germany             52.52       13.405       German       │
│                         50    Russische medicinische Rundschau   general medicine                    Berlin      German Empire             Germany             52.52       13.405       German       │
│                         ...   ...                                ...                                 ...         ...                       ...                 ...         ...          ...          │
│                         ...   ...                                ...                                 ...         ...                       ...                 ...         ...          ...          │
│                         277   L'arte medica                      general medicine                    Turin       Italy                     Italy               45.079167   7.676111     Italian      │
│                         288   Allgemeine österreichische Geric   specialized: anthropology, crimin   Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                         18    Jahrbücher für Psychiatrie         specialized: psychiatry and neuro   Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                         30    Wiener klinische Rundschau         general medicine                    Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                         44    Wiener klinische Wochenschrift     general medicine                    Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                         45    Wiener medizinische Wochenschrif   general medicine                    Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                         72    Wiener medizinische Presse         general medicine                    Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                         81    Monatsschrift für Gesundheitspfl   general medicine                    Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                         93    Klinisch-therapeutische Wochensc   general medicine                    Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                         151   Medicinisch-chirurgisches Centra   specialized: surgery                Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                         199   Der Militärazt                     specialized: military medicine      Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                         261   Медицинская беседа                 general medicine                    Voronezh    Russian Empire            Russia              51.671667   39.210556    Russian      │
│                         77    Medycyna                           general medicine                    Warsaw      Russian Empire            Poland              52.233333   21.016667    Polish       │
│                         150   Kronika Lekarska                   general medicine                    Warsaw      Russian Empire            Poland              52.233333   21.016667    Polish       │
│                         86    Grenzfragen des Nerven- und Seel   specialized: psychiatry and neuro   Wiesbaden   German Empire             Germany             50.0825     8.24         German       │
│                         206   Ergebnisse der Allgemeinen Patho   specialized: anatomy, physiology    Wiesbaden   German Empire             Germany             50.0825     8.24         German       │
│                                                                                                                                                                                                      │
│                                                                                                                                                                                                      │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

Note

In this example we pre-pend the right side of the file= argument with alias:. This is necessary to make it clear to kiara that we mean a dataset that lives in its data store, and we want to refer to it via its alias. Otherwise, kiara would have just interpreted the input as a string, and since that is of the wrong input type (we needed a table), it would have thrown an error.

That output looks good, right? Much more table-y then before. Only thing is: we want to again 'save' this output, so we can use it later directly. No big deal, just like last time:

kiara run --output silent --save table=journal_nodes_table create.table.from.file file=alias:journal_nodes_file

╭─ Stored result value ────────────────────────────────────────────────────────╮
│                                                                              │
│   field   data type   stored id                        alias(es)             │
│  ──────────────────────────────────────────────────────────────────────────  │
│   table   table       8ef2a5ea-031a-4370-93ac-c8d42…   journal_nodes_table   │
│                                                                              │
╰──────────────────────────────────────────────────────────────────────────────╯

Note

Here we use the --output silent command line option to supress any output of values. We've seen this already in the last invocation of this command. kiara will still tell us the id of the value it just saved.
Checking the data store, again¶

Now, let's look again at the content of the kiara data store:

kiara data list

╭─ Available aliases ──────────────────────────────────────────────────────────╮
│                                                                              │
│   alias                 type        size                                     │
│  ────────────────────────────────────────                                    │
│   journal_nodes_file    file    33.43 KB                                     │
│   journal_nodes_table   table   42.79 KB                                     │
│                                                                              │
╰──────────────────────────────────────────────────────────────────────────────╯

As you can see, there are 2 items now: one file, and one table. If you ever want to get more details about any of the items in the data store, you can use one of those commands:
Display information about the data: kiara data explain¶

kiara data explain alias:journal_nodes_table

╭─ Value details for: alias:journal_nodes_table ───────────────────────────────╮
│                                                                              │
│   value_id            8ef2a5ea-031a-4370-93ac-c8d42dc1ea3b                   │
│   kiara_id            bc41cc78-899c-433b-8e8d-33d0c9990791                   │
│                                                                              │
│                       ────────────────────────────────────────────────────   │
│   data_type_info                                                             │
│                         data_type_name     table                             │
│                         data_type_config   {}                                │
│                         characteristics    {                                 │
│                                              "is_scalar": false,             │
│                                              "is_json_serializable":         │
│                                            false                             │
│                                            }                                 │
│                         data_type_class                                      │
│                                              python_cla…   TableType         │
│                                              python_mod…   kiara_plug…       │
│                                              full_name     kiara_plug…       │
│                                                                              │
│                                                                              │
│   destiny_backlinks   {}                                                     │
│   enviroments         None                                                   │
│   property_links      {                                                      │
│                         "metadata.python_class":                             │
│                       "aae815fc-07fb-48ef-a8e3-cc18473d8389",                │
│                         "metadata.table":                                    │
│                       "30bec5f0-d69a-4b2e-bda2-e99a411d6463"                 │
│                       }                                                      │
│   value_hash          zdpuAn89Et1ENzfoASJRYcWEceyfRiPg664mN4nnHLFnjRLyg      │
│   value_schema                                                               │
│                         type          table                                  │
│                         type_config   {}                                     │
│                         default       __not_set__                            │
│                         optional      False                                  │
│                         is_constant   False                                  │
│                         doc           The result value (of type              │
│                                       'table').                              │
│                                                                              │
│   value_size          42.79 KB                                               │
│   value_status        -- set --                                              │
│                                                                              │
╰──────────────────────────────────────────────────────────────────────────────╯

This command prints out the metadata kiara has stored about a value item. This commands supports displaying several internally important metadata details of stored datasets, check out the available options with kiara data explain --help. One option that is particularly interesting is the --properties one, which displays all the metadata properties kiara has collected about a value. We will experiment with this option a bit later in this tutorial.
Display the data itself: kiara data load¶

kiara data load -s alias:journal_nodes_table

  Id    Label                                            JournalType                                       City        CountryNetworkTime        PresentDayCountry   Latitude    Longitude    Language  
 ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 
  75    Psychiatrische en neurologische bladen           specialized: psychiatry and neurology             Amsterdam   Netherlands               Netherlands         52.366667   4.9          Dutch     
  36    The American Journal of Insanity                 specialized: psychiatry and neurology             Baltimore   United States             United States       39.289444   -76.615278   English   
  208   The American Journal of Psychology               specialized: psychology                           Baltimore   United States             United States       39.289444   -76.615278   English   
  295   Die Krankenpflege                                specialized: therapy                              Berlin      German Empire             Germany             52.52       13.405       German    
  296   Die deutsche Klinik am Eingange des zwanzigste   general medicine                                  Berlin      German Empire             Germany             52.52       13.405       German    
  300   Therapeutische Monatshefte                       specialized: therapy                              Berlin      German Empire             Germany             52.52       13.405       German    
  1     Allgemeine Zeitschrift für Psychiatrie           specialized: psychiatry and neurology             Berlin      German Empire             Germany             52.52       13.405       German    
  7     Archiv für Psychiatrie und Nervenkrankheiten     specialized: psychiatry and neurology             Berlin      German Empire             Germany             52.52       13.405       German    
  10    Berliner klinische Wochenschrift                 general medicine                                  Berlin      German Empire             Germany             52.52       13.405       German    
  13    Charité Annalen                                  general medicine                                  Berlin      German Empire             Germany             52.52       13.405       German    
  21    Monatsschrift für Psychiatrie und Neurologie     specialized: psychiatry and neurology             Berlin      German Empire             Germany             52.52       13.405       German    
  29    Virchows Archiv                                  specialized: anatomy, physiology and pathology    Berlin      German Empire             Germany             52.52       13.405       German    
  31    Zeitschrift für pädagogische Psychologie und P   specialized: psychology and pedagogy              Berlin      German Empire             Germany             52.52       13.405       German    
  42    Vierteljahrsschrift für gerichtliche Medizin u   specialized: anthropology, criminology and fore   Berlin      German Empire             Germany             52.52       13.405       German    
  47    Centralblatt für Nervenheilkunde und Psychiatr   specialized: psychiatry and neurology             Berlin      German Empire             Germany             52.52       13.405       German    
  50    Russische medicinische Rundschau                 general medicine                                  Berlin      German Empire             Germany             52.52       13.405       German    
  ...   ...                                              ...                                               ...         ...                       ...                 ...         ...          ...       
  ...   ...                                              ...                                               ...         ...                       ...                 ...         ...          ...       
  277   L'arte medica                                    general medicine                                  Turin       Italy                     Italy               45.079167   7.676111     Italian   
  288   Allgemeine österreichische Gerichts-Zeitung      specialized: anthropology, criminology and fore   Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German    
  18    Jahrbücher für Psychiatrie                       specialized: psychiatry and neurology             Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German    
  30    Wiener klinische Rundschau                       general medicine                                  Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German    
  44    Wiener klinische Wochenschrift                   general medicine                                  Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German    
  45    Wiener medizinische Wochenschrift                general medicine                                  Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German    
  72    Wiener medizinische Presse                       general medicine                                  Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German    
  81    Monatsschrift für Gesundheitspflege              general medicine                                  Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German    
  93    Klinisch-therapeutische Wochenschrift            general medicine                                  Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German    
  151   Medicinisch-chirurgisches Centralblatt           specialized: surgery                              Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German    
  199   Der Militärazt                                   specialized: military medicine                    Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German    
  261   Медицинская беседа                               general medicine                                  Voronezh    Russian Empire            Russia              51.671667   39.210556    Russian   
  77    Medycyna                                         general medicine                                  Warsaw      Russian Empire            Poland              52.233333   21.016667    Polish    
  150   Kronika Lekarska                                 general medicine                                  Warsaw      Russian Empire            Poland              52.233333   21.016667    Polish    
  86    Grenzfragen des Nerven- und Seelenlebens         specialized: psychiatry and neurology             Wiesbaden   German Empire             Germany             50.0825     8.24         German    
  206   Ergebnisse der Allgemeinen Pathologie und Path   specialized: anatomy, physiology and pathology    Wiesbaden   German Empire             Germany             50.0825     8.24         German    

Note

If you omit the -s flag, this command will let you browse the table (or any other supported data type) interactively, similar to a pager application.

This command loads the actual data, and prints out its content (or a representation of it that makes sense in a terminal-context).
Querying the table data¶

This section is a bit more advanced, so you can skip it if you want. It's just to show an example of what can be done with a stored table data item.

We'll be using the SQL query language to find the names and types of all journals from Berlin. The query for this is:

select Label, JournalType from data where City='Berlin'

The kiara module we are going to use is called query.table. Let's check again the parameters this module expects:

kiara run query.table

╭─ Run info: query.table ──────────────────────────────────────────────────────╮
│                                                                              │
│ Can't run operation: invalid or insufficient input(s)                        │
│                                                                              │
│ ──────────────────────────────────────────────────────────────────────────── │
│                                                                              │
│ Operation: query.table                                                       │
│                                                                              │
│ Execute a sql query against an (Arrow) table.                                │
│                                                                              │
│ The default relation name for the sql query is 'data', but can be modified   │
│ by the 'relation_name' config option/input.                                  │
│                                                                              │
│ If the 'query' module config option is not set, users can provide their own  │
│ query, otherwise the pre-set one will be used.                               │
│                                                                              │
│ Inputs:                                                                      │
│                                                                              │
│   field name      status    type     description        required   default   │
│  ──────────────────────────────────────────────────────────────────────────  │
│   query           not set   string   The query, use     yes                  │
│                                      the value of the                        │
│                                      'relation_name'                         │
│                                      input as table,                         │
│                                      e.g. 'select *                          │
│                                      from data'.                             │
│   relation_name   valid     string   The name the       no         data      │
│                                      table is                                │
│                                      referred to in                          │
│                                      the sql query.                          │
│   table           not set   table    The table to       yes                  │
│                                      query                                   │
│                                                                              │
│                                                                              │
│ Outputs:                                                                     │
│                                                                              │
│   field name     type    description                                         │
│  ──────────────────────────────────────────────────────────────────────────  │
│   query_result   table   The query result.                                   │
│                                                                              │
╰──────────────────────────────────────────────────────────────────────────────╯

Aha. table, and query are required. Good, we have both. In this example we'll use the data item we've stored as input for another workflow. That goes like this:

kiara run query.table table=alias:journal_nodes_table query="select Label, JournalType from data where City='Berlin'"

╭─ Result ─────────────────────────────────────────────────────────────────────╮
│                                                                              │
│   field          data_type   value                                           │
│  ──────────────────────────────────────────────────────────────────────────  │
│   query_result   table                                                       │
│                                Label                 JournalType             │
│                               ───────────────────────────────────────────    │
│                                Die Krankenpflege     specialized: therap     │
│                                Die deutsche Klinik   general medicine        │
│                                Therapeutische Mona   specialized: therap     │
│                                Allgemeine Zeitschr   specialized: psychi     │
│                                Archiv für Psychiat   specialized: psychi     │
│                                Berliner klinische    general medicine        │
│                                Charité Annalen       general medicine        │
│                                Monatsschrift für P   specialized: psychi     │
│                                Virchows Archiv       specialized: anatom     │
│                                Zeitschrift für päd   specialized: psycho     │
│                                Vierteljahrsschrift   specialized: anthro     │
│                                Centralblatt für Ne   specialized: psychi     │
│                                Russische medicinis   general medicine        │
│                                Deutsche Aerzte-Zei   general medicine        │
│                                Monatsschrift für G   specialized: gyneco     │
│                                Archiv für klinisch   specialized: surger     │
│                                Zeitschrift für kli   general medicine        │
│                                Deutsche militärärz   specialized: milita     │
│                                Jahresbericht über    specialized: psychi     │
│                                Ärztliche Sachverst   general medicine        │
│                                Zeitschrift für die   specialized: psychi     │
│                                Der Pfarrbote         news media              │
│                                                                              │
│                                                                              │
╰──────────────────────────────────────────────────────────────────────────────╯

Note how we use the alias:-prefix again here, to signify to kiara that what follows is indeed a reference to a dataset, and not a string...
Saving the result of the query¶

As it is, the result of this query won't be saved anywhere. This might be fine for queries in exploratory-type situations. But in some cases we might want to store the result of our work, similar to how we imported the original table in the first place. The kiara run command can do that, using the --save flag. It takes as argument a string. If that string contains a '=', it is interpreted as a key value pair where the key is the name of the field we want to save, and the value the alias we want to save it under. Here is how that goes:

kiara run query.table --output=silent --save query_result=berlin_journals table=alias:journal_nodes_table query="select Label, JournalType from data where City='Berlin'"

╭─ Stored result value ────────────────────────────────────────────────────────╮
│                                                                              │
│   field          data type   stored id                     alias(es)         │
│  ──────────────────────────────────────────────────────────────────────────  │
│   query_result   table       f32438b9-ab95-4d18-b15e-22…   berlin_journals   │
│                                                                              │
╰──────────────────────────────────────────────────────────────────────────────╯

From looking at the output, it seems that saving our result has worked. We can make sure by letting kiara 'explain' to us the data that is stored under the alias 'berlin_journals'. This time, let's also display the result tables properties (by using the --properties flag:

kiara data explain --properties alias:berlin_journals

╭─ Value details for: alias:berlin_journals ───────────────────────────────────╮
│                                                                              │
│   value_id            f32438b9-ab95-4d18-b15e-22f6e168454d                   │
│   kiara_id            bc41cc78-899c-433b-8e8d-33d0c9990791                   │
│                                                                              │
│                       ────────────────────────────────────────────────────   │
│   data_type_info                                                             │
│                         data_type_name     table                             │
│                         data_type_config   {}                                │
│                         characteristics    {                                 │
│                                              "is_scalar": false,             │
│                                              "is_json_serializable":         │
│                                            false                             │
│                                            }                                 │
│                         data_type_class                                      │
│                                              python_cla…   TableType         │
│                                              python_mod…   kiara_plug…       │
│                                              full_name     kiara_plug…       │
│                                                                              │
│                                                                              │
│   destiny_backlinks   {}                                                     │
│   enviroments         None                                                   │
│   properties                                                                 │
│                         field                   value                        │
│                        ──────────────────────────────────────────────────    │
│                         metadata.python_class   {                            │
│                                                   "python_class": {          │
│                                                     "python_class_name"…     │
│                                                     "python_module_name…     │
│                                                     "full_name": "kiara…     │
│                                                   }                          │
│                                                 }                            │
│                         metadata.table          {                            │
│                                                   "table": {                 │
│                                                     "column_names": [        │
│                                                       "Label",               │
│                                                       "JournalType"          │
│                                                     ],                       │
│                                                     "column_schema": {       │
│                                                       "Label": {             │
│                                                         "type_name": "s…     │
│                                                         "metadata": {        │
│                                                           "arrow_type_i…     │
│                                                         }                    │
│                                                       },                     │
│                                                       "JournalType": {       │
│                                                         "type_name": "s…     │
│                                                         "metadata": {        │
│                                                           "arrow_type_i…     │
│                                                         }                    │
│                                                       }                      │
│                                                     },                       │
│                                                     "rows": 22,              │
│                                                     "size": 1672             │
│                                                   }                          │
│                                                 }                            │
│                                                                              │
│   property_links      {                                                      │
│                         "metadata.python_class":                             │
│                       "e71ccadc-8eee-49cb-93e1-ee42faeaad96",                │
│                         "metadata.table":                                    │
│                       "ca42d233-c95c-4d80-a690-f1acd840cf9f"                 │
│                       }                                                      │
│   value_hash          zdpuAq5Ty5hNtUaKWouPmS75LxteiQQv6Ue6Jsq9v39QoMPyw      │
│   value_schema                                                               │
│                         type          table                                  │
│                         type_config   {}                                     │
│                         default       __not_set__                            │
│                         optional      False                                  │
│                         is_constant   False                                  │
│                         doc           The query result.                      │
│                                                                              │
│   value_size          2.63 KB                                                │
│   value_status        -- set --                                              │
│                                                                              │
│                       ────────────────────────────────────────────────────   │
│                                                                              │
│   properties                                                                 │
│                         metadata.python_class   {                            │
│                                                   "python_class": {          │
│                                                     "python_class_name"…     │
│                                                     "python_module_name…     │
│                                                     "full_name": "kiara…     │
│                                                   }                          │
│                                                 }                            │
│                         metadata.table          {                            │
│                                                   "table": {                 │
│                                                     "column_names": [        │
│                                                       "Label",               │
│                                                       "JournalType"          │
│                                                     ],                       │
│                                                     "column_schema": {       │
│                                                       "Label": {             │
│                                                         "type_name": "s…     │
│                                                         "metadata": {        │
│                                                           "arrow_type_i…     │
│                                                         }                    │
│                                                       },                     │
│                                                       "JournalType": {       │
│                                                         "type_name": "s…     │
│                                                         "metadata": {        │
│                                                           "arrow_type_i…     │
│                                                         }                    │
│                                                       }                      │
│                                                     },                       │
│                                                     "rows": 22,              │
│                                                     "size": 1672             │
│                                                   }                          │
│                                                 }                            │
│                                                                              │
│                                                                              │
╰──────────────────────────────────────────────────────────────────────────────╯

Generating a network graph¶

Our goal for this tutorial is to create a network graph, and investigate its properties. Network graphs are usually created from one or two pieces of data (both tabular in nature):

    edges (mandatory): information about what nodes exist, and if and how they are connected
    nodes information (optional): information about attributes of each node

Note

In this tutorial we'll go through all the steps necessary to create a network graph object from two CSV files, one by one. This is a bit cumbersome, but it'll help you understand what actually happens. In a later tutorial we'll show how to create a kiara pipeline to combine all those steps into one.
Importing edges data, creating a table item from it¶

We already have our nodes imported into kiara (with the alias my_first_table). Now we need to do the same for our edges. Similar to what we have done above, we want to import the file into the kiara data store, and then convert it into a table. This time, let's just use a pre-pared (so-called) pipeline operation, which basically runs both operations in one, and feeds the right input(s) into the right input(s):

kiara operation explain import.table.from.local_file_path

╭─ Operation: import.table.from.local_file_path ───────────────────────────────╮
│                                                                              │
│   Documentation   Import a table from a file on the local filesystem.        │
│                                                                              │
│   Inputs                                                                     │
│                     field                                                    │
│                     name        type     descrip…   Required   Default       │
│                    ──────────────────────────────────────────────────────    │
│                     path        string   The        yes        -- no         │
│                                          local                 default       │
│                                          path to               --            │
│                                          the                                 │
│                                          file.                               │
│                                                                              │
│                                                                              │
│   Outputs                                                                    │
│                     field name      type    description                      │
│                    ──────────────────────────────────────────────────────    │
│                     imported_file   file    The loaded files.                │
│                     table           table   The result value (of type        │
│                                             'table').                        │
│                                                                              │
│                                                                              │
╰──────────────────────────────────────────────────────────────────────────────╯

So, let's see:

kiara run --save journal_edges import.table.from.local_file_path path=examples/data/journals/JournalEdges1902.csv

╭─ Results ────────────────────────────────────────────────────────────────────╮
│                                                                              │
│   field           data_type   value                                          │
│  ──────────────────────────────────────────────────────────                  │
│   imported_file   file        ﻿Source,Target,weight                          │
│                               1,1,11                                         │
│                               1,5,1                                          │
│                               1,7,6                                          │
│                               1,8,15                                         │
│                               1,10,24                                        │
│                               1,13,1                                         │
│                               1,14,2                                         │
│                               1,15,8                                         │
│                               1,18,7                                         │
│                               1,20,48                                        │
│                               1,21,7                                         │
│                               1,22,4                                         │
│                               1,23,75                                        │
│                               1,24,1                                         │
│                               1,26,8                                         │
│                               1,29,1                                         │
│                               1,30,14                                        │
│                               1,35,16                                        │
│                               1,36,23                                        │
│                               1,37,4                                         │
│                               1,38,5                                         │
│                               1,39,4                                         │
│                               1,40,10                                        │
│                               1,41,2                                         │
│                               1,42,4                                         │
│                               1,43,2                                         │
│                               1,44,1                                         │
│                               1,45,5                                         │
│                               1,46,7                                         │
│                               1,47,2                                         │
│                               1,56,1                                         │
│                               1,58,34                                        │
│                               1,61,9                                         │
│                               1,63,12                                        │
│                               ...                                            │
│                                                                              │
│                               ...                                            │
│   table           table                                                      │
│                                 Source   Target   weight                     │
│                                ──────────────────────────                    │
│                                 1        1        11                         │
│                                 1        5        1                          │
│                                 1        7        6                          │
│                                 1        8        15                         │
│                                 1        10       24                         │
│                                 1        13       1                          │
│                                 1        14       2                          │
│                                 1        15       8                          │
│                                 1        18       7                          │
│                                 1        20       48                         │
│                                 1        21       7                          │
│                                 1        22       4                          │
│                                 1        23       75                         │
│                                 1        24       1                          │
│                                 1        26       8                          │
│                                 1        29       1                          │
│                                 ...      ...      ...                        │
│                                 ...      ...      ...                        │
│                                 51       108      1                          │
│                                 51       109      5                          │
│                                 51       110      1                          │
│                                 51       111      1                          │
│                                 51       112      1                          │
│                                 51       113      1                          │
│                                 51       114      2                          │
│                                 51       115      2                          │
│                                 51       116      1                          │
│                                 51       118      3                          │
│                                 51       119      2                          │
│                                 51       120      1                          │
│                                 51       121      1                          │
│                                 63       102      1                          │
│                                 147      27       11                         │
│                                 147      241      1                          │
│                                                                              │
│                                                                              │
╰──────────────────────────────────────────────────────────────────────────────╯

╭─ Stored result values ───────────────────────────────────────────────────────╮
│                                                                              │
│   field           data type   stored id               alias(es)              │
│  ──────────────────────────────────────────────────────────────────────────  │
│   imported_file   file        d524e19e-be9b-4f56-b…   journal_edges.impor…   │
│   table           table       0aea06f2-f729-4ec5-b…   journal_edges.table    │
│                                                                              │
╰──────────────────────────────────────────────────────────────────────────────╯

Note

Here we've used a simple string (without '=') with the --save option, and as you can see, kiara created two namespaced aliases for the result items.

At this stage we'll have two relevant tables in our store: journal_edges.table, and journal_nodes_table (note how both use different naming schemes due to us using the --save option differently in both cases):

kiara data list

╭─ Available aliases ──────────────────────────────────────────────────────────╮
│                                                                              │
│   alias                         type        size                             │
│  ────────────────────────────────────────────────                            │
│   journal_edges.table           table    9.13 KB                             │
│   journal_nodes_file            file    33.43 KB                             │
│   journal_nodes_table           table   42.79 KB                             │
│   journal_edges.imported_file   file     3.02 KB                             │
│   berlin_journals               table    2.63 KB                             │
│                                                                              │
╰──────────────────────────────────────────────────────────────────────────────╯

Creating the graph¶

Now that we have the edges data in kiara in a useful format, we can create the graph object. The data type for graphs in kiara is called network_data, so let's check out all the operations kiara has to offer related to network_data:

kiara operation list network_data

╭─ Filtered operations ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                                                                  │
│   Id                                          Type(s)     Description                                                                                                            │
│  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │
│   create.network_data.from.files              pipeline    Create table values from files containing edges and node data, then assemble those to the network_data result.         │
│   create.network_data.from.tables                         Create a graph object from one or two tables.                                                                          │
│   export.network_data.as.csv_files            export_as   Export network data as 2 csv files (one for edges, one for nodes.                                                      │
│   export.network_data.as.graphml_file         export_as   Export network data as graphml file.                                                                                   │
│   export.network_data.as.sql_dump             export_as   Export network data as a sql dump file.                                                                                │
│   export.network_data.as.sqlite_db            export_as   Export network data as a sqlite database file.                                                                         │
│   import.network_data.from.local_file_paths   pipeline    Onboard the edges and nodes from local files, create table values from them, then assemble those to the network_data   │
│                                                           result.                                                                                                                │
│                                                                                                                                                                                  │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

Hm, create.network_data.from.tables looks good, right? Let's see that operations interface:

kiara operation explain create.network_data.from.tables

╭─ Operation: create.network_data.from.tables ─────────────────────────────────────────────────────────────────────────╮
│                                                                                                                      │
│   Documentation   Create a graph object from one or two tables.                                                      │
│                                                                                                                      │
│                   This module needs at least one table as input, providing the edges of the resulting network data   │
│                   set.                                                                                               │
│                   If no further table is created, basic node information will be automatically created by using      │
│                   unique values from                                                                                 │
│                   the edges source and target columns.                                                               │
│                                                                                                                      │
│   Inputs                                                                                                             │
│                     field name           type     description                        Required   Default              │
│                    ──────────────────────────────────────────────────────────────────────────────────────────────    │
│                     edges                table    A table that contains the edges    yes        -- no default --     │
│                                                   data.                                                              │
│                     source_column_name   string   The name of the source column      no         source               │
│                                                   name in the edges table.                                           │
│                     target_column_name   string   The name of the target column      no         target               │
│                                                   name in the edges table.                                           │
│                     edges_column_map     dict     An optional map of original        no         -- no default --     │
│                                                   column name to desired.                                            │
│                     nodes                table    A table that contains the nodes    no         -- no default --     │
│                                                   data.                                                              │
│                     id_column_name       string   The name (before any potential     no         id                   │
│                                                   column mapping) of the                                             │
│                                                   node-table column that contains                                    │
│                                                   the node identifier (used in the                                   │
│                                                   edges table).                                                      │
│                     label_column_name    string   The name of a column that          no         -- no default --     │
│                                                   contains the node label (before                                    │
│                                                   any potential column name                                          │
│                                                   mapping). If not specified, the                                    │
│                                                   value of the id value will be                                      │
│                                                   used as label.                                                     │
│                     nodes_column_map     dict     An optional map of original        no         -- no default --     │
│                                                   column name to desired.                                            │
│                                                                                                                      │
│                                                                                                                      │
│   Outputs                                                                                                            │
│                     field name     type           description                                                        │
│                    ──────────────────────────────────────────────────────────────────────────────────────────────    │
│                     network_data   network_data   The network/graph data.                                            │
│                                                                                                                      │
│                                                                                                                      │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

From this information we can assemble our command, using alias:edges_table as the main input, and saving it using the alias journals_graph. We can figure the values for the other inputs out be running kiara data explain --properties journal_edges.table, which will give us the edge column names, among other things (and, subsequently, `kiara data explain --properties journal_nodes_table. So, here goes nothing:

kiara run --save network_data=journals_graph create.network_data.from.tables edges=alias:journal_edges.table source_column_name=Source target_column_name=Target nodes=alias:journal_nodes_table id_column_name=Id label_column_name=Label

╭─ Result ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                                                                                                                              │
│   field          data_type      value                                                                                                                                                                                                        │
│  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │
│   network_data   network_data                                                                                                                                                                                                                │
│                                 Table: edges                                                                                                                                                                                                 │
│                                                                                                                                                                                                                                              │
│                                   source   target   weight                                                                                                                                                                                   │
│                                  ──────────────────────────                                                                                                                                                                                  │
│                                   1        1        11                                                                                                                                                                                       │
│                                   1        5        1                                                                                                                                                                                        │
│                                   1        7        6                                                                                                                                                                                        │
│                                   1        8        15                                                                                                                                                                                       │
│                                   1        10       24                                                                                                                                                                                       │
│                                   1        13       1                                                                                                                                                                                        │
│                                   1        14       2                                                                                                                                                                                        │
│                                   1        15       8                                                                                                                                                                                        │
│                                   1        18       7                                                                                                                                                                                        │
│                                   1        20       48                                                                                                                                                                                       │
│                                   1        21       7                                                                                                                                                                                        │
│                                   1        22       4                                                                                                                                                                                        │
│                                   1        23       75                                                                                                                                                                                       │
│                                   1        24       1                                                                                                                                                                                        │
│                                   1        26       8                                                                                                                                                                                        │
│                                   1        29       1                                                                                                                                                                                        │
│                                   ...      ...      ...                                                                                                                                                                                      │
│                                   ...      ...      ...                                                                                                                                                                                      │
│                                   51       108      1                                                                                                                                                                                        │
│                                   51       109      5                                                                                                                                                                                        │
│                                   51       110      1                                                                                                                                                                                        │
│                                   51       111      1                                                                                                                                                                                        │
│                                   51       112      1                                                                                                                                                                                        │
│                                   51       113      1                                                                                                                                                                                        │
│                                   51       114      2                                                                                                                                                                                        │
│                                   51       115      2                                                                                                                                                                                        │
│                                   51       116      1                                                                                                                                                                                        │
│                                   51       118      3                                                                                                                                                                                        │
│                                   51       119      2                                                                                                                                                                                        │
│                                   51       120      1                                                                                                                                                                                        │
│                                   51       121      1                                                                                                                                                                                        │
│                                   63       102      1                                                                                                                                                                                        │
│                                   147      27       11                                                                                                                                                                                       │
│                                   147      241      1                                                                                                                                                                                        │
│                                                                                                                                                                                                                                              │
│                                 Table: nodes                                                                                                                                                                                                 │
│                                                                                                                                                                                                                                              │
│                                   id    label                                              JournalType                                       City        CountryNetworkTime        PresentDayCountry   Latitude    Longitude    Language     │
│                                  ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────    │
│                                   75    Psychiatrische en neurologische bladen             specialized: psychiatry and neurology             Amsterdam   Netherlands               Netherlands         52.366667   4.9          Dutch        │
│                                   36    The American Journal of Insanity                   specialized: psychiatry and neurology             Baltimore   United States             United States       39.289444   -76.615278   English      │
│                                   208   The American Journal of Psychology                 specialized: psychology                           Baltimore   United States             United States       39.289444   -76.615278   English      │
│                                   295   Die Krankenpflege                                  specialized: therapy                              Berlin      German Empire             Germany             52.52       13.405       German       │
│                                   296   Die deutsche Klinik am Eingange des zwanzigsten    general medicine                                  Berlin      German Empire             Germany             52.52       13.405       German       │
│                                   300   Therapeutische Monatshefte                         specialized: therapy                              Berlin      German Empire             Germany             52.52       13.405       German       │
│                                   1     Allgemeine Zeitschrift für Psychiatrie             specialized: psychiatry and neurology             Berlin      German Empire             Germany             52.52       13.405       German       │
│                                   7     Archiv für Psychiatrie und Nervenkrankheiten       specialized: psychiatry and neurology             Berlin      German Empire             Germany             52.52       13.405       German       │
│                                   10    Berliner klinische Wochenschrift                   general medicine                                  Berlin      German Empire             Germany             52.52       13.405       German       │
│                                   13    Charité Annalen                                    general medicine                                  Berlin      German Empire             Germany             52.52       13.405       German       │
│                                   21    Monatsschrift für Psychiatrie und Neurologie       specialized: psychiatry and neurology             Berlin      German Empire             Germany             52.52       13.405       German       │
│                                   29    Virchows Archiv                                    specialized: anatomy, physiology and pathology    Berlin      German Empire             Germany             52.52       13.405       German       │
│                                   31    Zeitschrift für pädagogische Psychologie und Pat   specialized: psychology and pedagogy              Berlin      German Empire             Germany             52.52       13.405       German       │
│                                   42    Vierteljahrsschrift für gerichtliche Medizin und   specialized: anthropology, criminology and fore   Berlin      German Empire             Germany             52.52       13.405       German       │
│                                   47    Centralblatt für Nervenheilkunde und Psychiatrie   specialized: psychiatry and neurology             Berlin      German Empire             Germany             52.52       13.405       German       │
│                                   50    Russische medicinische Rundschau                   general medicine                                  Berlin      German Empire             Germany             52.52       13.405       German       │
│                                   ...   ...                                                ...                                               ...         ...                       ...                 ...         ...          ...          │
│                                   ...   ...                                                ...                                               ...         ...                       ...                 ...         ...          ...          │
│                                   277   L'arte medica                                      general medicine                                  Turin       Italy                     Italy               45.079167   7.676111     Italian      │
│                                   288   Allgemeine österreichische Gerichts-Zeitung        specialized: anthropology, criminology and fore   Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                                   18    Jahrbücher für Psychiatrie                         specialized: psychiatry and neurology             Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                                   30    Wiener klinische Rundschau                         general medicine                                  Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                                   44    Wiener klinische Wochenschrift                     general medicine                                  Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                                   45    Wiener medizinische Wochenschrift                  general medicine                                  Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                                   72    Wiener medizinische Presse                         general medicine                                  Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                                   81    Monatsschrift für Gesundheitspflege                general medicine                                  Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                                   93    Klinisch-therapeutische Wochenschrift              general medicine                                  Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                                   151   Medicinisch-chirurgisches Centralblatt             specialized: surgery                              Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                                   199   Der Militärazt                                     specialized: military medicine                    Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                                   261   Медицинская беседа                                 general medicine                                  Voronezh    Russian Empire            Russia              51.671667   39.210556    Russian      │
│                                   77    Medycyna                                           general medicine                                  Warsaw      Russian Empire            Poland              52.233333   21.016667    Polish       │
│                                   150   Kronika Lekarska                                   general medicine                                  Warsaw      Russian Empire            Poland              52.233333   21.016667    Polish       │
│                                   86    Grenzfragen des Nerven- und Seelenlebens           specialized: psychiatry and neurology             Wiesbaden   German Empire             Germany             50.0825     8.24         German       │
│                                   206   Ergebnisse der Allgemeinen Pathologie und Pathol   specialized: anatomy, physiology and pathology    Wiesbaden   German Empire             Germany             50.0825     8.24         German       │
│                                                                                                                                                                                                                                              │
│                                                                                                                                                                                                                                              │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

╭─ Stored result value ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                                                                                                                              │
│   field          data type      stored id                              alias(es)                                                                                                                                                             │
│  ─────────────────────────────────────────────────────────────────────────────────────                                                                                                                                                       │
│   network_data   network_data   aea3b645-09a7-4c80-b782-608c03d188d5   journals_graph                                                                                                                                                        │
│                                                                                                                                                                                                                                              │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

To confirm our graph data is created, let's check the data store:

kiara data explain --properties alias:journals_graph

╭─ Value details for: alias:journals_graph ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                                                                                                                              │
│   value_id            aea3b645-09a7-4c80-b782-608c03d188d5                                                                                                                                                                                   │
│   kiara_id            bc41cc78-899c-433b-8e8d-33d0c9990791                                                                                                                                                                                   │
│                                                                                                                                                                                                                                              │
│                       ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────   │
│   data_type_info                                                                                                                                                                                                                             │
│                         data_type_name     network_data                                                                                                                                                                                      │
│                         data_type_config   {}                                                                                                                                                                                                │
│                         characteristics    {                                                                                                                                                                                                 │
│                                              "is_scalar": false,                                                                                                                                                                             │
│                                              "is_json_serializable": false                                                                                                                                                                   │
│                                            }                                                                                                                                                                                                 │
│                         data_type_class                                                                                                                                                                                                      │
│                                              python_class_name    NetworkDataType                                                                                                                                                            │
│                                              python_module_name   kiara_plugin.network_analysis.data_types                                                                                                                                   │
│                                              full_name            kiara_plugin.network_analysis.data_types.NetworkDataType                                                                                                                   │
│                                                                                                                                                                                                                                              │
│                                                                                                                                                                                                                                              │
│   destiny_backlinks   {}                                                                                                                                                                                                                     │
│   enviroments         None                                                                                                                                                                                                                   │
│   properties                                                                                                                                                                                                                                 │
│                         field                       value                                                                                                                                                                                    │
│                        ─────────────────────────────────────────────────────────────────────────────────────────────────                                                                                                                     │
│                         metadata.database           {                                                                                                                                                                                        │
│                                                       "tables": {                                                                                                                                                                            │
│                                                         "edges": {                                                                                                                                                                           │
│                                                           "column_names": [                                                                                                                                                                  │
│                                                             "source",                                                                                                                                                                        │
│                                                             "target",                                                                                                                                                                        │
│                                                             "weight"                                                                                                                                                                         │
│                                                           ],                                                                                                                                                                                 │
│                                                           "column_schema": {                                                                                                                                                                 │
│                                                             "source": {                                                                                                                                                                      │
│                                                               "type_name": "INTEGER",                                                                                                                                                        │
│                                                               "metadata": {                                                                                                                                                                  │
│                                                                 "nullable": false,                                                                                                                                                           │
│                                                                 "primary_key": false                                                                                                                                                         │
│                                                               }                                                                                                                                                                              │
│                                                             },                                                                                                                                                                               │
│                                                             "target": {                                                                                                                                                                      │
│                                                               "type_name": "INTEGER",                                                                                                                                                        │
│                                                               "metadata": {                                                                                                                                                                  │
│                                                                 "nullable": false,                                                                                                                                                           │
│                                                                 "primary_key": false                                                                                                                                                         │
│                                                               }                                                                                                                                                                              │
│                                                             },                                                                                                                                                                               │
│                                                             "weight": {                                                                                                                                                                      │
│                                                               "type_name": "INTEGER",                                                                                                                                                        │
│                                                               "metadata": {                                                                                                                                                                  │
│                                                                 "nullable": false,                                                                                                                                                           │
│                                                                 "primary_key": false                                                                                                                                                         │
│                                                               }                                                                                                                                                                              │
│                                                             }                                                                                                                                                                                │
│                                                           },                                                                                                                                                                                 │
│                                                           "rows": 321,                                                                                                                                                                       │
│                                                           "size": 4096                                                                                                                                                                       │
│                                                         },                                                                                                                                                                                   │
│                                                         "nodes": {                                                                                                                                                                           │
│                                                           "column_names": [                                                                                                                                                                  │
│                                                             "id",                                                                                                                                                                            │
│                                                             "label",                                                                                                                                                                         │
│                                                             "JournalType",                                                                                                                                                                   │
│                                                             "City",                                                                                                                                                                          │
│                                                             "CountryNetworkTime",                                                                                                                                                            │
│                                                             "PresentDayCountry",                                                                                                                                                             │
│                                                             "Latitude",                                                                                                                                                                      │
│                                                             "Longitude",                                                                                                                                                                     │
│                                                             "Language"                                                                                                                                                                       │
│                                                           ],                                                                                                                                                                                 │
│                                                           "column_schema": {                                                                                                                                                                 │
│                                                             "id": {                                                                                                                                                                          │
│                                                               "type_name": "INTEGER",                                                                                                                                                        │
│                                                               "metadata": {                                                                                                                                                                  │
│                                                                 "nullable": false,                                                                                                                                                           │
│                                                                 "primary_key": false                                                                                                                                                         │
│                                                               }                                                                                                                                                                              │
│                                                             },                                                                                                                                                                               │
│                                                             "label": {                                                                                                                                                                       │
│                                                               "type_name": "TEXT",                                                                                                                                                           │
│                                                               "metadata": {                                                                                                                                                                  │
│                                                                 "nullable": false,                                                                                                                                                           │
│                                                                 "primary_key": false                                                                                                                                                         │
│                                                               }                                                                                                                                                                              │
│                                                             },                                                                                                                                                                               │
│                                                             "JournalType": {                                                                                                                                                                 │
│                                                               "type_name": "TEXT",                                                                                                                                                           │
│                                                               "metadata": {                                                                                                                                                                  │
│                                                                 "nullable": false,                                                                                                                                                           │
│                                                                 "primary_key": false                                                                                                                                                         │
│                                                               }                                                                                                                                                                              │
│                                                             },                                                                                                                                                                               │
│                                                             "City": {                                                                                                                                                                        │
│                                                               "type_name": "TEXT",                                                                                                                                                           │
│                                                               "metadata": {                                                                                                                                                                  │
│                                                                 "nullable": false,                                                                                                                                                           │
│                                                                 "primary_key": false                                                                                                                                                         │
│                                                               }                                                                                                                                                                              │
│                                                             },                                                                                                                                                                               │
│                                                             "CountryNetworkTime": {                                                                                                                                                          │
│                                                               "type_name": "TEXT",                                                                                                                                                           │
│                                                               "metadata": {                                                                                                                                                                  │
│                                                                 "nullable": false,                                                                                                                                                           │
│                                                                 "primary_key": false                                                                                                                                                         │
│                                                               }                                                                                                                                                                              │
│                                                             },                                                                                                                                                                               │
│                                                             "PresentDayCountry": {                                                                                                                                                           │
│                                                               "type_name": "TEXT",                                                                                                                                                           │
│                                                               "metadata": {                                                                                                                                                                  │
│                                                                 "nullable": false,                                                                                                                                                           │
│                                                                 "primary_key": false                                                                                                                                                         │
│                                                               }                                                                                                                                                                              │
│                                                             },                                                                                                                                                                               │
│                                                             "Latitude": {                                                                                                                                                                    │
│                                                               "type_name": "REAL",                                                                                                                                                           │
│                                                               "metadata": {                                                                                                                                                                  │
│                                                                 "nullable": false,                                                                                                                                                           │
│                                                                 "primary_key": false                                                                                                                                                         │
│                                                               }                                                                                                                                                                              │
│                                                             },                                                                                                                                                                               │
│                                                             "Longitude": {                                                                                                                                                                   │
│                                                               "type_name": "REAL",                                                                                                                                                           │
│                                                               "metadata": {                                                                                                                                                                  │
│                                                                 "nullable": false,                                                                                                                                                           │
│                                                                 "primary_key": false                                                                                                                                                         │
│                                                               }                                                                                                                                                                              │
│                                                             },                                                                                                                                                                               │
│                                                             "Language": {                                                                                                                                                                    │
│                                                               "type_name": "TEXT",                                                                                                                                                           │
│                                                               "metadata": {                                                                                                                                                                  │
│                                                                 "nullable": false,                                                                                                                                                           │
│                                                                 "primary_key": false                                                                                                                                                         │
│                                                               }                                                                                                                                                                              │
│                                                             }                                                                                                                                                                                │
│                                                           },                                                                                                                                                                                 │
│                                                           "rows": 276,                                                                                                                                                                       │
│                                                           "size": 40960                                                                                                                                                                      │
│                                                         }                                                                                                                                                                                    │
│                                                       }                                                                                                                                                                                      │
│                                                     }                                                                                                                                                                                        │
│                         metadata.graph_properties   {                                                                                                                                                                                        │
│                                                       "number_of_nodes": 276,                                                                                                                                                                │
│                                                       "properties_by_graph_type": [                                                                                                                                                          │
│                                                         {                                                                                                                                                                                    │
│                                                           "graph_type": "directed",                                                                                                                                                          │
│                                                           "number_of_edges": 321                                                                                                                                                             │
│                                                         },                                                                                                                                                                                   │
│                                                         {                                                                                                                                                                                    │
│                                                           "graph_type": "undirected",                                                                                                                                                        │
│                                                           "number_of_edges": 313                                                                                                                                                             │
│                                                         },                                                                                                                                                                                   │
│                                                         {                                                                                                                                                                                    │
│                                                           "graph_type": "directed-multi",                                                                                                                                                    │
│                                                           "number_of_edges": 321                                                                                                                                                             │
│                                                         },                                                                                                                                                                                   │
│                                                         {                                                                                                                                                                                    │
│                                                           "graph_type": "undirected-multi",                                                                                                                                                  │
│                                                           "number_of_edges": 321                                                                                                                                                             │
│                                                         }                                                                                                                                                                                    │
│                                                       ]                                                                                                                                                                                      │
│                                                     }                                                                                                                                                                                        │
│                         metadata.python_class       {                                                                                                                                                                                        │
│                                                       "python_class": {                                                                                                                                                                      │
│                                                         "python_class_name": "NetworkData",                                                                                                                                                  │
│                                                         "python_module_name": "kiara_plugin.network_analysis.models",                                                                                                                        │
│                                                         "full_name": "kiara_plugin.network_analysis.models.NetworkData"                                                                                                                      │
│                                                       }                                                                                                                                                                                      │
│                                                     }                                                                                                                                                                                        │
│                                                                                                                                                                                                                                              │
│   property_links      {                                                                                                                                                                                                                      │
│                         "metadata.database": "3c33c6b7-e152-4e52-b7bd-dfc28efb7045",                                                                                                                                                         │
│                         "metadata.graph_properties": "b8d152d7-0381-4ced-a104-900ceeb1e1d3",                                                                                                                                                 │
│                         "metadata.python_class": "3574d1d5-d9ed-435b-8b7a-395a43a4d4a1"                                                                                                                                                      │
│                       }                                                                                                                                                                                                                      │
│   value_hash          zdpuB17oZEahwMpecZvwQWEGDB17D9ppcHWaUQ6pWNLWsWKNX                                                                                                                                                                      │
│   value_schema                                                                                                                                                                                                                               │
│                         type          network_data                                                                                                                                                                                           │
│                         type_config   {}                                                                                                                                                                                                     │
│                         default       __not_set__                                                                                                                                                                                            │
│                         optional      False                                                                                                                                                                                                  │
│                         is_constant   False                                                                                                                                                                                                  │
│                         doc           The network/graph data.                                                                                                                                                                                │
│                                                                                                                                                                                                                                              │
│   value_size          61.44 KB                                                                                                                                                                                                               │
│   value_status        -- set --                                                                                                                                                                                                              │
│                                                                                                                                                                                                                                              │
│                       ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────   │
│                                                                                                                                                                                                                                              │
│   properties                                                                                                                                                                                                                                 │
│                         metadata.database           {                                                                                                                                                                                        │
│                                                       "tables": {                                                                                                                                                                            │
│                                                         "edges": {                                                                                                                                                                           │
│                                                           "column_names": [                                                                                                                                                                  │
│                                                             "source",                                                                                                                                                                        │
│                                                             "target",                                                                                                                                                                        │
│                                                             "weight"                                                                                                                                                                         │
│                                                           ],                                                                                                                                                                                 │
│                                                           "column_schema": {                                                                                                                                                                 │
│                                                             "source": {                                                                                                                                                                      │
│                                                               "type_name": "INTEGER",                                                                                                                                                        │
│                                                               "metadata": {                                                                                                                                                                  │
│                                                                 "nullable": false,                                                                                                                                                           │
│                                                                 "primary_key": false                                                                                                                                                         │
│                                                               }                                                                                                                                                                              │
│                                                             },                                                                                                                                                                               │
│                                                             "target": {                                                                                                                                                                      │
│                                                               "type_name": "INTEGER",                                                                                                                                                        │
│                                                               "metadata": {                                                                                                                                                                  │
│                                                                 "nullable": false,                                                                                                                                                           │
│                                                                 "primary_key": false                                                                                                                                                         │
│                                                               }                                                                                                                                                                              │
│                                                             },                                                                                                                                                                               │
│                                                             "weight": {                                                                                                                                                                      │
│                                                               "type_name": "INTEGER",                                                                                                                                                        │
│                                                               "metadata": {                                                                                                                                                                  │
│                                                                 "nullable": false,                                                                                                                                                           │
│                                                                 "primary_key": false                                                                                                                                                         │
│                                                               }                                                                                                                                                                              │
│                                                             }                                                                                                                                                                                │
│                                                           },                                                                                                                                                                                 │
│                                                           "rows": 321,                                                                                                                                                                       │
│                                                           "size": 4096                                                                                                                                                                       │
│                                                         },                                                                                                                                                                                   │
│                                                         "nodes": {                                                                                                                                                                           │
│                                                           "column_names": [                                                                                                                                                                  │
│                                                             "id",                                                                                                                                                                            │
│                                                             "label",                                                                                                                                                                         │
│                                                             "JournalType",                                                                                                                                                                   │
│                                                             "City",                                                                                                                                                                          │
│                                                             "CountryNetworkTime",                                                                                                                                                            │
│                                                             "PresentDayCountry",                                                                                                                                                             │
│                                                             "Latitude",                                                                                                                                                                      │
│                                                             "Longitude",                                                                                                                                                                     │
│                                                             "Language"                                                                                                                                                                       │
│                                                           ],                                                                                                                                                                                 │
│                                                           "column_schema": {                                                                                                                                                                 │
│                                                             "id": {                                                                                                                                                                          │
│                                                               "type_name": "INTEGER",                                                                                                                                                        │
│                                                               "metadata": {                                                                                                                                                                  │
│                                                                 "nullable": false,                                                                                                                                                           │
│                                                                 "primary_key": false                                                                                                                                                         │
│                                                               }                                                                                                                                                                              │
│                                                             },                                                                                                                                                                               │
│                                                             "label": {                                                                                                                                                                       │
│                                                               "type_name": "TEXT",                                                                                                                                                           │
│                                                               "metadata": {                                                                                                                                                                  │
│                                                                 "nullable": false,                                                                                                                                                           │
│                                                                 "primary_key": false                                                                                                                                                         │
│                                                               }                                                                                                                                                                              │
│                                                             },                                                                                                                                                                               │
│                                                             "JournalType": {                                                                                                                                                                 │
│                                                               "type_name": "TEXT",                                                                                                                                                           │
│                                                               "metadata": {                                                                                                                                                                  │
│                                                                 "nullable": false,                                                                                                                                                           │
│                                                                 "primary_key": false                                                                                                                                                         │
│                                                               }                                                                                                                                                                              │
│                                                             },                                                                                                                                                                               │
│                                                             "City": {                                                                                                                                                                        │
│                                                               "type_name": "TEXT",                                                                                                                                                           │
│                                                               "metadata": {                                                                                                                                                                  │
│                                                                 "nullable": false,                                                                                                                                                           │
│                                                                 "primary_key": false                                                                                                                                                         │
│                                                               }                                                                                                                                                                              │
│                                                             },                                                                                                                                                                               │
│                                                             "CountryNetworkTime": {                                                                                                                                                          │
│                                                               "type_name": "TEXT",                                                                                                                                                           │
│                                                               "metadata": {                                                                                                                                                                  │
│                                                                 "nullable": false,                                                                                                                                                           │
│                                                                 "primary_key": false                                                                                                                                                         │
│                                                               }                                                                                                                                                                              │
│                                                             },                                                                                                                                                                               │
│                                                             "PresentDayCountry": {                                                                                                                                                           │
│                                                               "type_name": "TEXT",                                                                                                                                                           │
│                                                               "metadata": {                                                                                                                                                                  │
│                                                                 "nullable": false,                                                                                                                                                           │
│                                                                 "primary_key": false                                                                                                                                                         │
│                                                               }                                                                                                                                                                              │
│                                                             },                                                                                                                                                                               │
│                                                             "Latitude": {                                                                                                                                                                    │
│                                                               "type_name": "REAL",                                                                                                                                                           │
│                                                               "metadata": {                                                                                                                                                                  │
│                                                                 "nullable": false,                                                                                                                                                           │
│                                                                 "primary_key": false                                                                                                                                                         │
│                                                               }                                                                                                                                                                              │
│                                                             },                                                                                                                                                                               │
│                                                             "Longitude": {                                                                                                                                                                   │
│                                                               "type_name": "REAL",                                                                                                                                                           │
│                                                               "metadata": {                                                                                                                                                                  │
│                                                                 "nullable": false,                                                                                                                                                           │
│                                                                 "primary_key": false                                                                                                                                                         │
│                                                               }                                                                                                                                                                              │
│                                                             },                                                                                                                                                                               │
│                                                             "Language": {                                                                                                                                                                    │
│                                                               "type_name": "TEXT",                                                                                                                                                           │
│                                                               "metadata": {                                                                                                                                                                  │
│                                                                 "nullable": false,                                                                                                                                                           │
│                                                                 "primary_key": false                                                                                                                                                         │
│                                                               }                                                                                                                                                                              │
│                                                             }                                                                                                                                                                                │
│                                                           },                                                                                                                                                                                 │
│                                                           "rows": 276,                                                                                                                                                                       │
│                                                           "size": 40960                                                                                                                                                                      │
│                                                         }                                                                                                                                                                                    │
│                                                       }                                                                                                                                                                                      │
│                                                     }                                                                                                                                                                                        │
│                         metadata.graph_properties   {                                                                                                                                                                                        │
│                                                       "number_of_nodes": 276,                                                                                                                                                                │
│                                                       "properties_by_graph_type": [                                                                                                                                                          │
│                                                         {                                                                                                                                                                                    │
│                                                           "graph_type": "directed",                                                                                                                                                          │
│                                                           "number_of_edges": 321                                                                                                                                                             │
│                                                         },                                                                                                                                                                                   │
│                                                         {                                                                                                                                                                                    │
│                                                           "graph_type": "undirected",                                                                                                                                                        │
│                                                           "number_of_edges": 313                                                                                                                                                             │
│                                                         },                                                                                                                                                                                   │
│                                                         {                                                                                                                                                                                    │
│                                                           "graph_type": "directed-multi",                                                                                                                                                    │
│                                                           "number_of_edges": 321                                                                                                                                                             │
│                                                         },                                                                                                                                                                                   │
│                                                         {                                                                                                                                                                                    │
│                                                           "graph_type": "undirected-multi",                                                                                                                                                  │
│                                                           "number_of_edges": 321                                                                                                                                                             │
│                                                         }                                                                                                                                                                                    │
│                                                       ]                                                                                                                                                                                      │
│                                                     }                                                                                                                                                                                        │
│                         metadata.python_class       {                                                                                                                                                                                        │
│                                                       "python_class": {                                                                                                                                                                      │
│                                                         "python_class_name": "NetworkData",                                                                                                                                                  │
│                                                         "python_module_name": "kiara_plugin.network_analysis.models",                                                                                                                        │
│                                                         "full_name": "kiara_plugin.network_analysis.models.NetworkData"                                                                                                                      │
│                                                       }                                                                                                                                                                                      │
│                                                     }                                                                                                                                                                                        │
│                                                                                                                                                                                                                                              │
│                                                                                                                                                                                                                                              │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

All good. Also, check out the metadata kiara knows about the graph already.
Side-note: investigating the graph value lineage¶

kiara keeps track of all the modules and inputs that went into producing a value, basically its entire ancestry. This is not the place to explain why, and how that can be very powerful and useful. But if you are ever interested about what went into creating a particular value, you can do this with:

kiara data explain --lineage alias:journals_graph

╭─ Value details for: alias:journals_graph ────────────────────────────────────╮
│                                                                              │
│   value_id            aea3b645-09a7-4c80-b782-608c03d188d5                   │
│   kiara_id            bc41cc78-899c-433b-8e8d-33d0c9990791                   │
│                                                                              │
│                       ────────────────────────────────────────────────────   │
│   data_type_info                                                             │
│                         data_type_name     network_data                      │
│                         data_type_config   {}                                │
│                         characteristics    {                                 │
│                                              "is_scalar": false,             │
│                                              "is_json_serializable":         │
│                                            false                             │
│                                            }                                 │
│                         data_type_class                                      │
│                                              python_cla…   NetworkDat…       │
│                                              python_mod…   kiara_plug…       │
│                                              full_name     kiara_plug…       │
│                                                                              │
│                                                                              │
│   destiny_backlinks   {}                                                     │
│   enviroments         None                                                   │
│   property_links      {                                                      │
│                         "metadata.database":                                 │
│                       "3c33c6b7-e152-4e52-b7bd-dfc28efb7045",                │
│                         "metadata.graph_properties":                         │
│                       "b8d152d7-0381-4ced-a104-900ceeb1e1d3",                │
│                         "metadata.python_class":                             │
│                       "3574d1d5-d9ed-435b-8b7a-395a43a4d4a1"                 │
│                       }                                                      │
│   value_hash          zdpuB17oZEahwMpecZvwQWEGDB17D9ppcHWaUQ6pWNLWsWKNX      │
│   value_schema                                                               │
│                         type          network_data                           │
│                         type_config   {}                                     │
│                         default       __not_set__                            │
│                         optional      False                                  │
│                         is_constant   False                                  │
│                         doc           The network/graph data.                │
│                                                                              │
│   value_size          61.44 KB                                               │
│   value_status        -- set --                                              │
│                                                                              │
│                       ────────────────────────────────────────────────────   │
│                                                                              │
│   lineage             create.network_data.from.tables                        │
│                       ├── input: edges (table) =                             │
│                       │   0aea06f2-f729-4ec5-b4dc-707606dd7269               │
│                       │   └── create.table                                   │
│                       │       └── input: file (file) =                       │
│                       │           d524e19e-be9b-4f56-bcd1-103a3cc13f9f       │
│                       │           └── import.local.file                      │
│                       │               └── input: path (string) =             │
│                       │                   837a0090-f20b-436d-8125-a3076df…   │
│                       ├── input: edges_column_map (dict) =                   │
│                       │   1142536c-72ee-4e00-accf-55b3448ab1ae               │
│                       ├── input: id_column_name (string) =                   │
│                       │   48227a2a-a772-4653-8bed-92621f06fa6d               │
│                       ├── input: label_column_name (string) =                │
│                       │   bb52e30e-0b80-479f-8233-25cc069f1c5e               │
│                       ├── input: nodes (table) =                             │
│                       │   8ef2a5ea-031a-4370-93ac-c8d42dc1ea3b               │
│                       │   └── create.table                                   │
│                       │       └── input: file (file) =                       │
│                       │           8bb90738-ab11-4cfb-8ada-f43549cd6d20       │
│                       │           └── import.local.file                      │
│                       │               └── input: path (string) =             │
│                       │                   89ea8b61-7e84-42db-ac7f-0d3751c…   │
│                       ├── input: nodes_column_map (dict) =                   │
│                       │   bcc75a9e-e20d-4758-a48a-81637975a8cc               │
│                       ├── input: source_column_name (string) =               │
│                       │   e30154e1-22eb-4efd-8969-a42113770a7d               │
│                       └── input: target_column_name (string) =               │
│                           aa33a9c1-d880-4054-a4a6-6f74bf4c8172               │
│                                                                              │
╰──────────────────────────────────────────────────────────────────────────────╯

As you can see, this basically describes what we've done so far, to get to this stage. You could now do a kiara explain data value:<value_id> on each of the value ids you see here, if you were so inclined.

creating modules

Preparation¶
Check out the 'kiara getting started guide'¶

If you haven't already, it would make sense for you to go through the kiara getting started guide. This will give you a good overview of the relevant kiara features, and how the module(s) you are going to write fits in.
Setting up development environment¶

To get going, we need a Python virtual environment in which to develop. We'll be using conda for that here, but this will work for normal virtual environments as well. As a first step, install conda (if you haven't already). Then:

conda create -n my_kiara_module python=3.9
conda activate my_kiara_module
conda install -c conda-forge mamba   # this is optional, but makes everything install related much faster, if you don't use it, replace 'mamba' with 'conda' below
mamba install -c conda-forge -c dharpa kiara kiara_plugin.core_types kiara_plugin.tabular

Note

For Linux, if you experience errors, you might or might not have to also execute: mamba update -c conda-forge libstdcxx-ng.

After this, the kiara command-line application should be available to you, you can test whether that works, for example via kiara operation list.
Creating a kiara plugin project¶

For this tutorial, we'll use a project template to create a bare-bones kiara plugin project, which we will augment with our own module(s).

First we need to install the cruft conda package, which we will use to create our project stub:

mamba install -c conda-forge cruft

Now, we run cruft against our template git repo, feel free to change any of the answers to the questions you'll be asked:

cruft create https://github.com/DHARPA-Project/kiara_plugin.develop.git

full_name []: Markus Binsteiner
email []: markus@frkl.io
project_name [my-kiara-plugin]: my-kiara-module
project_slug [my_kiara_module]: my_kiara_module
project_short_description [my-kiara-module]: A kiara plugin project for learning to create kiara modules.
github_user [DHARPA-Project]:
anaconda_user [dharpa]:

This should have created a new folder, named kiara_plugin.my_kiara_module. Next, we initialize and install the new plugin Python project into our conda environment:

cd kiara_plugin.my_kiara_module
git init
git checkout -b develop
pip install -e .

Note

TODO: explain what happened here?

Once this is done, you should see a new operation called my_kiara_module.example:

kiara operation list example

╭─ Filtered operations ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   Id                        Type(s)   Description                                                                                        │
│  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │
│   my_kiara_module.example             A very simple example module; concatenate two strings.                                             │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

Note

The example string token at the end of the above command filters the output to operations that match the token.

This module comes as example code with the project template, and is located in the modules/__init__.py Python file. It only serves as an example and blueprint for your own modules, and you can delete the module class within the file if you wish.
Pre-loading a table dataset¶

In our tutorial we'll create a module to filter a table. In order to do this we'll need to pre-seed our kiara data store with a tabular dataset. Here is the command to run (with the project root as our working directory):

kiara run --save table=journal_nodes_table import.table.from.local_file_path path=examples/data/journals/JournalNodes1902.csv

╭─ Results ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                                                                                                                              │
│   field           data_type   value                                                                                                                                                                                                          │
│  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │
│   imported_file   file        ﻿Id,Label,JournalType,City,CountryNetworkTime,PresentDayCountry,Latitude,Longitude,Language                                                                                                                    │
│                               75,Psychiatrische en neurologische bladen,specialized: psychiatry and neurology,Amsterdam,Netherlands,Netherlands,52.366667,4.9,Dutch                                                                          │
│                               36,The American Journal of Insanity,specialized: psychiatry and neurology,Baltimore,United States,United States,39.289444,-76.615278,English                                                                   │
│                               208,The American Journal of Psychology,specialized: psychology,Baltimore,United States,United States,39.289444,-76.615278,English                                                                              │
│                               295,Die Krankenpflege,specialized: therapy,Berlin,German Empire,Germany,52.52,13.405,German                                                                                                                    │
│                               296,Die deutsche Klinik am Eingange des zwanzigsten Jahrhunderts,general medicine,Berlin,German Empire,Germany,52.52,13.405,German                                                                             │
│                               300,Therapeutische Monatshefte,specialized: therapy,Berlin,German Empire,Germany,52.52,13.405,German                                                                                                           │
│                               1,Allgemeine Zeitschrift für Psychiatrie,specialized: psychiatry and neurology,Berlin,German Empire,Germany,52.52,13.405,German                                                                                │
│                               7,Archiv für Psychiatrie und Nervenkrankheiten,specialized: psychiatry and neurology,Berlin,German Empire,Germany,52.52,13.405,German                                                                          │
│                               10,Berliner klinische Wochenschrift,general medicine,Berlin,German Empire,Germany,52.52,13.405,German                                                                                                          │
│                               13,Charité Annalen,general medicine,Berlin,German Empire,Germany,52.52,13.405,German                                                                                                                           │
│                               21,Monatsschrift für Psychiatrie und Neurologie,specialized: psychiatry and neurology,Berlin,German Empire,Germany,52.52,13.405,German                                                                         │
│                               29,Virchows Archiv,"specialized: anatomy, physiology and pathology",Berlin,German Empire,Germany,52.52,13.405,German                                                                                           │
│                               31,Zeitschrift für pädagogische Psychologie und Pathologie,specialized: psychology and pedagogy,Berlin,German Empire,Germany,52.52,13.405,German                                                               │
│                               42,Vierteljahrsschrift für gerichtliche Medizin und öffentliches Sanitätswesen,"specialized: anthropology, criminology and forensics",Berlin,German Empire,Germany,52.52,13.405,German                         │
│                               47,Centralblatt für Nervenheilkunde und Psychiatrie,specialized: psychiatry and neurology,Berlin,German Empire,Germany,52.52,13.405,German                                                                     │
│                               50,Russische medicinische Rundschau,general medicine,Berlin,German Empire,Germany,52.52,13.405,German                                                                                                          │
│                               76,Deutsche Aerzte-Zeitung,general medicine,Berlin,German Empire,Germany,52.52,13.405,German                                                                                                                   │
│                               87,Monatsschrift für Geburtshülfe und Gynäkologie,specialized: gynecology,Berlin,German Empire,Germany,52.52,13.405,German                                                                                     │
│                               108,Archiv für klinische Chirurgie,specialized: surgery,Berlin,German Empire,Germany,52.52,13.405,German                                                                                                       │
│                               113,Zeitschrift für klinische Medicin,general medicine,Berlin,German Empire,Germany,52.52,13.405,German                                                                                                        │
│                               159,Deutsche militärärztliche Zeitschrift,specialized: military medicine,Berlin,German Empire,Germany,52.52,13.405,German                                                                                      │
│                               162,Jahresbericht über die Leistungen und Fortschritte auf dem Gebiete der Neurologie und Psychiatrie,specialized: psychiatry and neurology,Berlin,German Empire,Germany,52.52,13.405,German                   │
│                               192,Ärztliche Sachverständigen-Zeitung,general medicine,Berlin,German Empire,Germany,52.52,13.405,German                                                                                                       │
│                               198,Zeitschrift für die Behandlung Schwachsinniger und Epileptischer,specialized: psychiatry and neurology,Berlin,German Empire,Germany,52.52,13.405,German                                                    │
│                               258,Der Pfarrbote,news media,Berlin,German Empire,Germany,52.52,13.405,German                                                                                                                                  │
│                               71,Correspondenz-Blatt für Schweizer Aerzte,general medicine,Bern,Switzerland,Switzerland,46.948056,7.4475,German                                                                                              │
│                               6,Archiv für mikroskopische Anatomie,"specialized: anatomy, physiology and pathology",Bonn,German Empire,Germany,50.733333,7.1,German                                                                          │
│                               203,The Journal of Abnormal Psychology,specialized: psychology,Boston,United States,United States,42.358056,-71.063611,English                                                                                 │
│                               273,"Correspondenz-Blatt der Deutschen Gesellschaft für Anthropologie, Ethnologie und Urgeschichte","specialized: anthropology, criminology and forensics",Braunschweig,German                                 │
│                               Empire,Germany,52.266667,10.516667,German                                                                                                                                                                      │
│                               303,Policlinique de Bruxelles,general medicine,Brussels,Belgium,Belgium,50.85,4.35,French                                                                                                                      │
│                               306,Annales de la Société Belge de Neurologie,specialized: psychiatry and neurology,Brussels,Belgium,Belgium,50.85,4.35,French                                                                                 │
│                               19,Journal de neurologie,specialized: psychiatry and neurology,Brussels,Belgium,Belgium,50.85,4.35,French                                                                                                      │
│                               25,"Revue internationale d'électrothérapie, de physiologie, de médecine, de chirurgie, d'obstétrique, de thérapeutique, de chimie et de pharmacie",general                                                     │
│                               medicine,Brussels,Belgium,Belgium,50.85,4.35,French                                                                                                                                                            │
│                               35,Bulletin de la Société de Médecine Mentale de Belgique,specialized: psychiatry and neurology,Brussels,Belgium,Belgium,50.85,4.35,French                                                                     │
│                               ...                                                                                                                                                                                                            │
│                                                                                                                                                                                                                                              │
│                               ...                                                                                                                                                                                                            │
│   table           table                                                                                                                                                                                                                      │
│                                 Id    Label                                              JournalType                                         City        CountryNetworkTime        PresentDayCountry   Latitude    Longitude    Language     │
│                                ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────    │
│                                 75    Psychiatrische en neurologische bladen             specialized: psychiatry and neurology               Amsterdam   Netherlands               Netherlands         52.366667   4.9          Dutch        │
│                                 36    The American Journal of Insanity                   specialized: psychiatry and neurology               Baltimore   United States             United States       39.289444   -76.615278   English      │
│                                 208   The American Journal of Psychology                 specialized: psychology                             Baltimore   United States             United States       39.289444   -76.615278   English      │
│                                 295   Die Krankenpflege                                  specialized: therapy                                Berlin      German Empire             Germany             52.52       13.405       German       │
│                                 296   Die deutsche Klinik am Eingange des zwanzigsten    general medicine                                    Berlin      German Empire             Germany             52.52       13.405       German       │
│                                 300   Therapeutische Monatshefte                         specialized: therapy                                Berlin      German Empire             Germany             52.52       13.405       German       │
│                                 1     Allgemeine Zeitschrift für Psychiatrie             specialized: psychiatry and neurology               Berlin      German Empire             Germany             52.52       13.405       German       │
│                                 7     Archiv für Psychiatrie und Nervenkrankheiten       specialized: psychiatry and neurology               Berlin      German Empire             Germany             52.52       13.405       German       │
│                                 10    Berliner klinische Wochenschrift                   general medicine                                    Berlin      German Empire             Germany             52.52       13.405       German       │
│                                 13    Charité Annalen                                    general medicine                                    Berlin      German Empire             Germany             52.52       13.405       German       │
│                                 21    Monatsschrift für Psychiatrie und Neurologie       specialized: psychiatry and neurology               Berlin      German Empire             Germany             52.52       13.405       German       │
│                                 29    Virchows Archiv                                    specialized: anatomy, physiology and pathology      Berlin      German Empire             Germany             52.52       13.405       German       │
│                                 31    Zeitschrift für pädagogische Psychologie und Pat   specialized: psychology and pedagogy                Berlin      German Empire             Germany             52.52       13.405       German       │
│                                 42    Vierteljahrsschrift für gerichtliche Medizin und   specialized: anthropology, criminology and forens   Berlin      German Empire             Germany             52.52       13.405       German       │
│                                 47    Centralblatt für Nervenheilkunde und Psychiatrie   specialized: psychiatry and neurology               Berlin      German Empire             Germany             52.52       13.405       German       │
│                                 50    Russische medicinische Rundschau                   general medicine                                    Berlin      German Empire             Germany             52.52       13.405       German       │
│                                 ...   ...                                                ...                                                 ...         ...                       ...                 ...         ...          ...          │
│                                 ...   ...                                                ...                                                 ...         ...                       ...                 ...         ...          ...          │
│                                 277   L'arte medica                                      general medicine                                    Turin       Italy                     Italy               45.079167   7.676111     Italian      │
│                                 288   Allgemeine österreichische Gerichts-Zeitung        specialized: anthropology, criminology and forens   Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                                 18    Jahrbücher für Psychiatrie                         specialized: psychiatry and neurology               Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                                 30    Wiener klinische Rundschau                         general medicine                                    Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                                 44    Wiener klinische Wochenschrift                     general medicine                                    Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                                 45    Wiener medizinische Wochenschrift                  general medicine                                    Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                                 72    Wiener medizinische Presse                         general medicine                                    Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                                 81    Monatsschrift für Gesundheitspflege                general medicine                                    Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                                 93    Klinisch-therapeutische Wochenschrift              general medicine                                    Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                                 151   Medicinisch-chirurgisches Centralblatt             specialized: surgery                                Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                                 199   Der Militärazt                                     specialized: military medicine                      Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                                 261   Медицинская беседа                                 general medicine                                    Voronezh    Russian Empire            Russia              51.671667   39.210556    Russian      │
│                                 77    Medycyna                                           general medicine                                    Warsaw      Russian Empire            Poland              52.233333   21.016667    Polish       │
│                                 150   Kronika Lekarska                                   general medicine                                    Warsaw      Russian Empire            Poland              52.233333   21.016667    Polish       │
│                                 86    Grenzfragen des Nerven- und Seelenlebens           specialized: psychiatry and neurology               Wiesbaden   German Empire             Germany             50.0825     8.24         German       │
│                                 206   Ergebnisse der Allgemeinen Pathologie und Pathol   specialized: anatomy, physiology and pathology      Wiesbaden   German Empire             Germany             50.0825     8.24         German       │
│                                                                                                                                                                                                                                              │
│                                                                                                                                                                                                                                              │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

╭─ Stored result values ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                                                                                                                              │
│   field           data type   stored id                              alias(es)                                                                                                                                                               │
│  ────────────────────────────────────────────────────────────────────────────────────────                                                                                                                                                    │
│   imported_file   file        64dbc562-b5ed-4d09-89aa-d8d7d41bd3b3                                                                                                                                                                           │
│   table           table       f4bda52f-5dc1-4441-adfd-109dbdf357d0   journal_nodes_table                                                                                                                                                     │
│                                                                                                                                                                                                                                              │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

This should have created an item with alias journal_nodes_table in the kiara data store, which you can confirm with kiara data list.
Writing the kiara module¶

Ok, let's get started and create a kiara module that filters a table, using different filter criteria.
Module skeleton¶

In most cases you'd delete the example module mentioned above, and create your module in the Python file where the example module was, or in a new Python file in the "modules" folder. For the purpose of this tutorial, we can just leave the example module in place, because it can serve as a quick reference for our own module. Use the editor of your choice, and paste the following text below the existing code into modules/__init__.py:

from kiara import KiaraModule

class TutorialModule(KiaraModule):

    def create_inputs_schema(self):
        return {
            "table_input": {
                "type": "table"
            }
        }

    def create_outputs_schema(self):
        return {
            "table_output": {
                "type": "table"
            }
        }

    def process(self, inputs, outputs) -> None:
        pass

This module skeleton describes a kiara module that takes a dataset of type table as input (using table_input as input field name), and produces another table dataset as output (accordingly, using table_output as output field name). For your own modules, you'd probably use the field name table for both input and outputs, but in this tutorial we'll use the longer forms, to avoid any confusion.

On the next kiara run, the new module should be picked up by the operation list command:

kiara operation list tutorial_module

╭─ Filtered operations ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   Id                                                             Type(s)   Description                                                   │
│  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │
│   kiara_plugin.my_kiara_module.my_kiara_module.tutorial_module             -- n/a --                                                     │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

The id of the module was autogenerated from the full Python path of its class: kiara_plugin.my_kiara_module.my_kiara_module.tutorial_module.
Module id and description¶

In most cases, we don't want such a long and unwieldy module name. We can assign our own, custom and meaningful id by setting the _module_type_name class attribute. In addition, we will want to add some documentation about the module and its functionality that is displayed to the user. For this, we use a normal Python doc string on the Python class body. For the purpose of this tutorial, we'll only add a single sentence, but in most cases you'll want to have a multi-paragraph markdown text here. So, taking all that into account, edit the module code to include:

...
...
class TutorialModule(KiaraModule):
    """Filter a table."""

    _module_type_name = "filter.table"

    def create_inputs_schema(self):
        return {
...
...

The output for our new module in the operation list is much prettier now:

kiara operation list filter

╭─ Filtered operations ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   Id                            Type(s)   Description                                                                                    │
│  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │
│   filter.table                            Filter a table.                                                                                │
│   string_filter.tokens          filter    -- n/a --                                                                                      │
│   table_filter.drop_columns     filter    -- n/a --                                                                                      │
│   table_filter.select_columns   filter    -- n/a --                                                                                      │
│   table_filter.select_rows      filter    -- n/a --                                                                                      │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

We can also let kiara tell us about what it knows about the operation itself:

kiara operation explain filter.table

╭─ Operation: filter.table ────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   Documentation   Filter a table.                                                                                                        │
│                                                                                                                                          │
│   Inputs                                                                                                                                 │
│                     field name    type    description                                                    Required   Default              │
│                    ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────    │
│                     table_input   table   -- n/a --                                                      yes        -- no default --     │
│                                                                                                                                          │
│                                                                                                                                          │
│   Outputs                                                                                                                                │
│                     field name     type    description                                                                                   │
│                    ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────    │
│                     table_output   table   -- n/a --                                                                                     │
│                                                                                                                                          │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

Input/output field documentation¶

As you can see in the explain output above, the information to the user is still a bit sparse. In most cases, we'll want to have some information about the input(s) the user is supposed to provide. Same for what the outputs actually mean. In both cases, we can add a doc attribute to each input and output field.

    ...
    ...
    def create_inputs_schema(self):
        return {
            "table_input": {
                "type": "table",
                "doc": "The table to filter."
            }
        }

    def create_outputs_schema(self):
        return {
            "table_output": {
                "type": "table",
                "doc": "The filtered table."
            }
        }
    ...
    ...

Run the explain command again, to check what kiara thinks of our module now:

kiara operation explain filter.table

╭─ Operation: filter.table ──────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   Documentation   Filter a table.                                                                                                        │
│                                                                                                                                          │
│   Inputs                                                                                                                                 │
│                     field name    type    description                                                    Required   Default              │
│                    ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────    │
│                     table_input   table   The table to filter.                                           yes        -- no default --     │
│                                                                                                                                          │
│                                                                                                                                          │
│   Outputs                                                                                                                                │
│                     field name     type    description                                                                                   │
│                    ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────    │
│                     table_output   table   The filtered table.                                                                           │
│                                                                                                                                          │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

Processing the inputs¶

Specifying the inputs (and outputs) is an important part of designing your module, it's basically the module's 'public API', and you want to avoid changing it (too much; or at all) as your module evolves over time. But of course, the actual processing is where the interesting stuff happens. In kiara, that is the process method of every module. The arguments to this method are called inputs and outputs, which are basically dicts that use the field names specified in the create_inputs_schema / create_outputs_schema as keys, and Python objects of class Value as values.

One thing to understand is that a Value object is not the same as the actual data. Instead, it's a reference to it (a means to retrieve it), and it also contains metadata about its provenance (pedigree/lineage) and other properties.

This is the signature of the process method, including type hints (which we will omit after this):

from kiara.models.values.value import ValueMap, ValueMapWritable

    def process(inputs: ValueMap, outputs: ValueMapWritable):
        ...
        ...

The inputs and outputs arguments to the process method are of type ValueMap; the two main methods to access input data are:

    inputs.get_value_obj([field_name]): retrieve the (wrapper) Value object for a field
    inputs.get_value_data([field_name]): retrieve the data object for a field

In addition, you can retrieve the data object via the value wrapper:

value = inputs.get_value_obj("field_name")
data = value.data

The class/type of the data depends on the data type of the value, so you'll have to consult the documentation about what to expect. TODO: expand on this, with a bit of example code/cli commands

The important methods to set an output is:

    outputs.set_value(field_name, result_data): set a single output field
    outputs.set_values(field_name_1=result_data_1, field_name_2=result_data_2, ...): set multiple result values at once

All that out of the way, let's get started implementing our table filter. We'll do it in stages, so hopefully we can cover all the important aspects in this tutorial in a way that makes intuitive sense.

To that end, let's write some code that does ...nothing. Our first iteration of our module will take the input table, and immediately set it as output:

def process(self, inputs, outputs):

    table_obj = inputs.get_value_obj("table_input")

    # some debug output is usually useful while developing. Something like:
    print(f"Filter module, table input: {table_obj}")
    print("Table data:")
    print(table_obj.data)

    outputs.set_value("table_output", table_obj)

If we run our module in this state, we should see our debug output, as well as the resulting table (which will be the unmodified input):

kiara run filter.table table_input=alias:journal_nodes_table

Filter module, table input value: Value(id=f4bda52f-5dc1-4441-adfd-109dbdf357d0, type=table, status=set, initialized=True optional=False)
Table data instance: KiaraTable(model_id=-- n/a --, category=kiara_table, fields=[data_path])

╭─ Result ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   field          data_type   value                                                                                                       │
│  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │
│   table_output   table                                                                                                                   │
│                                Id    Label        JournalTyp   City        CountryNe   PresentDay   Latitude    Longitude   Language     │
│                               ───────────────────────────────────────────────────────────────────────────────────────────────────────    │
│                                75    Psychiatri   specialize   Amsterdam   Netherlan   Netherland   52.366667   4.9         Dutch        │
│                                36    The Americ   specialize   Baltimore   United St   United Sta   39.289444   -76.61527   English      │
│                                208   The Americ   specialize   Baltimore   United St   United Sta   39.289444   -76.61527   English      │
│                                295   Die Kranke   specialize   Berlin      German Em   Germany      52.52       13.405      German       │
│                                296   Die deutsc   general me   Berlin      German Em   Germany      52.52       13.405      German       │
│                                300   Therapeuti   specialize   Berlin      German Em   Germany      52.52       13.405      German       │
│                                1     Allgemeine   specialize   Berlin      German Em   Germany      52.52       13.405      German       │
│                                7     Archiv für   specialize   Berlin      German Em   Germany      52.52       13.405      German       │
│                                10    Berliner k   general me   Berlin      German Em   Germany      52.52       13.405      German       │
│                                13    Charité An   general me   Berlin      German Em   Germany      52.52       13.405      German       │
│                                21    Monatsschr   specialize   Berlin      German Em   Germany      52.52       13.405      German       │
│                                29    Virchows A   specialize   Berlin      German Em   Germany      52.52       13.405      German       │
│                                31    Zeitschrif   specialize   Berlin      German Em   Germany      52.52       13.405      German       │
│                                42    Vierteljah   specialize   Berlin      German Em   Germany      52.52       13.405      German       │
│                                47    Centralbla   specialize   Berlin      German Em   Germany      52.52       13.405      German       │
│                                50    Russische    general me   Berlin      German Em   Germany      52.52       13.405      German       │
│                                ...   ...          ...          ...         ...         ...          ...         ...         ...          │
│                                ...   ...          ...          ...         ...         ...          ...         ...         ...          │
│                                277   L'arte med   general me   Turin       Italy       Italy        45.079167   7.676111    Italian      │
│                                288   Allgemeine   specialize   Vienna      Austro-Hu   Austria      48.2        16.366667   German       │
│                                18    Jahrbücher   specialize   Vienna      Austro-Hu   Austria      48.2        16.366667   German       │
│                                30    Wiener kli   general me   Vienna      Austro-Hu   Austria      48.2        16.366667   German       │
│                                44    Wiener kli   general me   Vienna      Austro-Hu   Austria      48.2        16.366667   German       │
│                                45    Wiener med   general me   Vienna      Austro-Hu   Austria      48.2        16.366667   German       │
│                                72    Wiener med   general me   Vienna      Austro-Hu   Austria      48.2        16.366667   German       │
│                                81    Monatsschr   general me   Vienna      Austro-Hu   Austria      48.2        16.366667   German       │
│                                93    Klinisch-t   general me   Vienna      Austro-Hu   Austria      48.2        16.366667   German       │
│                                151   Medicinisc   specialize   Vienna      Austro-Hu   Austria      48.2        16.366667   German       │
│                                199   Der Militä   specialize   Vienna      Austro-Hu   Austria      48.2        16.366667   German       │
│                                261   Медицинска   general me   Voronezh    Russian E   Russia       51.671667   39.210556   Russian      │
│                                77    Medycyna     general me   Warsaw      Russian E   Poland       52.233333   21.016667   Polish       │
│                                150   Kronika Le   general me   Warsaw      Russian E   Poland       52.233333   21.016667   Polish       │
│                                86    Grenzfrage   specialize   Wiesbaden   German Em   Germany      50.0825     8.24        German       │
│                                206   Ergebnisse   specialize   Wiesbaden   German Em   Germany      50.0825     8.24        German       │
│                                                                                                                                          │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

Now it's time to drill a bit deeper into our input table, and figure out how to access the information it contains. kiara wraps data that shares some schema/structure into so-called 'data types'. You can access a list of the data types that are available in your current kiara environment with the data-type list sub-command:

kiara data-type list

╭─ Available data types ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   type name      type lineage   (qualifier) profiles   description                                                                       │
│  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │
│   any            -- n/a --      -- n/a --              'Any' type, the parent type for most other types.                                 │
│                                                                                                                                          │
│   array          -- n/a --      -- n/a --              An array, in most cases used as a column within a table.                          │
│                                                                                                                                          │
│   boolean        -- n/a --      -- n/a --              A boolean.                                                                        │
│                                                                                                                                          │
│   bytes          -- n/a --      -- n/a --              An array of bytes.                                                                │
│                                                                                                                                          │
│   database       -- n/a --      -- n/a --              A database, containing one or several tables.                                     │
│                                                                                                                                          │
│   date           -- n/a --      -- n/a --              A date.                                                                           │
│                                                                                                                                          │
│   dict           -- n/a --      -- n/a --              A dictionary.                                                                     │
│                                                                                                                                          │
│   file           -- n/a --      -- n/a --              A file.                                                                           │
│                                                                                                                                          │
│   file_bundle    -- n/a --      -- n/a --              A bundle of files (like a folder, zip archive, etc.).                             │
│                                                                                                                                          │
│   float          -- n/a --      -- n/a --              A float.                                                                          │
│                                                                                                                                          │
│   integer        -- n/a --      -- n/a --              An integer.                                                                       │
│                                                                                                                                          │
│   list           -- n/a --      -- n/a --              A list.                                                                           │
│                                                                                                                                          │
│   network_data   -- n/a --      -- n/a --              Data that can be assembled into a graph.                                          │
│                                                                                                                                          │
│   string         -- n/a --      -- n/a --              A string.                                                                         │
│                                                                                                                                          │
│   table          -- n/a --      -- n/a --              Tabular data (table, spreadsheet, data_frame, what have you).                     │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

To find out more about a specific data type, you can use data-type explain:

kiara data-type explain table

╭─ Data type: table ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   type_name     table                                                                                                                    │
│   type_config   {}                                                                                                                       │
│                                                                                                                                          │
│ ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── │
│                                                                                                                                          │
│  lineage              table                                                                                                              │
│                       any                                                                                                                │
│  qualifier profile(s) -- n/a --                                                                                                          │
│  Documentation                                                                                                                           │
│                         Tabular data (table, spreadsheet, data_frame, what have you).                                                    │
│                                                                                                                                          │
│                         The table data is organized in sets of columns (arrays of data of the same type), with each column having a      │
│                         string identifier.                                                                                               │
│                                                                                                                                          │
│                         kiara uses an instance of the [KiaraTable][kiara_plugin.tabular.models.table.KiaraTable] class to manage the     │
│                         table data, which let's developers access it in different formats (Apache Arrow Table, Pandas dataframe,         │
│                         Python dict of lists, more to follow...).                                                                        │
│                                                                                                                                          │
│                         Please consult the API doc of the KiaraTable class for more information about how to access and query the        │
│                         data:                                                                                                            │
│                                                                                                                                          │
│                          • KiaraTable API doc                                                                                            │
│                                                                                                                                          │
│                         Internally, the data is stored in Apache Feather format -- both in memory and on disk when saved, which          │
│                         enables some advanced usage to preserve memory and compute overhead.                                             │
│                                                                                                                                          │
│  Author(s)                                                                                                                               │
│                         Markus Binsteiner   markus@frkl.io                                                                               │
│                                                                                                                                          │
│  Context                                                                                                                                 │
│                         Tags         tabular                                                                                             │
│                         Labels       package: kiara_plugin.tabular                                                                       │
│                         References   source_repo: https://github.com/DHARPA-Project/kiara_plugin.tabular                                 │
│                                      documentation: https://DHARPA-Project.github.io/kiara_plugin.tabular/                               │
│                                                                                                                                          │
│  Python class                                                                                                                            │
│                         python_class_name    TableType                                                                                   │
│                         python_module_name   kiara_plugin.tabular.data_types.table                                                       │
│                         full_name            kiara_plugin.tabular.data_types.table.TableType                                             │
│                                                                                                                                          │
│  Config class                                                                                                                            │
│                         python_class_name    DataTypeConfig                                                                              │
│                         python_module_name   kiara.data_types                                                                            │
│                         full_name            kiara.data_types.DataTypeConfig                                                             │
│                                                                                                                                          │
│  Value class                                                                                                                             │
│                         python_class_name    KiaraTable                                                                                  │
│                         python_module_name   kiara_plugin.tabular.models.table                                                           │
│                         full_name            kiara_plugin.tabular.models.table.KiaraTable                                                │
│                                                                                                                                          │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

Reading this, and following some of the links included. shows us that we can retrieve the table data as a Pandas dataframe using the to_pandas() method. As the documentation states, this loads the whole data into memory, which is something we should try to avoid, but in a lot of cases (esp. if we are dealing with sub-hundreds-of-megabytes-sized data) it's a perfectly acceptable approach. So, let's do this and use our existing knowledge of Pandas, and retrieve a list of column names from the table the user provided, print out that information debug-style, using print:

def process(self, inputs, outputs) -> None:

    table_obj = inputs.get_value_obj("table_input")

    print(f"Filter module, table input value: {table_obj}")
    print(f"Table data instance: {table_obj.data}")

    pandas_df = table_obj.data.to_pandas()
    print(f"Column names: {pandas_df.columns}")

    outputs.set_value("table_output", table_obj)

Again, let's run and see what's what (this time surpressing the result output we don't need right now, using --output silent):

kiara run --output silent filter.table table_input=alias:journal_nodes_table

Filter module, table input value: Value(id=f4bda52f-5dc1-4441-adfd-109dbdf357d0, type=table, status=set, initialized=True optional=False)
Table data instance: KiaraTable(model_id=-- n/a --, category=kiara_table, fields=[data_path])
Column names: Index(['Id', 'Label', 'JournalType', 'City', 'CountryNetworkTime',
       'PresentDayCountry', 'Latitude', 'Longitude', 'Language'],
      dtype='object')

Ok, now we filter. Initially, let's say our module accepts only tables that contain a 'City' column, and returns all rows that have 'Berlin' as a value there:

def process(self, inputs, outputs) -> None:

    from kiara.exceptions import KiaraProcessingException

    table_obj = inputs.get_value_obj("table_input")
    pandas_df = table_obj.data.to_pandas()

    column_names = pandas_df.columns
    if "City" not in column_names:
        raise KiaraProcessingException("Invalid table, does not contain a column named 'City'.")

    berlin_df = pandas_df.loc[pandas_df['City'] == "Berlin"]
    outputs.set_value("table_output", berlin_df)

And again, we run our module using our example dataset, and now we actually get something that is filtered:

kiara run filter.table table_input=alias:journal_nodes_table

╭─ Result ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   field          data_type   value                                                                                                       │
│  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │
│   table_output   table                                                                                                                   │
│                                Id    Label      JournalT   City     CountryN   PresentD   Latitude   Longitude   Language   __index_     │
│                               ───────────────────────────────────────────────────────────────────────────────────────────────────────    │
│                                295   Die Kran   speciali   Berlin   German E   Germany    52.52      13.405      German     3            │
│                                296   Die deut   general    Berlin   German E   Germany    52.52      13.405      German     4            │
│                                300   Therapeu   speciali   Berlin   German E   Germany    52.52      13.405      German     5            │
│                                1     Allgemei   speciali   Berlin   German E   Germany    52.52      13.405      German     6            │
│                                7     Archiv f   speciali   Berlin   German E   Germany    52.52      13.405      German     7            │
│                                10    Berliner   general    Berlin   German E   Germany    52.52      13.405      German     8            │
│                                13    Charité    general    Berlin   German E   Germany    52.52      13.405      German     9            │
│                                21    Monatssc   speciali   Berlin   German E   Germany    52.52      13.405      German     10           │
│                                29    Virchows   speciali   Berlin   German E   Germany    52.52      13.405      German     11           │
│                                31    Zeitschr   speciali   Berlin   German E   Germany    52.52      13.405      German     12           │
│                                42    Viertelj   speciali   Berlin   German E   Germany    52.52      13.405      German     13           │
│                                47    Centralb   speciali   Berlin   German E   Germany    52.52      13.405      German     14           │
│                                50    Russisch   general    Berlin   German E   Germany    52.52      13.405      German     15           │
│                                76    Deutsche   general    Berlin   German E   Germany    52.52      13.405      German     16           │
│                                87    Monatssc   speciali   Berlin   German E   Germany    52.52      13.405      German     17           │
│                                108   Archiv f   speciali   Berlin   German E   Germany    52.52      13.405      German     18           │
│                                113   Zeitschr   general    Berlin   German E   Germany    52.52      13.405      German     19           │
│                                159   Deutsche   speciali   Berlin   German E   Germany    52.52      13.405      German     20           │
│                                162   Jahresbe   speciali   Berlin   German E   Germany    52.52      13.405      German     21           │
│                                192   Ärztlich   general    Berlin   German E   Germany    52.52      13.405      German     22           │
│                                198   Zeitschr   speciali   Berlin   German E   Germany    52.52      13.405      German     23           │
│                                258   Der Pfar   news med   Berlin   German E   Germany    52.52      13.405      German     24           │
│                                                                                                                                          │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

Of course, a module like this is only of very limited value, because the tables it accepts as inputs must contain a column named 'City', and it only filters out a hardcoded string. Ideally, we'd want the user to provide both inputs, along with the table to filter. Let's add those module inputs, and adjust the processing method accordingly:

    def create_inputs_schema(self):
        return {
            "table_input": {
                "type": "table",
                "doc": "The table to filter."
            },
            "column_name": {
                "type": "string",
                "doc": "The column containing the element to use as filter.",
                "default": "City"
            },
            "filter_string": {
                "type": "string",
                "doc": "The string to use as filter."
            }
        }

    def process(self, inputs, outputs) -> None:

        from kiara.exceptions import KiaraProcessingException

        table_obj = inputs.get_value_obj("table_input")
        column_name = inputs.get_value_data("column_name")
        filter_string = inputs.get_value_data("filter_string")

        pandas_df = table_obj.data.to_pandas()

        column_names = pandas_df.columns
        if column_name not in column_names:
            raise KiaraProcessingException(f"Invalid table, does not contain a column named '{column_name}'. Available column names: {', '.join(column_names)}.")

        berlin_df = pandas_df.loc[pandas_df[column_name] == filter_string]
        outputs.set_value("table_output", berlin_df)

In this example, I've used a default value for the column_name input ('City'). This probably doesn't make a whole lot of sense, but it shows how to set defaults for input fields, which in a lot of cases does make sense. We can try to run this command using a missing filter_string argument, which shows off nicely what the kiara command-line interface has to say about something like this:

kiara run filter.table table_input=alias:journal_nodes_table

╭─ Run info: filter.table ───────────────────────────────────────────────────╮
│                                                                              │
│ Can't run operation: invalid or insufficient input(s)                        │
│                                                                              │
│ ──────────────────────────────────────────────────────────────────────────── │
│                                                                              │
│ Operation: filter.table                                                    │
│                                                                              │
│ Filter a table.                                                              │
│                                                                              │
│ Inputs:                                                                      │
│                                                                              │
│   field name      status    type     description        required   default   │
│  ──────────────────────────────────────────────────────────────────────────  │
│   column_name     valid     string   The column         no         City      │
│                                      containing the                          │
│                                      element to use                          │
│                                      as filter.                              │
│   filter_string   not set   string   The string to      yes                  │
│                                      use as filter.                          │
│   table_input     valid     table    The table to       yes                  │
│                                      filter.                                 │
│                                                                              │
│                                                                              │
│ Outputs:                                                                     │
│                                                                              │
│   field name     type    description                                         │
│  ──────────────────────────────────────────────────────────────────────────  │
│   table_output   table   The filtered table.                                 │
│                                                                              │
╰──────────────────────────────────────────────────────────────────────────────╯

As you can see, kiara complains about the missing input, but has used 'City' as default for the missing column_name input, and therefor is ok with the user not providing this. Ok, one more time, let's look for 'Amsterdam':

kiara run filter.table table_input=alias:journal_nodes_table filter_string=Amsterdam

╭─ Result ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   field          data_type   value                                                                                                       │
│  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │
│   table_output   table                                                                                                                   │
│                                Id   Label      JournalT   City       CountryN   PresentD   Latitude   Longitud   Language   __index_     │
│                               ───────────────────────────────────────────────────────────────────────────────────────────────────────    │
│                                75   Psychiat   speciali   Amsterda   Netherla   Netherla   52.36666   4.9        Dutch      0            │
│                                                                                                                                          │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

This should give you a good basis to work on your own kiara module(s). Stay tuned for part II of this tutorial!

pipelines

Preparation¶
Check out the 'kiara getting started guide'¶

If you haven't already, it would make sense for you to go through the kiara getting started guide. This will give you a good overview of the relevant kiara features, and how the module(s) you are going to write fits in.
Setting up development environment¶

To get going, we need a Python virtual environment in which to develop. We'll be using conda for that here, but this will work for normal virtual environments as well. As a first step, install conda (if you haven't already). Then:

conda create -n my_kiara_module python=3.9
conda activate my_kiara_module
conda install -c conda-forge mamba   # this is optional, but makes everything install related much faster, if you don't use it, replace 'mamba' with 'conda' below
mamba install -c conda-forge -c dharpa kiara kiara_plugin.core_types kiara_plugin.tabular

Note

For Linux, if you experience errors, you might or might not have to also execute: mamba update -c conda-forge libstdcxx-ng.

After this, the kiara command-line application should be available to you, you can test whether that works, for example via kiara operation list.
Creating a kiara plugin project¶

For this tutorial, we'll use a project template to create a bare-bones kiara plugin project, which we will augment with our own module(s).

First we need to install the cruft conda package, which we will use to create our project stub:

mamba install -c conda-forge cruft

Now, we run cruft against our template git repo, feel free to change any of the answers to the questions you'll be asked:

cruft create https://github.com/DHARPA-Project/kiara_plugin.develop.git

full_name []: Markus Binsteiner
email []: markus@frkl.io
project_name [my-kiara-plugin]: my-kiara-module
project_slug [my_kiara_module]: my_kiara_module
project_short_description [my-kiara-module]: A kiara plugin project for learning to create kiara modules.
github_user [DHARPA-Project]:
anaconda_user [dharpa]:

This should have created a new folder, named kiara_plugin.my_kiara_module. Next, we initialize and install the new plugin Python project into our conda environment:

cd kiara_plugin.my_kiara_module
git init
git checkout -b develop
pip install -e .

Note

TODO: explain what happened here?

Once this is done, you should see a new operation called my_kiara_module.example:

kiara operation list example

╭─ Filtered operations ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   Id                        Type(s)   Description                                                                                        │
│  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │
│   my_kiara_module.example             A very simple example module; concatenate two strings.                                             │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

Note

The example string token at the end of the above command filters the output to operations that match the token.

This module comes as example code with the project template, and is located in the modules/__init__.py Python file. It only serves as an example and blueprint for your own modules, and you can delete the module class within the file if you wish.
Pre-loading a table dataset¶

In our tutorial we'll create a module to filter a table. In order to do this we'll need to pre-seed our kiara data store with a tabular dataset. Here is the command to run (with the project root as our working directory):

kiara run --save table=journal_nodes_table import.table.from.local_file_path path=examples/data/journals/JournalNodes1902.csv

╭─ Results ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                                                                                                                              │
│   field           data_type   value                                                                                                                                                                                                          │
│  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │
│   imported_file   file        ﻿Id,Label,JournalType,City,CountryNetworkTime,PresentDayCountry,Latitude,Longitude,Language                                                                                                                    │
│                               75,Psychiatrische en neurologische bladen,specialized: psychiatry and neurology,Amsterdam,Netherlands,Netherlands,52.366667,4.9,Dutch                                                                          │
│                               36,The American Journal of Insanity,specialized: psychiatry and neurology,Baltimore,United States,United States,39.289444,-76.615278,English                                                                   │
│                               208,The American Journal of Psychology,specialized: psychology,Baltimore,United States,United States,39.289444,-76.615278,English                                                                              │
│                               295,Die Krankenpflege,specialized: therapy,Berlin,German Empire,Germany,52.52,13.405,German                                                                                                                    │
│                               296,Die deutsche Klinik am Eingange des zwanzigsten Jahrhunderts,general medicine,Berlin,German Empire,Germany,52.52,13.405,German                                                                             │
│                               300,Therapeutische Monatshefte,specialized: therapy,Berlin,German Empire,Germany,52.52,13.405,German                                                                                                           │
│                               1,Allgemeine Zeitschrift für Psychiatrie,specialized: psychiatry and neurology,Berlin,German Empire,Germany,52.52,13.405,German                                                                                │
│                               7,Archiv für Psychiatrie und Nervenkrankheiten,specialized: psychiatry and neurology,Berlin,German Empire,Germany,52.52,13.405,German                                                                          │
│                               10,Berliner klinische Wochenschrift,general medicine,Berlin,German Empire,Germany,52.52,13.405,German                                                                                                          │
│                               13,Charité Annalen,general medicine,Berlin,German Empire,Germany,52.52,13.405,German                                                                                                                           │
│                               21,Monatsschrift für Psychiatrie und Neurologie,specialized: psychiatry and neurology,Berlin,German Empire,Germany,52.52,13.405,German                                                                         │
│                               29,Virchows Archiv,"specialized: anatomy, physiology and pathology",Berlin,German Empire,Germany,52.52,13.405,German                                                                                           │
│                               31,Zeitschrift für pädagogische Psychologie und Pathologie,specialized: psychology and pedagogy,Berlin,German Empire,Germany,52.52,13.405,German                                                               │
│                               42,Vierteljahrsschrift für gerichtliche Medizin und öffentliches Sanitätswesen,"specialized: anthropology, criminology and forensics",Berlin,German Empire,Germany,52.52,13.405,German                         │
│                               47,Centralblatt für Nervenheilkunde und Psychiatrie,specialized: psychiatry and neurology,Berlin,German Empire,Germany,52.52,13.405,German                                                                     │
│                               50,Russische medicinische Rundschau,general medicine,Berlin,German Empire,Germany,52.52,13.405,German                                                                                                          │
│                               76,Deutsche Aerzte-Zeitung,general medicine,Berlin,German Empire,Germany,52.52,13.405,German                                                                                                                   │
│                               87,Monatsschrift für Geburtshülfe und Gynäkologie,specialized: gynecology,Berlin,German Empire,Germany,52.52,13.405,German                                                                                     │
│                               108,Archiv für klinische Chirurgie,specialized: surgery,Berlin,German Empire,Germany,52.52,13.405,German                                                                                                       │
│                               113,Zeitschrift für klinische Medicin,general medicine,Berlin,German Empire,Germany,52.52,13.405,German                                                                                                        │
│                               159,Deutsche militärärztliche Zeitschrift,specialized: military medicine,Berlin,German Empire,Germany,52.52,13.405,German                                                                                      │
│                               162,Jahresbericht über die Leistungen und Fortschritte auf dem Gebiete der Neurologie und Psychiatrie,specialized: psychiatry and neurology,Berlin,German Empire,Germany,52.52,13.405,German                   │
│                               192,Ärztliche Sachverständigen-Zeitung,general medicine,Berlin,German Empire,Germany,52.52,13.405,German                                                                                                       │
│                               198,Zeitschrift für die Behandlung Schwachsinniger und Epileptischer,specialized: psychiatry and neurology,Berlin,German Empire,Germany,52.52,13.405,German                                                    │
│                               258,Der Pfarrbote,news media,Berlin,German Empire,Germany,52.52,13.405,German                                                                                                                                  │
│                               71,Correspondenz-Blatt für Schweizer Aerzte,general medicine,Bern,Switzerland,Switzerland,46.948056,7.4475,German                                                                                              │
│                               6,Archiv für mikroskopische Anatomie,"specialized: anatomy, physiology and pathology",Bonn,German Empire,Germany,50.733333,7.1,German                                                                          │
│                               203,The Journal of Abnormal Psychology,specialized: psychology,Boston,United States,United States,42.358056,-71.063611,English                                                                                 │
│                               273,"Correspondenz-Blatt der Deutschen Gesellschaft für Anthropologie, Ethnologie und Urgeschichte","specialized: anthropology, criminology and forensics",Braunschweig,German                                 │
│                               Empire,Germany,52.266667,10.516667,German                                                                                                                                                                      │
│                               303,Policlinique de Bruxelles,general medicine,Brussels,Belgium,Belgium,50.85,4.35,French                                                                                                                      │
│                               306,Annales de la Société Belge de Neurologie,specialized: psychiatry and neurology,Brussels,Belgium,Belgium,50.85,4.35,French                                                                                 │
│                               19,Journal de neurologie,specialized: psychiatry and neurology,Brussels,Belgium,Belgium,50.85,4.35,French                                                                                                      │
│                               25,"Revue internationale d'électrothérapie, de physiologie, de médecine, de chirurgie, d'obstétrique, de thérapeutique, de chimie et de pharmacie",general                                                     │
│                               medicine,Brussels,Belgium,Belgium,50.85,4.35,French                                                                                                                                                            │
│                               35,Bulletin de la Société de Médecine Mentale de Belgique,specialized: psychiatry and neurology,Brussels,Belgium,Belgium,50.85,4.35,French                                                                     │
│                               ...                                                                                                                                                                                                            │
│                                                                                                                                                                                                                                              │
│                               ...                                                                                                                                                                                                            │
│   table           table                                                                                                                                                                                                                      │
│                                 Id    Label                                              JournalType                                         City        CountryNetworkTime        PresentDayCountry   Latitude    Longitude    Language     │
│                                ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────    │
│                                 75    Psychiatrische en neurologische bladen             specialized: psychiatry and neurology               Amsterdam   Netherlands               Netherlands         52.366667   4.9          Dutch        │
│                                 36    The American Journal of Insanity                   specialized: psychiatry and neurology               Baltimore   United States             United States       39.289444   -76.615278   English      │
│                                 208   The American Journal of Psychology                 specialized: psychology                             Baltimore   United States             United States       39.289444   -76.615278   English      │
│                                 295   Die Krankenpflege                                  specialized: therapy                                Berlin      German Empire             Germany             52.52       13.405       German       │
│                                 296   Die deutsche Klinik am Eingange des zwanzigsten    general medicine                                    Berlin      German Empire             Germany             52.52       13.405       German       │
│                                 300   Therapeutische Monatshefte                         specialized: therapy                                Berlin      German Empire             Germany             52.52       13.405       German       │
│                                 1     Allgemeine Zeitschrift für Psychiatrie             specialized: psychiatry and neurology               Berlin      German Empire             Germany             52.52       13.405       German       │
│                                 7     Archiv für Psychiatrie und Nervenkrankheiten       specialized: psychiatry and neurology               Berlin      German Empire             Germany             52.52       13.405       German       │
│                                 10    Berliner klinische Wochenschrift                   general medicine                                    Berlin      German Empire             Germany             52.52       13.405       German       │
│                                 13    Charité Annalen                                    general medicine                                    Berlin      German Empire             Germany             52.52       13.405       German       │
│                                 21    Monatsschrift für Psychiatrie und Neurologie       specialized: psychiatry and neurology               Berlin      German Empire             Germany             52.52       13.405       German       │
│                                 29    Virchows Archiv                                    specialized: anatomy, physiology and pathology      Berlin      German Empire             Germany             52.52       13.405       German       │
│                                 31    Zeitschrift für pädagogische Psychologie und Pat   specialized: psychology and pedagogy                Berlin      German Empire             Germany             52.52       13.405       German       │
│                                 42    Vierteljahrsschrift für gerichtliche Medizin und   specialized: anthropology, criminology and forens   Berlin      German Empire             Germany             52.52       13.405       German       │
│                                 47    Centralblatt für Nervenheilkunde und Psychiatrie   specialized: psychiatry and neurology               Berlin      German Empire             Germany             52.52       13.405       German       │
│                                 50    Russische medicinische Rundschau                   general medicine                                    Berlin      German Empire             Germany             52.52       13.405       German       │
│                                 ...   ...                                                ...                                                 ...         ...                       ...                 ...         ...          ...          │
│                                 ...   ...                                                ...                                                 ...         ...                       ...                 ...         ...          ...          │
│                                 277   L'arte medica                                      general medicine                                    Turin       Italy                     Italy               45.079167   7.676111     Italian      │
│                                 288   Allgemeine österreichische Gerichts-Zeitung        specialized: anthropology, criminology and forens   Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                                 18    Jahrbücher für Psychiatrie                         specialized: psychiatry and neurology               Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                                 30    Wiener klinische Rundschau                         general medicine                                    Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                                 44    Wiener klinische Wochenschrift                     general medicine                                    Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                                 45    Wiener medizinische Wochenschrift                  general medicine                                    Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                                 72    Wiener medizinische Presse                         general medicine                                    Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                                 81    Monatsschrift für Gesundheitspflege                general medicine                                    Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                                 93    Klinisch-therapeutische Wochenschrift              general medicine                                    Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                                 151   Medicinisch-chirurgisches Centralblatt             specialized: surgery                                Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                                 199   Der Militärazt                                     specialized: military medicine                      Vienna      Austro-Hungarian Empire   Austria             48.2        16.366667    German       │
│                                 261   Медицинская беседа                                 general medicine                                    Voronezh    Russian Empire            Russia              51.671667   39.210556    Russian      │
│                                 77    Medycyna                                           general medicine                                    Warsaw      Russian Empire            Poland              52.233333   21.016667    Polish       │
│                                 150   Kronika Lekarska                                   general medicine                                    Warsaw      Russian Empire            Poland              52.233333   21.016667    Polish       │
│                                 86    Grenzfragen des Nerven- und Seelenlebens           specialized: psychiatry and neurology               Wiesbaden   German Empire             Germany             50.0825     8.24         German       │
│                                 206   Ergebnisse der Allgemeinen Pathologie und Pathol   specialized: anatomy, physiology and pathology      Wiesbaden   German Empire             Germany             50.0825     8.24         German       │
│                                                                                                                                                                                                                                              │
│                                                                                                                                                                                                                                              │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

╭─ Stored result values ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                                                                                                                              │
│   field           data type   stored id                              alias(es)                                                                                                                                                               │
│  ────────────────────────────────────────────────────────────────────────────────────────                                                                                                                                                    │
│   imported_file   file        64dbc562-b5ed-4d09-89aa-d8d7d41bd3b3                                                                                                                                                                           │
│   table           table       f4bda52f-5dc1-4441-adfd-109dbdf357d0   journal_nodes_table                                                                                                                                                     │
│                                                                                                                                                                                                                                              │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

This should have created an item with alias journal_nodes_table in the kiara data store, which you can confirm with kiara data list.
Writing the kiara module¶

Ok, let's get started and create a kiara module that filters a table, using different filter criteria.
Module skeleton¶

In most cases you'd delete the example module mentioned above, and create your module in the Python file where the example module was, or in a new Python file in the "modules" folder. For the purpose of this tutorial, we can just leave the example module in place, because it can serve as a quick reference for our own module. Use the editor of your choice, and paste the following text below the existing code into modules/__init__.py:

from kiara import KiaraModule

class TutorialModule(KiaraModule):

    def create_inputs_schema(self):
        return {
            "table_input": {
                "type": "table"
            }
        }

    def create_outputs_schema(self):
        return {
            "table_output": {
                "type": "table"
            }
        }

    def process(self, inputs, outputs) -> None:
        pass

This module skeleton describes a kiara module that takes a dataset of type table as input (using table_input as input field name), and produces another table dataset as output (accordingly, using table_output as output field name). For your own modules, you'd probably use the field name table for both input and outputs, but in this tutorial we'll use the longer forms, to avoid any confusion.

On the next kiara run, the new module should be picked up by the operation list command:

kiara operation list tutorial_module

╭─ Filtered operations ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   Id                                                             Type(s)   Description                                                   │
│  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │
│   kiara_plugin.my_kiara_module.my_kiara_module.tutorial_module             -- n/a --                                                     │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

The id of the module was autogenerated from the full Python path of its class: kiara_plugin.my_kiara_module.my_kiara_module.tutorial_module.
Module id and description¶

In most cases, we don't want such a long and unwieldy module name. We can assign our own, custom and meaningful id by setting the _module_type_name class attribute. In addition, we will want to add some documentation about the module and its functionality that is displayed to the user. For this, we use a normal Python doc string on the Python class body. For the purpose of this tutorial, we'll only add a single sentence, but in most cases you'll want to have a multi-paragraph markdown text here. So, taking all that into account, edit the module code to include:

...
...
class TutorialModule(KiaraModule):
    """Filter a table."""

    _module_type_name = "filter.table"

    def create_inputs_schema(self):
        return {
...
...

The output for our new module in the operation list is much prettier now:

kiara operation list filter

╭─ Filtered operations ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   Id                            Type(s)   Description                                                                                    │
│  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │
│   filter.table                            Filter a table.                                                                                │
│   string_filter.tokens          filter    -- n/a --                                                                                      │
│   table_filter.drop_columns     filter    -- n/a --                                                                                      │
│   table_filter.select_columns   filter    -- n/a --                                                                                      │
│   table_filter.select_rows      filter    -- n/a --                                                                                      │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

We can also let kiara tell us about what it knows about the operation itself:

kiara operation explain filter.table

╭─ Operation: filter.table ────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   Documentation   Filter a table.                                                                                                        │
│                                                                                                                                          │
│   Inputs                                                                                                                                 │
│                     field name    type    description                                                    Required   Default              │
│                    ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────    │
│                     table_input   table   -- n/a --                                                      yes        -- no default --     │
│                                                                                                                                          │
│                                                                                                                                          │
│   Outputs                                                                                                                                │
│                     field name     type    description                                                                                   │
│                    ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────    │
│                     table_output   table   -- n/a --                                                                                     │
│                                                                                                                                          │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

Input/output field documentation¶

As you can see in the explain output above, the information to the user is still a bit sparse. In most cases, we'll want to have some information about the input(s) the user is supposed to provide. Same for what the outputs actually mean. In both cases, we can add a doc attribute to each input and output field.

    ...
    ...
    def create_inputs_schema(self):
        return {
            "table_input": {
                "type": "table",
                "doc": "The table to filter."
            }
        }

    def create_outputs_schema(self):
        return {
            "table_output": {
                "type": "table",
                "doc": "The filtered table."
            }
        }
    ...
    ...

Run the explain command again, to check what kiara thinks of our module now:

kiara operation explain filter.table

╭─ Operation: filter.table ──────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   Documentation   Filter a table.                                                                                                        │
│                                                                                                                                          │
│   Inputs                                                                                                                                 │
│                     field name    type    description                                                    Required   Default              │
│                    ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────    │
│                     table_input   table   The table to filter.                                           yes        -- no default --     │
│                                                                                                                                          │
│                                                                                                                                          │
│   Outputs                                                                                                                                │
│                     field name     type    description                                                                                   │
│                    ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────    │
│                     table_output   table   The filtered table.                                                                           │
│                                                                                                                                          │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

Processing the inputs¶

Specifying the inputs (and outputs) is an important part of designing your module, it's basically the module's 'public API', and you want to avoid changing it (too much; or at all) as your module evolves over time. But of course, the actual processing is where the interesting stuff happens. In kiara, that is the process method of every module. The arguments to this method are called inputs and outputs, which are basically dicts that use the field names specified in the create_inputs_schema / create_outputs_schema as keys, and Python objects of class Value as values.

One thing to understand is that a Value object is not the same as the actual data. Instead, it's a reference to it (a means to retrieve it), and it also contains metadata about its provenance (pedigree/lineage) and other properties.

This is the signature of the process method, including type hints (which we will omit after this):

from kiara.models.values.value import ValueMap, ValueMapWritable

    def process(inputs: ValueMap, outputs: ValueMapWritable):
        ...
        ...

The inputs and outputs arguments to the process method are of type ValueMap; the two main methods to access input data are:

    inputs.get_value_obj([field_name]): retrieve the (wrapper) Value object for a field
    inputs.get_value_data([field_name]): retrieve the data object for a field

In addition, you can retrieve the data object via the value wrapper:

value = inputs.get_value_obj("field_name")
data = value.data

The class/type of the data depends on the data type of the value, so you'll have to consult the documentation about what to expect. TODO: expand on this, with a bit of example code/cli commands

The important methods to set an output is:

    outputs.set_value(field_name, result_data): set a single output field
    outputs.set_values(field_name_1=result_data_1, field_name_2=result_data_2, ...): set multiple result values at once

All that out of the way, let's get started implementing our table filter. We'll do it in stages, so hopefully we can cover all the important aspects in this tutorial in a way that makes intuitive sense.

To that end, let's write some code that does ...nothing. Our first iteration of our module will take the input table, and immediately set it as output:

def process(self, inputs, outputs):

    table_obj = inputs.get_value_obj("table_input")

    # some debug output is usually useful while developing. Something like:
    print(f"Filter module, table input: {table_obj}")
    print("Table data:")
    print(table_obj.data)

    outputs.set_value("table_output", table_obj)

If we run our module in this state, we should see our debug output, as well as the resulting table (which will be the unmodified input):

kiara run filter.table table_input=alias:journal_nodes_table

Filter module, table input value: Value(id=f4bda52f-5dc1-4441-adfd-109dbdf357d0, type=table, status=set, initialized=True optional=False)
Table data instance: KiaraTable(model_id=-- n/a --, category=kiara_table, fields=[data_path])

╭─ Result ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   field          data_type   value                                                                                                       │
│  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │
│   table_output   table                                                                                                                   │
│                                Id    Label        JournalTyp   City        CountryNe   PresentDay   Latitude    Longitude   Language     │
│                               ───────────────────────────────────────────────────────────────────────────────────────────────────────    │
│                                75    Psychiatri   specialize   Amsterdam   Netherlan   Netherland   52.366667   4.9         Dutch        │
│                                36    The Americ   specialize   Baltimore   United St   United Sta   39.289444   -76.61527   English      │
│                                208   The Americ   specialize   Baltimore   United St   United Sta   39.289444   -76.61527   English      │
│                                295   Die Kranke   specialize   Berlin      German Em   Germany      52.52       13.405      German       │
│                                296   Die deutsc   general me   Berlin      German Em   Germany      52.52       13.405      German       │
│                                300   Therapeuti   specialize   Berlin      German Em   Germany      52.52       13.405      German       │
│                                1     Allgemeine   specialize   Berlin      German Em   Germany      52.52       13.405      German       │
│                                7     Archiv für   specialize   Berlin      German Em   Germany      52.52       13.405      German       │
│                                10    Berliner k   general me   Berlin      German Em   Germany      52.52       13.405      German       │
│                                13    Charité An   general me   Berlin      German Em   Germany      52.52       13.405      German       │
│                                21    Monatsschr   specialize   Berlin      German Em   Germany      52.52       13.405      German       │
│                                29    Virchows A   specialize   Berlin      German Em   Germany      52.52       13.405      German       │
│                                31    Zeitschrif   specialize   Berlin      German Em   Germany      52.52       13.405      German       │
│                                42    Vierteljah   specialize   Berlin      German Em   Germany      52.52       13.405      German       │
│                                47    Centralbla   specialize   Berlin      German Em   Germany      52.52       13.405      German       │
│                                50    Russische    general me   Berlin      German Em   Germany      52.52       13.405      German       │
│                                ...   ...          ...          ...         ...         ...          ...         ...         ...          │
│                                ...   ...          ...          ...         ...         ...          ...         ...         ...          │
│                                277   L'arte med   general me   Turin       Italy       Italy        45.079167   7.676111    Italian      │
│                                288   Allgemeine   specialize   Vienna      Austro-Hu   Austria      48.2        16.366667   German       │
│                                18    Jahrbücher   specialize   Vienna      Austro-Hu   Austria      48.2        16.366667   German       │
│                                30    Wiener kli   general me   Vienna      Austro-Hu   Austria      48.2        16.366667   German       │
│                                44    Wiener kli   general me   Vienna      Austro-Hu   Austria      48.2        16.366667   German       │
│                                45    Wiener med   general me   Vienna      Austro-Hu   Austria      48.2        16.366667   German       │
│                                72    Wiener med   general me   Vienna      Austro-Hu   Austria      48.2        16.366667   German       │
│                                81    Monatsschr   general me   Vienna      Austro-Hu   Austria      48.2        16.366667   German       │
│                                93    Klinisch-t   general me   Vienna      Austro-Hu   Austria      48.2        16.366667   German       │
│                                151   Medicinisc   specialize   Vienna      Austro-Hu   Austria      48.2        16.366667   German       │
│                                199   Der Militä   specialize   Vienna      Austro-Hu   Austria      48.2        16.366667   German       │
│                                261   Медицинска   general me   Voronezh    Russian E   Russia       51.671667   39.210556   Russian      │
│                                77    Medycyna     general me   Warsaw      Russian E   Poland       52.233333   21.016667   Polish       │
│                                150   Kronika Le   general me   Warsaw      Russian E   Poland       52.233333   21.016667   Polish       │
│                                86    Grenzfrage   specialize   Wiesbaden   German Em   Germany      50.0825     8.24        German       │
│                                206   Ergebnisse   specialize   Wiesbaden   German Em   Germany      50.0825     8.24        German       │
│                                                                                                                                          │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

Now it's time to drill a bit deeper into our input table, and figure out how to access the information it contains. kiara wraps data that shares some schema/structure into so-called 'data types'. You can access a list of the data types that are available in your current kiara environment with the data-type list sub-command:

kiara data-type list

╭─ Available data types ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   type name      type lineage   (qualifier) profiles   description                                                                       │
│  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │
│   any            -- n/a --      -- n/a --              'Any' type, the parent type for most other types.                                 │
│                                                                                                                                          │
│   array          -- n/a --      -- n/a --              An array, in most cases used as a column within a table.                          │
│                                                                                                                                          │
│   boolean        -- n/a --      -- n/a --              A boolean.                                                                        │
│                                                                                                                                          │
│   bytes          -- n/a --      -- n/a --              An array of bytes.                                                                │
│                                                                                                                                          │
│   database       -- n/a --      -- n/a --              A database, containing one or several tables.                                     │
│                                                                                                                                          │
│   date           -- n/a --      -- n/a --              A date.                                                                           │
│                                                                                                                                          │
│   dict           -- n/a --      -- n/a --              A dictionary.                                                                     │
│                                                                                                                                          │
│   file           -- n/a --      -- n/a --              A file.                                                                           │
│                                                                                                                                          │
│   file_bundle    -- n/a --      -- n/a --              A bundle of files (like a folder, zip archive, etc.).                             │
│                                                                                                                                          │
│   float          -- n/a --      -- n/a --              A float.                                                                          │
│                                                                                                                                          │
│   integer        -- n/a --      -- n/a --              An integer.                                                                       │
│                                                                                                                                          │
│   list           -- n/a --      -- n/a --              A list.                                                                           │
│                                                                                                                                          │
│   network_data   -- n/a --      -- n/a --              Data that can be assembled into a graph.                                          │
│                                                                                                                                          │
│   string         -- n/a --      -- n/a --              A string.                                                                         │
│                                                                                                                                          │
│   table          -- n/a --      -- n/a --              Tabular data (table, spreadsheet, data_frame, what have you).                     │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

To find out more about a specific data type, you can use data-type explain:

kiara data-type explain table

╭─ Data type: table ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   type_name     table                                                                                                                    │
│   type_config   {}                                                                                                                       │
│                                                                                                                                          │
│ ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── │
│                                                                                                                                          │
│  lineage              table                                                                                                              │
│                       any                                                                                                                │
│  qualifier profile(s) -- n/a --                                                                                                          │
│  Documentation                                                                                                                           │
│                         Tabular data (table, spreadsheet, data_frame, what have you).                                                    │
│                                                                                                                                          │
│                         The table data is organized in sets of columns (arrays of data of the same type), with each column having a      │
│                         string identifier.                                                                                               │
│                                                                                                                                          │
│                         kiara uses an instance of the [KiaraTable][kiara_plugin.tabular.models.table.KiaraTable] class to manage the     │
│                         table data, which let's developers access it in different formats (Apache Arrow Table, Pandas dataframe,         │
│                         Python dict of lists, more to follow...).                                                                        │
│                                                                                                                                          │
│                         Please consult the API doc of the KiaraTable class for more information about how to access and query the        │
│                         data:                                                                                                            │
│                                                                                                                                          │
│                          • KiaraTable API doc                                                                                            │
│                                                                                                                                          │
│                         Internally, the data is stored in Apache Feather format -- both in memory and on disk when saved, which          │
│                         enables some advanced usage to preserve memory and compute overhead.                                             │
│                                                                                                                                          │
│  Author(s)                                                                                                                               │
│                         Markus Binsteiner   markus@frkl.io                                                                               │
│                                                                                                                                          │
│  Context                                                                                                                                 │
│                         Tags         tabular                                                                                             │
│                         Labels       package: kiara_plugin.tabular                                                                       │
│                         References   source_repo: https://github.com/DHARPA-Project/kiara_plugin.tabular                                 │
│                                      documentation: https://DHARPA-Project.github.io/kiara_plugin.tabular/                               │
│                                                                                                                                          │
│  Python class                                                                                                                            │
│                         python_class_name    TableType                                                                                   │
│                         python_module_name   kiara_plugin.tabular.data_types.table                                                       │
│                         full_name            kiara_plugin.tabular.data_types.table.TableType                                             │
│                                                                                                                                          │
│  Config class                                                                                                                            │
│                         python_class_name    DataTypeConfig                                                                              │
│                         python_module_name   kiara.data_types                                                                            │
│                         full_name            kiara.data_types.DataTypeConfig                                                             │
│                                                                                                                                          │
│  Value class                                                                                                                             │
│                         python_class_name    KiaraTable                                                                                  │
│                         python_module_name   kiara_plugin.tabular.models.table                                                           │
│                         full_name            kiara_plugin.tabular.models.table.KiaraTable                                                │
│                                                                                                                                          │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

Reading this, and following some of the links included. shows us that we can retrieve the table data as a Pandas dataframe using the to_pandas() method. As the documentation states, this loads the whole data into memory, which is something we should try to avoid, but in a lot of cases (esp. if we are dealing with sub-hundreds-of-megabytes-sized data) it's a perfectly acceptable approach. So, let's do this and use our existing knowledge of Pandas, and retrieve a list of column names from the table the user provided, print out that information debug-style, using print:

def process(self, inputs, outputs) -> None:

    table_obj = inputs.get_value_obj("table_input")

    print(f"Filter module, table input value: {table_obj}")
    print(f"Table data instance: {table_obj.data}")

    pandas_df = table_obj.data.to_pandas()
    print(f"Column names: {pandas_df.columns}")

    outputs.set_value("table_output", table_obj)

Again, let's run and see what's what (this time surpressing the result output we don't need right now, using --output silent):

kiara run --output silent filter.table table_input=alias:journal_nodes_table

Filter module, table input value: Value(id=f4bda52f-5dc1-4441-adfd-109dbdf357d0, type=table, status=set, initialized=True optional=False)
Table data instance: KiaraTable(model_id=-- n/a --, category=kiara_table, fields=[data_path])
Column names: Index(['Id', 'Label', 'JournalType', 'City', 'CountryNetworkTime',
       'PresentDayCountry', 'Latitude', 'Longitude', 'Language'],
      dtype='object')

Ok, now we filter. Initially, let's say our module accepts only tables that contain a 'City' column, and returns all rows that have 'Berlin' as a value there:

def process(self, inputs, outputs) -> None:

    from kiara.exceptions import KiaraProcessingException

    table_obj = inputs.get_value_obj("table_input")
    pandas_df = table_obj.data.to_pandas()

    column_names = pandas_df.columns
    if "City" not in column_names:
        raise KiaraProcessingException("Invalid table, does not contain a column named 'City'.")

    berlin_df = pandas_df.loc[pandas_df['City'] == "Berlin"]
    outputs.set_value("table_output", berlin_df)

And again, we run our module using our example dataset, and now we actually get something that is filtered:

kiara run filter.table table_input=alias:journal_nodes_table

╭─ Result ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   field          data_type   value                                                                                                       │
│  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │
│   table_output   table                                                                                                                   │
│                                Id    Label      JournalT   City     CountryN   PresentD   Latitude   Longitude   Language   __index_     │
│                               ───────────────────────────────────────────────────────────────────────────────────────────────────────    │
│                                295   Die Kran   speciali   Berlin   German E   Germany    52.52      13.405      German     3            │
│                                296   Die deut   general    Berlin   German E   Germany    52.52      13.405      German     4            │
│                                300   Therapeu   speciali   Berlin   German E   Germany    52.52      13.405      German     5            │
│                                1     Allgemei   speciali   Berlin   German E   Germany    52.52      13.405      German     6            │
│                                7     Archiv f   speciali   Berlin   German E   Germany    52.52      13.405      German     7            │
│                                10    Berliner   general    Berlin   German E   Germany    52.52      13.405      German     8            │
│                                13    Charité    general    Berlin   German E   Germany    52.52      13.405      German     9            │
│                                21    Monatssc   speciali   Berlin   German E   Germany    52.52      13.405      German     10           │
│                                29    Virchows   speciali   Berlin   German E   Germany    52.52      13.405      German     11           │
│                                31    Zeitschr   speciali   Berlin   German E   Germany    52.52      13.405      German     12           │
│                                42    Viertelj   speciali   Berlin   German E   Germany    52.52      13.405      German     13           │
│                                47    Centralb   speciali   Berlin   German E   Germany    52.52      13.405      German     14           │
│                                50    Russisch   general    Berlin   German E   Germany    52.52      13.405      German     15           │
│                                76    Deutsche   general    Berlin   German E   Germany    52.52      13.405      German     16           │
│                                87    Monatssc   speciali   Berlin   German E   Germany    52.52      13.405      German     17           │
│                                108   Archiv f   speciali   Berlin   German E   Germany    52.52      13.405      German     18           │
│                                113   Zeitschr   general    Berlin   German E   Germany    52.52      13.405      German     19           │
│                                159   Deutsche   speciali   Berlin   German E   Germany    52.52      13.405      German     20           │
│                                162   Jahresbe   speciali   Berlin   German E   Germany    52.52      13.405      German     21           │
│                                192   Ärztlich   general    Berlin   German E   Germany    52.52      13.405      German     22           │
│                                198   Zeitschr   speciali   Berlin   German E   Germany    52.52      13.405      German     23           │
│                                258   Der Pfar   news med   Berlin   German E   Germany    52.52      13.405      German     24           │
│                                                                                                                                          │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

Of course, a module like this is only of very limited value, because the tables it accepts as inputs must contain a column named 'City', and it only filters out a hardcoded string. Ideally, we'd want the user to provide both inputs, along with the table to filter. Let's add those module inputs, and adjust the processing method accordingly:

    def create_inputs_schema(self):
        return {
            "table_input": {
                "type": "table",
                "doc": "The table to filter."
            },
            "column_name": {
                "type": "string",
                "doc": "The column containing the element to use as filter.",
                "default": "City"
            },
            "filter_string": {
                "type": "string",
                "doc": "The string to use as filter."
            }
        }

    def process(self, inputs, outputs) -> None:

        from kiara.exceptions import KiaraProcessingException

        table_obj = inputs.get_value_obj("table_input")
        column_name = inputs.get_value_data("column_name")
        filter_string = inputs.get_value_data("filter_string")

        pandas_df = table_obj.data.to_pandas()

        column_names = pandas_df.columns
        if column_name not in column_names:
            raise KiaraProcessingException(f"Invalid table, does not contain a column named '{column_name}'. Available column names: {', '.join(column_names)}.")

        berlin_df = pandas_df.loc[pandas_df[column_name] == filter_string]
        outputs.set_value("table_output", berlin_df)

In this example, I've used a default value for the column_name input ('City'). This probably doesn't make a whole lot of sense, but it shows how to set defaults for input fields, which in a lot of cases does make sense. We can try to run this command using a missing filter_string argument, which shows off nicely what the kiara command-line interface has to say about something like this:

kiara run filter.table table_input=alias:journal_nodes_table

╭─ Run info: filter.table ───────────────────────────────────────────────────╮
│                                                                              │
│ Can't run operation: invalid or insufficient input(s)                        │
│                                                                              │
│ ──────────────────────────────────────────────────────────────────────────── │
│                                                                              │
│ Operation: filter.table                                                    │
│                                                                              │
│ Filter a table.                                                              │
│                                                                              │
│ Inputs:                                                                      │
│                                                                              │
│   field name      status    type     description        required   default   │
│  ──────────────────────────────────────────────────────────────────────────  │
│   column_name     valid     string   The column         no         City      │
│                                      containing the                          │
│                                      element to use                          │
│                                      as filter.                              │
│   filter_string   not set   string   The string to      yes                  │
│                                      use as filter.                          │
│   table_input     valid     table    The table to       yes                  │
│                                      filter.                                 │
│                                                                              │
│                                                                              │
│ Outputs:                                                                     │
│                                                                              │
│   field name     type    description                                         │
│  ──────────────────────────────────────────────────────────────────────────  │
│   table_output   table   The filtered table.                                 │
│                                                                              │
╰──────────────────────────────────────────────────────────────────────────────╯

As you can see, kiara complains about the missing input, but has used 'City' as default for the missing column_name input, and therefor is ok with the user not providing this. Ok, one more time, let's look for 'Amsterdam':

kiara run filter.table table_input=alias:journal_nodes_table filter_string=Amsterdam

╭─ Result ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   field          data_type   value                                                                                                       │
│  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │
│   table_output   table                                                                                                                   │
│                                Id   Label      JournalT   City       CountryN   PresentD   Latitude   Longitud   Language   __index_     │
│                               ───────────────────────────────────────────────────────────────────────────────────────────────────────    │
│                                75   Psychiat   speciali   Amsterda   Netherla   Netherla   52.36666   4.9        Dutch      0            │
│                                                                                                                                          │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

This should give you a good basis to work on your own kiara module(s). Stay tuned for part II of this tutorial!

Preparation¶

If you haven't already, it would make sense for you to go through the kiara getting started guide, as well as writing your own kiara module. We'll use the development environment set-up from the latter guide, as well as the module created there as a step in our pipeline.
Creating a pipeline¶

A kiara pipeline is a dict-like data structure that includes one or several processing steps (implemented by kiara operations), connected (or not) in a specific way so that some steps outputs feed into other steps' inputs.
A single-step pipeline¶

The simplest pipeline contains a single operation, and is not useful in any way, since it's easier to just kiara run the operation directly. Nonetheless, below is how that would look like, we'll be using the module we created in the writing your own kiara module guide:

steps:
  - module_type: filter.table
    step_id: filter_table_step

A pipeline step is a dictionary with 2 required keys (and some optional ones, which we'll cover later):

    module_type: the name of the module or operation that should be used.
    step_id: the name of the step, ideally a short, descriptive name outlining what the step does. It can't contain special characters except '_', and it must be unique within the pipeline.

An assembled pipeline has the same characteristics as a kiara module, and in fact is a perfectly valid operation, like any other one, and can be called the same way.

Create a new file my_first_pipeline.yaml, and copy and paste the above code into it. Then, run the operation explain command against the file:

kiara operation explain my_first_pipeline.yaml

╭─ Operation: my_first_pipeline.yaml.yaml ──────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   Documentation   -- n/a --                                                                                                              │
│                                                                                                                                          │
│   Inputs                                                                                                                                 │
│                     field name                         type     description                              Required   Default              │
│                    ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────    │
│                     filter_table_step__table_input     table    The table to filter.                     yes        -- no default --     │
│                     filter_table_step__column_name     string   The column containing the element to     no         City                 │
│                                                                 use as filter.                                                           │
│                     filter_table_step__filter_string   string   The string to use as filter.             yes        -- no default --     │
│                                                                                                                                          │
│                                                                                                                                          │
│   Outputs                                                                                                                                │
│                     field name                        type    description                                                                │
│                    ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────    │
│                     filter_table_step__table_output   table   The filtered table.                                                        │
│                                                                                                                                          │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

As you can see, kiara turned this (single-step) pipeline into an operation, and auto-generated some input- and output-fields, by assembling the step-id and step input-/output-field(s). Those long field names are a bit unwieldy, and we'll remedy that later, for now let's just ignore that.
Adding a second step¶

In the previous tutorial we pre-seeded the kiara data store with a csv file/tabular dataset, to help us with developing our table filter module. In this tutorial, we'll remove the requirement to do that, by adding a step to our pipeline that lets the user specify a path to a csv file, and import and convert that into a table value.

Previously, we've used the import.table.from.local_file_path operation to import the csv file, and we can do the same now. Edit the pipeline file you created so it looks like the following:

steps:
  - module_type: import.table.from.local_file_path
    step_id: import_table_step
  - module_type: filter.table
    step_id: filter_table_step
    input_links:
      table_input: import_table_step.table

What we did here:

    add a new step with the id import_table_step, which will execute the import.table.from.local_file_path operation
    leave our filter step in place, but connect the table_input input of this steps operation to the table output field of the import_table_step operation

!!! note: To find out the input/output field names of each step, use kiara operation explain <MODULE_TYPE>.

We can ask kiara again about what it thinks of this new pipeline/operation:

kiara operation explain my_first_pipeline.yaml

╭─ Operation: my_first_pipeline.yaml.yaml ──────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   Documentation   -- n/a --                                                                                                              │
│                                                                                                                                          │
│   Inputs                                                                                                                                 │
│                     field name                         type     description                              Required   Default              │
│                    ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────    │
│                     import_table_step__path            string   The local path to the file.              yes        -- no default --     │
│                     filter_table_step__column_name     string   The column containing the element to     no         City                 │
│                                                                 use as filter.                                                           │
│                     filter_table_step__filter_string   string   The string to use as filter.             yes        -- no default --     │
│                                                                                                                                          │
│                                                                                                                                          │
│   Outputs                                                                                                                                │
│                     field name                         type    description                                                               │
│                    ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────    │
│                     import_table_step__imported_file   file    The loaded files.                                                         │
│                     import_table_step__table           table   The result value (of type 'table').                                       │
│                     filter_table_step__table_output    table   The filtered table.                                                       │
│                                                                                                                                          │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

As you can see, the previously existing input with the field name filter_table_step__table_input (type: table) is gone now, replaced by a new one, with the field name import_table_step__path (type: string). The other two inputs remain the same (since we did not connect a step output to them).
Side-note: visualizing the pipeline¶

We can let kiara visualize our pipeline at each step in the development process. This is quite useful, as it can serve as a visual aid to debug and assemble pipelines and their steps.

If you want to do this in your own environment, you need to have Java installed, as well as an additional Python dependency in your virtual- or conda-environment:

pip install 'git+https://github.com/cosminbasca/asciinet.git#egg=asciinet&subdirectory=pyasciinet'

Currently, the following commands exist to print a pipeline as graph on the command-line:

    kiara pipeline execution-graph <pipeline_file>: display the pipeline steps in the order they will be executed.
    kiara pipeline data-flow-graph <pipeline_file>: display the the connections of inputs/outputs as well as processing steps.

As an example, let's look at the execution graph of our current pipeline:

kiara pipeline execution-graph my_first_pipeline.yaml

     ┌────────┐     
     │__root__│     
     └────┬───┘     
          │         
          v         
 ┌─────────────────┐
 │import_table_step│
 └────────┬────────┘
          │         
          v         
 ┌─────────────────┐
 │filter_table_step│
 └─────────────────┘

Adjusting the input-/output-field names¶

We could run our pipeline as is, but let's adjust its input- and output field names first. Mainly to make it more intuitive to use. To do that we can add one or both of the following keys to our pipeline description:

    input_aliases: a mapping of pipeline inputs to more user-friendly names
    output_aliases: a mapping of pipeline outputs to more user-friendly names

Lets start with our inputs. Add the following to your pipeline file:

input_aliases:
    import_table_step.path: csv_file_path
    filter_table_step.column_name: column_name
    filter_table_step.filter_string: filter_string

This is basically just a rename of one (or several, or all) pipeline-input-fields, to shorter names. If you specify the same value for several keys, then the user input for those fields will be re-used for all the keys that have that value (we'll cover that in a later tutorial).

Now let's do our outputs:

output_aliases:
    filter_table_step.table_output: filtered_table

Output aliases work a bit different to input aliases: for inputs, if we don't specify a field, kiara will just use the auto-generated name (since the need for the input to exist does not go away). For output aliases, if we don't specify a field, kiara will ignore that output, and not display it to the user. In our case, we are not really interested in the intermediate outputs of the first step, so we only add the filtered_table alias that represents our final, filtered result.

Lets see what kiara has to say about the 'API' of our pipelines now:

kiara operation explain my_first_pipeline.yaml

╭─ Operation: my_first_pipeline.yaml.yaml ──────────────────────────────────────────────────╮
│                                                                                                  │
│   Documentation   -- n/a --                                                                      │
│                                                                                                  │
│   Inputs                                                                                         │
│                     field name      type     description         Required   Default              │
│                    ──────────────────────────────────────────────────────────────────────────    │
│                     csv_file_path   string   The local path to   yes        -- no default --     │
│                                              the file.                                           │
│                     column_name     string   The column          no         City                 │
│                                              containing the                                      │
│                                              element to use as                                   │
│                                              filter.                                             │
│                     filter_string   string   The string to use   yes        -- no default --     │
│                                              as filter.                                          │
│                                                                                                  │
│                                                                                                  │
│   Outputs                                                                                        │
│                     field name       type    description                                         │
│                    ──────────────────────────────────────────────────────────────────────────    │
│                     filtered_table   table   The filtered table.                                 │
│                                                                                                  │
│                                                                                                  │
╰──────────────────────────────────────────────────────────────────────────────────────────────────╯

Much nicer!
Run the pipeline¶

Now, all that is left to do is run the pipeline:

kiara run --save filtered_table=amsterdam_journals my_first_pipeline.yaml csv_file_path=examples/data/journals/JournalNodes1902.csv filter_string=Amsterdam column_name=City

╭─ Result ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   field            data_type   value                                                                                                     │
│  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │
│   filtered_table   table                                                                                                                 │
│                                  Id   Label      JournalT   City       CountryN   PresentD   Latitude   Longitu   Language   __index     │
│                                 ─────────────────────────────────────────────────────────────────────────────────────────────────────    │
│                                  75   Psychiat   speciali   Amsterda   Netherla   Netherla   52.36666   4.9       Dutch      0           │
│                                                                                                                                          │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

╭─ Stored result value ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   field            data type   stored id                              alias(es)                                                          │
│  ────────────────────────────────────────────────────────────────────────────────────────                                                │
│   filtered_table   table       c1fc88d8-66af-4330-8bca-afa4b17faab3   amsterdam_journals                                                 │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

And to confirm this worked, we ask kiara about the value we just stored (alias: amsterdam_journals), including it's lineage, which should give us the value ids of the intermediate results (in case we ever needed them -- they won't have an alias associated with it, but are still persisted in the kiara data store and can be looked up with kiara data explain <VALUE_ID> and/or `kiara data load ):

kiara data explain --lineage alias:amsterdam_journals

╭─ Value details for: alias:amsterdam_journals ────────────────────────────────────────────────────╮
│                                                                                                  │
│   value_id            c1fc88d8-66af-4330-8bca-afa4b17faab3                                       │
│   kiara_id            09ae1e2e-381d-4d42-a47d-522a3d557686                                       │
│                                                                                                  │
│                       ────────────────────────────────────────────────────────────────────────   │
│   data_type_info                                                                                 │
│                         data_type_name     table                                                 │
│                         data_type_config   {}                                                    │
│                         characteristics    {                                                     │
│                                              "is_scalar": false,                                 │
│                                              "is_json_serializable": false                       │
│                                            }                                                     │
│                         data_type_class                                                          │
│                                              python_class_name    TableType                      │
│                                              python_module_name   kiara_plugin.tabular.da…       │
│                                              full_name            kiara_plugin.tabular.da…       │
│                                                                                                  │
│                                                                                                  │
│   destiny_backlinks   {}                                                                         │
│   enviroments         None                                                                       │
│   property_links      {                                                                          │
│                         "metadata.python_class": "b5c9b9eb-e55c-4ee4-ac42-4d5469958932",         │
│                         "metadata.table": "0910a3d6-d171-4e2b-842b-025a2512335e"                 │
│                       }                                                                          │
│   value_hash          zdpuAmca9P3gSGC6XipcksvC5aArdVeBJd8WHcwa6hLB9gqaF                          │
│   value_schema                                                                                   │
│                         type          table                                                      │
│                         type_config   {}                                                         │
│                         default       __not_set__                                                │
│                         optional      False                                                      │
│                         is_constant   False                                                      │
│                         doc           The filtered table.                                        │
│                                                                                                  │
│   value_size          4.97 KB                                                                    │
│   value_status        -- set --                                                                  │
│                                                                                                  │
│                       ────────────────────────────────────────────────────────────────────────   │
│                                                                                                  │
│   lineage             filter.table                                                             │
│                       ├── input: column_name (string) = 39cc115a-108f-4d5e-a3ec-84e076a278db     │
│                       ├── input: filter_string (string) = a6dbd985-bfcc-4a3f-a513-4476474b57ed   │
│                       └── input: table_input (table) = 50852e81-e1c0-4bcb-90bb-e3d0da6ea1b7      │
│                           └── create.table                                                       │
│                               └── input: file (file) = a2638023-3e85-48ca-b380-b5fb29daf4e5      │
│                                   └── import.local.file                                          │
│                                       └── input: path (string) =                                 │
│                                           97ffdcef-4066-4cd4-b3c4-4961afb7012e                   │
│                                                                                                  │
╰──────────────────────────────────────────────────────────────────────────────────────────────────╯

Making the pipeline discoverable¶

One of the main concepts that kiara is trying to facilitate is a modular approach to assembling data workflows. The main ingredient here is the fact that assembled pipelines behave like any other operation in kiara, which means that pipelines can also be used as (single) steps in other pipelines.

To make that work in an intuitive and simple way for users, kiara needs to know about all the pipeline descriptions the user intends to use as building blocks. If we are only concerned about a single 'top-level' pipeline (as we have done in this tutorial so far), this is not a problem, and all we need to do is point kiara to a (yaml- or json-) file containing the pipeline description.

If we want to re-use our pipelines in other pipelines, we need to 'register' them in a kiara context, and give it its own operation id.

kiara tries to make this as simple as possible, so, if you don't do anything, kiara will use the file name that contains the pipeline description (without extension), and convert it to a valid operation id. In our case, we'd end up with an operation called 'my_first_pipeline'.

If we want to have more control over this, we can add a property pipeline_name to our description, that will override the auto-generated operation id.
Using the extra_pipeline property¶

Each kiara context has a property called extra_pipeline. On the command-line, you can specify one or several of those via the --pipelines (or: -p) argument (after the kiara command-name, before the sub-command name):

kiara --pipelines my_first_pipeline.yaml operation list my_first

╭─ Filtered operations ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   Id                  Type(s)    Description                                                                                             │
│  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │
│   my_first_pipeline   pipeline   -- n/a --                                                                                               │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

Note

kiara accepts paths to files or folders as the argument to --pipelines. If you specify a folder, kiara will look for valid pipeline descriptions under that folder.

Let's test that again, but this time we give our new pipeline a descriptive name, as well as some documentation. Add those two properties to your existing pipeline file:

pipeline_name: "import.filtered_table"
doc: |
  Import a table from a csv file, then filter it.

  Filtering is done by matching a 'filter_string' against all cells of a column, both specified by the user.

Note

Here, we use a yaml literal multiline string to specify our pipeline documentation (the: '|'). This allows us to write as much documentation as we need to, without being restricted to a single line.

kiara --pipelines my_first_pipeline.yaml operation list import

╭─ Filtered operations ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   Id                                          Type(s)    Description                                                                     │
│  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │
│   import.database.from.local_file_path        pipeline   Import a database from a csv file.                                              │
│   import.local.file                                      Import a file from the local filesystem.                                        │
│   import.local.file_bundle                               Import a folder (file_bundle) from the local filesystem.                        │
│   import.network_data.from.local_file_paths   pipeline   Onboard the edges and nodes from local files, create table values from them,    │
│                                                          then assemble those to the network_data result.                                 │
│   import.table.from.local_file_path           pipeline   Import a table from a file on the local filesystem.                             │
│   import.table.from.local_folder_path         pipeline   Import a table from a local folder containing text files.                       │
│   import.filtered_table                       pipeline   Import a table from a csv file, then filter it.                                 │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

Going with the information contained in this output, instead of running our pipeline with the path to its file after the run sub-command, we could also do it like:

kiara --pipelines my_first_pipeline.yaml run import.filtered_table ... ... ...

Including the pipeline in a kiara plugin¶

In case we want to 'publish' our pipeline so it can be re-used as part of a kiara plugin (which may or may not contain native 'Python' modules/operations, custom data-types, etc.), this is also easy to do. If you have followed the 'writing your own kiara module' tutorial, you'd have created a kiara plugin project from a template. To add your pipeline to this plugin, simply copy/move it into the directory src/kiara_plugin/<YOUR_PLUGIN_NAME>/pipelines. Naming the pipeline and adding documentation works the same as outlined in the previous chapter.

If you add pipelines to a kiara context this way, nothing else should be necessary, kiara will auto-discover all the pipelines added like this, and you can use the assigned 'pipeline_name' as value of the module_type key in your step description, if you want to run it within another pipeline.


kiara: Natural Language Processing (NLP)¶

Welcome back! Now that we're comfortable with what kiara looks like and what it can do to help track your data and your research process, let's try out some of the digital analysis tools, starting with Natural Language Processing.
Why NLP?¶

First of all, why bothering with NLP? Natural language processing technology allows researchers to sort through unstructured data such as plain text. In other words, by adding numerical value to text, computers can understand language and perform advanced operations such as text categorisation, labelling, summarisation and so on. There are two main stages in NLP: pre-processing and analysis (aka, algorithm development and/or implementation). Here we cover both stages through the example of some of the most common pre-processing operations such as tokenisation, lowercasing, removing stopwords etc. in the first part. For the second part, we will use the example of another widely used text analysis method called topic modelling. For more information about the pre-processing operations and topic modelling and a more in-depth discussion particularly for humanities research, please refer to this repository here.
Starting the Process¶

Let's start by double checking that we have all the required plugins, and setting up an API for us to use kiara. We'll do this all in one go this time, but if you're unsure, feel free to head back to the installation notebook to look over this section again.

try:
    from kiara_plugin.jupyter import ensure_kiara_plugins
except:
    import sys
    print("Installing 'kiara_plugin.jupyter'...")
    !{sys.executable} -m pip install -q kiara_plugin.jupyter
    from kiara_plugin.jupyter import ensure_kiara_plugins

ensure_kiara_plugins()

from kiara import KiaraAPI
kiara = KiaraAPI.instance()

Now we're all set up, we want to download some text to work with in our language processing analyis.
For our example here we will be using a relatively small number of texts. This is a sample taken from the larger corpus ChroniclItaly 3.0 (Viola and Fiscarelli 2021, Viola 2021), an open access digital heritage collection of Italian immigrant newspapers published in the United States from 1898 to 1936. The corpus that we use here includes the digitized (OCRed) front pages of the Italian language newspaper La rassegna as collected from Chronicling America, an Internet-based, searchable database of U.S. newspapers published in the United States from 1789 to 1963 made available by the Library of Congress. These files are also a good examples because their filenames already contain important metadata information such as the publication date. The file name structure is: LCCNnumber_date_pageNumber_ocr.txt. Therefore, the file name ‘sn84037025_1917-04-14_ed-1_seq-1_ocr.txt ’ refers to the OCR text file of the first page of the first edition of La Rassegna published on 14 April 1917. kiara allows us to retrieve both the files and the metadata in the filenames. This is very useful for historical research, but also to keep track of how we are intervening on our sources. Let's see how this works.

kiara.list_operation_ids('download')

['download.file', 'download.file_bundle']

Last time we only wanted one file, but with language processing we might want a bigger corpus.
Let's have a look at download.file_bundle this time.

kiara.retrieve_operation_info('download.file_bundle')

                                                                                                                                            
 Documentation                                                                                                                              
                     -- n/a --                                                                                                              
                                                                                                                                            
 Author(s)                                                                                                                                  
                     Markus Binsteiner   markus@frkl.io                                                                                     
                                                                                                                                            
 Context                                                                                                                                    
                     Tags         onboarding                                                                                                
                     Labels       package: kiara_plugin.onboarding                                                                          
                     References   source_repo: https://github.com/DHARPA-Project/kiara_plugin.onboarding                                    
                                  documentation: https://DHARPA-Project.github.io/kiara_plugin.onboarding/                                  
                                                                                                                                            
 Operation details                                                                                                                          
                     Documentation   -- n/a --                                                                                              
                                                                                                                                            
                     Inputs                                                                                                                 
                                       field name   type     description                                    Required   Default              
                                      ──────────────────────────────────────────────────────────────────────────────────────────────────    
                                       url          string   The url of an archive/zip file to download.    yes        -- no default --     
                                       sub_path     string   A relative path to select only a sub-folder    no         -- no default --     
                                                             from the archive.                                                              
                                                                                                                                            
                                                                                                                                            
                     Outputs                                                                                                                
                                       field name          type          description                                                        
                                      ──────────────────────────────────────────────────────────────────────────────────────────────────    
                                       file_bundle         file_bundle   The downloaded file bundle.                                        
                                       download_metadata   dict          Metadata about the download.                                       
                                                                                                                                            
                                                                                                                                            

So we still want a url, but for a zip file that we can download. Here's some example data for us to use.

Again, we need to define the inputs, use kiara.run_job with our chosen operation download.file_bundle and store this as our outputs.

inputs = {
    "url": "https://github.com/DHARPA-Project/kiara.examples/archive/refs/heads/main.zip",
    "sub_path": "kiara.examples-main/examples/data/text_corpus/data"
 }

outputs = kiara.run_job('download.file_bundle', inputs=inputs)
outputs

patool: Extracting /var/folders/5h/j266_5ss6qj7x37qd77pydh0p248rs/T/tmpjr9umxt6 ...
patool: ... /var/folders/5h/j266_5ss6qj7x37qd77pydh0p248rs/T/tmpjr9umxt6 extracted to `/var/folders/5h/j266_5ss6qj7x37qd77pydh0p248rs/T/tmpnha6uj9d'.

╭──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   field               value                                                                                                              │
│  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │
│   download_metadata                                                                                                                      │
│                         dict data     {                                                                                                  │
│                                         "response_headers": [                                                                            │
│                                           {                                                                                              │
│                                             "access-control-allow-origin": "https://render.githubusercontent.com",                       │
│                                             "content-disposition": "attachment; filename=kiara.examples-main.zip",                       │
│                                             "content-security-policy": "default-src 'none'; style-src 'unsafe-inline'; sandbox",         │
│                                             "content-type": "application/zip",                                                           │
│                                             "etag": "W/\"34f87e1d6dc5c913d21b59d7aecf516bca3a32605b6e1504ae97eec4611cc862\"",            │
│                                             "strict-transport-security": "max-age=31536000",                                             │
│                                             "vary": "Authorization,Accept-Encoding,Origin",                                              │
│                                             "x-content-type-options": "nosniff",                                                         │
│                                             "x-frame-options": "deny",                                                                   │
│                                             "x-xss-protection": "1; mode=block",                                                         │
│                                             "date": "Fri, 27 Jan 2023 07:48:53 GMT",                                                     │
│                                             "transfer-encoding": "chunked",                                                              │
│                                             "x-github-request-id": "542C:C4A4:31636B:3C82F9:63D381E5"                                    │
│                                           },                                                                                             │
│                                           {                                                                                              │
│                                             "server": "GitHub.com",                                                                      │
│                                             "date": "Fri, 27 Jan 2023 07:48:53 GMT",                                                     │
│                                             "content-type": "text/html; charset=utf-8",                                                  │
│                                             "vary": "X-PJAX, X-PJAX-Container, Turbo-Visit, Turbo-Frame, Accept-Encoding, Accept, X…     │
│                                             "location": "https://codeload.github.com/DHARPA-Project/kiara.examples/zip/refs/heads/m…     │
│                                             "cache-control": "max-age=0, private",                                                       │
│                                             "strict-transport-security": "max-age=31536000; includeSubdomains; preload",                 │
│                                             "x-frame-options": "deny",                                                                   │
│                                             "x-content-type-options": "nosniff",                                                         │
│                                             "x-xss-protection": "0",                                                                     │
│                                             "referrer-policy": "no-referrer-when-downgrade",                                             │
│                                             "content-security-policy": "default-src 'none'; base-uri 'self'; block-all-mixed-conten…     │
│                                             "content-length": "0",                                                                       │
│                                             "x-github-request-id": "77A9:872B:7D71061:81F6ABB:63D381E5"                                  │
│                                           }                                                                                              │
│                                         ],                                                                                               │
│                                         "request_time": "2023-01-27T07:48:53.906919+00:00"                                               │
│                                       }                                                                                                  │
│                         dict schema   {                                                                                                  │
│                                         "title": "dict",                                                                                 │
│                                         "type": "object"                                                                                 │
│                                       }                                                                                                  │
│                                                                                                                                          │
│   file_bundle                                                                                                                            │
│                         bundle name       data                                                                                           │
│                         number_of_files   16                                                                                             │
│                         size              298452                                                                                         │
│                         included files                                                                                                   │
│                                             (relative) path                                        size                                  │
│                                            ──────────────────────────────────────────────────────────────                                │
│                                             La_Rassegna/sn84037025_1917-04-14_ed-1_seq-1_ocr.txt   20647                                 │
│                                             La_Rassegna/sn84037025_1917-04-07_ed-1_seq-1_ocr.txt   19397                                 │
│                                             La_Rassegna/sn84037025_1917-04-14_ed-2_seq-1_ocr.txt   20650                                 │
│                                             La_Rassegna/sn84037025_1917-04-21_ed-1_seq-1_ocr.txt   21017                                 │
│                                             La_Rassegna/sn84037025_1917-04-21_ed-2_seq-1_ocr.txt   20982                                 │
│                                             La_Ragione/sn84037024_1917-05-05_ed-2_seq-1_ocr.txt    18474                                 │
│                                             La_Ragione/sn84037024_1917-05-16_ed-1_seq-1_ocr.txt    18620                                 │
│                                             La_Ragione/sn84037024_1917-05-16_ed-2_seq-1_ocr.txt    18698                                 │
│                                             La_Ragione/sn84037024_1917-05-05_ed-1_seq-1_ocr.txt    18346                                 │
│                                             La_Ragione/sn84037024_1917-04-25_ed-4_seq-1_ocr.txt    16235                                 │
│                                             La_Ragione/sn84037024_1917-04-25_ed-3_seq-1_ocr.txt    16793                                 │
│                                             La_Ragione/sn84037024_1917-04-25_ed-2_seq-1_ocr.txt    16679                                 │
│                                             La_Ragione/sn84037024_1917-04-25_ed-1_seq-1_ocr.txt    16613                                 │
│                                             La_Ragione/sn84037024_1917-05-16_ed-3_seq-1_ocr.txt    18540                                 │
│                                             La_Ragione/sn84037024_1917-05-05_ed-4_seq-1_ocr.txt    18481                                 │
│                                             La_Ragione/sn84037024_1917-05-05_ed-3_seq-1_ocr.txt    18280                                 │
│                                                                                                                                          │
│                                                                                                                                          │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

Great, we've successfully imported a bundle of files this time rather than just one. This has given us both the metadata for the files, and the files themselves. As you can see, kiara also gives us additional information on the composition of the text files, that is the number of tokens. This information will be useful later when we will intervene on these files to keep track of how we have changed them. For now, let's save the files in a separate variable for us to use later.

file_bundle = outputs['file_bundle']

Preparing the Texts¶

Now that we have imported the files, let's give them some structure. For this, we will need the create.table.from.file_bundle function (similar to the installation notebook which you are welcome to revisit at any time). Let's have a look by exploring the list of avaibale operations.

kiara.retrieve_operation_info('create.table.from.file_bundle')

                                                                                                                                            
 Documentation                                                                                                                              
                     Create a table value from a text file_bundle.                                                                          
                                                                                                                                            
                     The resulting table will have (at a minimum) the following collumns:                                                   
                                                                                                                                            
                      • id: an auto-assigned index                                                                                          
                      • rel_path: the relative path of the file (from the provided base path)                                               
                      • content: the text file content                                                                                      
                                                                                                                                            
 Author(s)                                                                                                                                  
                     Markus Binsteiner   markus@frkl.io                                                                                     
                                                                                                                                            
 Context                                                                                                                                    
                     Tags         tabular                                                                                                   
                     Labels       package: kiara_plugin.tabular                                                                             
                     References   source_repo: https://github.com/DHARPA-Project/kiara_plugin.tabular                                       
                                  documentation: https://DHARPA-Project.github.io/kiara_plugin.tabular/                                     
                                                                                                                                            
 Operation details                                                                                                                          
                     Documentation   Create a table value from a text file_bundle.                                                          
                                                                                                                                            
                                     The resulting table will have (at a minimum) the following collumns:                                   
                                     - id: an auto-assigned index                                                                           
                                     - rel_path: the relative path of the file (from the provided base path)                                
                                     - content: the text file content                                                                       
                                                                                                                                            
                     Inputs                                                                                                                 
                                       field name    type          description                              Required   Default              
                                      ──────────────────────────────────────────────────────────────────────────────────────────────────    
                                       file_bundle   file_bundle   The source value (of type                yes        -- no default --     
                                                                   'file_bundle').                                                          
                                                                                                                                            
                                                                                                                                            
                     Outputs                                                                                                                
                                       field name   type    description                                                                     
                                      ──────────────────────────────────────────────────────────────────────────────────────────────────    
                                       table        table   The result value (of type 'table').                                             
                                                                                                                                            
                                                                                                                                            

Let's use the file bundle we downloaded earlier and saved in our variable, and run this kiara table function.

inputs = {
    'file_bundle' : file_bundle
}

outputs = kiara.run_job('create.table.from.file_bundle', inputs=inputs)
outputs

╭──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   field   value                                                                                                                          │
│  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │
│   table                                                                                                                                  │
│             id   rel_path                        mime_type    size    content                          file_name                         │
│            ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────    │
│             0    La_Ragione/sn84037024_1917-04   text/plain   16613   LA RAGIONE                       sn84037024_1917-04-25_ed-1_se     │
│             1    La_Ragione/sn84037024_1917-04   text/plain   16679   LA RAG ONE                       sn84037024_1917-04-25_ed-2_se     │
│             2    La_Ragione/sn84037024_1917-04   text/plain   16793   LA RAGIONE                       sn84037024_1917-04-25_ed-3_se     │
│             3    La_Ragione/sn84037024_1917-04   text/plain   16235   contro i vili, i camorristi, i   sn84037024_1917-04-25_ed-4_se     │
│             4    La_Ragione/sn84037024_1917-05   text/plain   18346   contro i vili, i camorristi, i   sn84037024_1917-05-05_ed-1_se     │
│             5    La_Ragione/sn84037024_1917-05   text/plain   18474   LA RAGIONA                       sn84037024_1917-05-05_ed-2_se     │
│             6    La_Ragione/sn84037024_1917-05   text/plain   18280   LA RAGIONE                       sn84037024_1917-05-05_ed-3_se     │
│             7    La_Ragione/sn84037024_1917-05   text/plain   18481   LA RAGIONE                       sn84037024_1917-05-05_ed-4_se     │
│             8    La_Ragione/sn84037024_1917-05   text/plain   18620   contro i vili, i camorristi, i   sn84037024_1917-05-16_ed-1_se     │
│             9    La_Ragione/sn84037024_1917-05   text/plain   18698   LA RAG ONE                       sn84037024_1917-05-16_ed-2_se     │
│             10   La_Ragione/sn84037024_1917-05   text/plain   18540   contro 1 vili, i camorristi, i   sn84037024_1917-05-16_ed-3_se     │
│             11   La_Rassegna/sn84037025_1917-0   text/plain   19397   ■■■                              sn84037025_1917-04-07_ed-1_se     │
│             12   La_Rassegna/sn84037025_1917-0   text/plain   20647   La Rassegna                      sn84037025_1917-04-14_ed-1_se     │
│             13   La_Rassegna/sn84037025_1917-0   text/plain   20650   Both Phones                      sn84037025_1917-04-14_ed-2_se     │
│             14   La_Rassegna/sn84037025_1917-0   text/plain   21017   ■ jSrìt** W?? iIK 38®f- i^M      sn84037025_1917-04-21_ed-1_se     │
│             15   La_Rassegna/sn84037025_1917-0   text/plain   20982   ■Both Phones                     sn84037025_1917-04-21_ed-2_se     │
│                                                                                                                                          │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

Great, this has taken all the information from the files we downloaded and made it a bit easier to navigate. In order to process and analyse our sources, we need to work with the files' content which is in the column 'content'. Let's run `kiara.list_operation_ids('table')' to see how we might be able to do that.

kiara.list_operation_ids('table')

['create.database.from.table',
 'create.network_data.from.tables',
 'create.table.from.file',
 'create.table.from.file_bundle',
 'export.table.as.csv_file',
 'extract.date_array.from.table',
 'filter.table',
 'import.table.from.local_file_path',
 'import.table.from.local_folder_path',
 'query.table',
 'table.pick.column',
 'table_filter.drop_columns',
 'table_filter.select_columns',
 'table_filter.select_rows']

As we are interested in one column, the table.pick.column operation seems like a good fit.

kiara.retrieve_operation_info('table.pick.column')

                                                                                                                                            
 Documentation                                                                                                                              
                     Pick one column from a table, returning an array.                                                                      
                                                                                                                                            
 Author(s)                                                                                                                                  
                     Markus Binsteiner   markus@frkl.io                                                                                     
                                                                                                                                            
 Context                                                                                                                                    
                     Tags         tabular                                                                                                   
                     Labels       package: kiara_plugin.tabular                                                                             
                     References   source_repo: https://github.com/DHARPA-Project/kiara_plugin.tabular                                       
                                  documentation: https://DHARPA-Project.github.io/kiara_plugin.tabular/                                     
                                                                                                                                            
 Operation details                                                                                                                          
                     Documentation   Pick one column from a table, returning an array.                                                      
                                                                                                                                            
                     Inputs                                                                                                                 
                                       field name    type     description                                   Required   Default              
                                      ──────────────────────────────────────────────────────────────────────────────────────────────────    
                                       table         table    A table.                                      yes        -- no default --     
                                       column_name   string   The name of the column to extract.            yes        -- no default --     
                                                                                                                                            
                                                                                                                                            
                     Outputs                                                                                                                
                                       field name   type    description                                                                     
                                      ──────────────────────────────────────────────────────────────────────────────────────────────────    
                                       array        array   The column.                                                                     
                                                                                                                                            
                                                                                                                                            

So here we need two inputs, the table we just made and the name of the column we want to pick.

Let's specify our outputs again and run the function. In this way, we retain the content of the files as the variable we need for NLP.

inputs = {
    'table' : outputs['table'],
    'column_name' : 'content'
}

outputs = kiara.run_job('table.pick.column', inputs=inputs)
outputs

╭──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   field   value                                                                                                                          │
│  ──────────────────────────────────────────────────────────────────────────────────────────────────                                      │
│   array                                                                                                                                  │
│             LA RAGIONE                                                                                                                   │
│             LA RAG ONE                                                                                                                   │
│             LA RAGIONE                                                                                                                   │
│             contro i vili, i camorristi, i sicari, i falsari e gli austriacanti, nemici dell ...                                         │
│             contro i vili, i camorristi, i sicari, i falsari e gli austriacanti, nemici dell ...                                         │
│             LA RAGIONA                                                                                                                   │
│             LA RAGIONE                                                                                                                   │
│             LA RAGIONE                                                                                                                   │
│             contro i vili, i camorristi, i sicari, i falsari e gli austriacanti, nemici dell ...                                         │
│             LA RAG ONE                                                                                                                   │
│             contro 1 vili, i camorristi, i sicari, i falsari e gli austriacanti, nemici dell ...                                         │
│             ■■■                                                                                                                          │
│             La Rassegna                                                                                                                  │
│             Both Phones                                                                                                                  │
│             ■ jSrìt** W?? iIK 38®f- i^M                                                                                                  │
│             ■Both Phones                                                                                                                 │
│                                                                                                                                          │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

Natural Language Processing (Stage 1)¶

Now we are ready for preparing our text for analysis. Let's see what operations are included in kiara for NLP in the kiara_plugin.language_processing package.

infos = metadata = kiara.retrieve_operations_info()
operations = {}
for op_id, info in infos.item_infos.items():
    if info.context.labels.get("package", None) == "kiara_plugin.language_processing":
        operations[op_id] = info

print(operations.keys())

dict_keys(['create.stopwords_list', 'generate.LDA.for.tokens_array', 'preprocess.tokens_array', 'remove_stopwords.from.tokens_array', 'tokenize.string', 'tokenize.texts_array'])

The contents of our text files have been stored as an array. Before performing any operation, we should start by tokenising our text. We can do this by using the tokenize.texts_array function.

If you're unsure about which of these operations you should run, you can refer to the in-built explanation in each kiara module which clarifies what each operation does. For further information about pros and cons of each pre-processing operation, please refer to this repository here.

kiara.retrieve_operation_info('tokenize.texts_array')

                                                                                                                                            
 Documentation                                                                                                                              
                     Split sentences into words or words into characters.                                                                   
                                                                                                                                            
                     In other words, this operation establishes the word boundaries (i.e., tokens) a very helpful way of finding            
                     patterns. It is also the typical step prior to stemming and lemmatization                                              
                                                                                                                                            
 Author(s)                                                                                                                                  
                     Markus Binsteiner   markus@frkl.io                                                                                     
                                                                                                                                            
 Context                                                                                                                                    
                     Tags         language_processing, tokenize, tokens                                                                     
                     Labels       package: kiara_plugin.language_processing                                                                 
                     References   source_repo: https://github.com/DHARPA-Project/kiara_plugin.language_processing                           
                                  documentation: https://DHARPA-Project.github.io/kiara_plugin.language_processing/                         
                                                                                                                                            
 Operation details                                                                                                                          
                     Documentation   Split sentences into words or words into characters.                                                   
                                                                                                                                            
                                     In other words, this operation establishes the word boundaries (i.e., tokens) a very helpful way of    
                                     finding patterns. It is also the typical step prior to stemming and lemmatization                      
                                                                                                                                            
                     Inputs                                                                                                                 
                                       field name         type      description                             Required   Default              
                                      ──────────────────────────────────────────────────────────────────────────────────────────────────    
                                       texts_array        array     An array of text items to be            yes        -- no default --     
                                                                    tokenized.                                                              
                                       tokenize_by_word   boolean   Whether to tokenize by word             no         True                 
                                                                    (default), or character.                                                
                                                                                                                                            
                                                                                                                                            
                     Outputs                                                                                                                
                                       field name     type    description                                                                   
                                      ──────────────────────────────────────────────────────────────────────────────────────────────────    
                                       tokens_array   array   The tokenized content, as an array of lists of strings.                       
                                                                                                                                            
                                                                                                                                            

Great, let's give it a go!

inputs = {
    'texts_array': outputs['array']
}

outputs = kiara.run_job('tokenize.texts_array', inputs=inputs)
outputs

╭──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   field          value                                                                                                                   │
│  ─────────────────────────────────────────────────────────────────────────────────────────────────────────                               │
│   tokens_array                                                                                                                           │
│                    ['LA', 'RAGIONE', 'ORGANO', 'DI', 'DIFESA', 'DELLA', "ITALIANITÀ'", 'contro', '1 ...                                  │
│                    ['LA', 'RAG', 'ONE', 'contro', 'i', 'vili', ',', 'i', 'camorristi', ',', 'i', 's ...                                  │
│                    ['LA', 'RAGIONE', 'ORGANO', 'DI', 'DIFESA', 'DELLA', 'ITALIANITÀ', 'contro', 'i' ...                                  │
│                    ['contro', 'i', 'vili', ',', 'i', 'camorristi', ',', 'i', 'sicari', ',', 'i', 'f ...                                  │
│                    ['contro', 'i', 'vili', ',', 'i', 'camorristi', ',', 'i', 'sicari', ',', 'i', 'f ...                                  │
│                    ['LA', 'RAGIONA', 'ORGANO', 'DI', 'DIFESA', 'DELLA', 'ITALIANITÀ', 'contro', 'i' ...                                  │
│                    ['LA', 'RAGIONE', 'ORGANO', 'DI', 'DIFESA', 'DELLA', "ITALIANITÀ'", 'contro', 'i ...                                  │
│                    ['LA', 'RAGIONE', 'contro', 'i', 'vili', ',', '1', 'camorristi', ',', 'i', 'sica ...                                  │
│                    ['contro', 'i', 'vili', ',', 'i', 'camorristi', ',', 'i', 'sicari', ',', 'i', 'f ...                                  │
│                    ['LA', 'RAG', 'ONE', 'ORGANO', 'DI', 'DIFESA', 'DELLA', 'ITALIANITÀ', "''", 'con ...                                  │
│                    ['contro', '1', 'vili', ',', 'i', 'camorristi', ',', 'i', 'sicari', ',', 'i', 'f ...                                  │
│                    ['■■■', 'La', 'Rassegna', '_', 'I', 'Both', 'Phones', 'ANNO', 'L', 'No', '.', '1 ...                                  │
│                    ['La', 'Rassegna', 'Jjoth', 'Phones', 'ANNO', 'L', 'No', '.', '2', 'BASTA', '!', ...                                  │
│                    ['Both', 'Phones', 'ANNO', 'I', '.', 'No', '.', '2', 'BASTA', '!', '...', 'uà',  ...                                  │
│                    ['■', 'jSrìt', '*', '*', 'W', '?', '?', 'iIK', '38®f-', 'i^M', 'F', '<', '5É', ' ...                                  │
│                    ['■Both', 'Phones', 'ANNO', '11', '.', 'No', '.', '5', 'LE', 'COSE', 'A', 'POSTO ...                                  │
│                                                                                                                                          │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

We can see from the printed preview that this has tokenized the contents for each of the text files we imported.

Now we can work on pre-processing some of this text. Let's look at what options we have in the preprocess.tokens_array operation.

kiara.retrieve_operation_info('preprocess.tokens_array')

                                                                                                                                            
 Documentation                                                                                                                              
                     Preprocess lists of tokens, incl. lowercasing, remove special characers, etc.                                          
                                                                                                                                            
                     Lowercasing: Lowercase the words. This operation is a double-edged sword. It can be effective at yielding              
                     potentially better results in the case of relatively small datasets or datatsets with a high percentage of OCR         
                     mistakes. For instance, if lowercasing is not performed, the algorithm will treat USA, Usa, usa, UsA, uSA, etc. as     
                     distinct tokens, even though they may all refer to the same entity. On the other hand, if the dataset does not         
                     contain such OCR mistakes, then it may become difficult to distinguish between homonyms and make interpreting the      
                     topics much harder.                                                                                                    
                                                                                                                                            
                     Removing stopwords and words with less than three characters: Remove low information words. These are typically        
                     words such as articles, pronouns, prepositions, conjunctions, etc. which are not semantically salient. There are       
                     numerous stopword lists available for many, though not all, languages which can be easily adapted to the individual    
                     researcher's needs. Removing words with less than three characters may additionally remove many OCR mistakes. Both     
                     these operations have the dual advantage of yielding more reliable results while reducing the size of the dataset,     
                     thus in turn reducing the required processing power. This step can therefore hardly be considered optional in TM.      
                                                                                                                                            
                     Noise removal: Remove elements such as punctuation marks, special characters, numbers, html formatting, etc. This      
                     operation is again concerned with removing elements that may not be relevant to the text analysis and in fact          
                     interfere with it. Depending on the dataset and research question, this operation can become essential.                
                                                                                                                                            
 Author(s)                                                                                                                                  
                     Markus Binsteiner   markus@frkl.io                                                                                     
                                                                                                                                            
 Context                                                                                                                                    
                     Tags         language_processing, tokens, preprocess                                                                   
                     Labels       package: kiara_plugin.language_processing                                                                 
                     References   source_repo: https://github.com/DHARPA-Project/kiara_plugin.language_processing                           
                                  documentation: https://DHARPA-Project.github.io/kiara_plugin.language_processing/                         
                                                                                                                                            
 Operation details                                                                                                                          
                     Documentation   Preprocess lists of tokens, incl. lowercasing, remove special characers, etc.                          
                                                                                                                                            
                                     Lowercasing: Lowercase the words. This operation is a double-edged sword. It can be effective at       
                                     yielding potentially better results in the case of relatively small datasets or datatsets with a       
                                     high percentage of OCR mistakes. For instance, if lowercasing is not performed, the algorithm will     
                                     treat USA, Usa, usa, UsA, uSA, etc. as distinct tokens, even though they may all refer to the same     
                                     entity. On the other hand, if the dataset does not contain such OCR mistakes, then it may become       
                                     difficult to distinguish between homonyms and make interpreting the topics much harder.                
                                                                                                                                            
                                     Removing stopwords and words with less than three characters: Remove low information words. These      
                                     are typically words such as articles, pronouns, prepositions, conjunctions, etc. which are not         
                                     semantically salient. There are numerous stopword lists available for many, though not all,            
                                     languages which can be easily adapted to the individual researcher's needs. Removing words with less   
                                     than three characters may additionally remove many OCR mistakes. Both these operations have the dual   
                                     advantage of yielding more reliable results while reducing the size of the dataset, thus in turn       
                                     reducing the required processing power. This step can therefore hardly be considered optional in TM.   
                                                                                                                                            
                                     Noise removal: Remove elements such as punctuation marks, special characters, numbers, html            
                                     formatting, etc. This operation is again concerned with removing elements that may not be relevant     
                                     to the text analysis and in fact interfere with it. Depending on the dataset and research question,    
                                     this operation can become essential.                                                                   
                                                                                                                                            
                     Inputs                                                                                                                 
                                       field name            type      description                          Required   Default              
                                      ──────────────────────────────────────────────────────────────────────────────────────────────────    
                                       tokens_array          array     The tokens array to pre-process.     yes        -- no default --     
                                       to_lowercase          boolean   Apply lowercasing to the text.       no         False                
                                       remove_alphanumeric   boolean   Remove all tokens that include       no         False                
                                                                       numbers (e.g. ex1ample).                                             
                                       remove_non_alpha      boolean   Remove all tokens that include       no         False                
                                                                       punctuation and numbers (e.g.                                        
                                                                       ex1a.mple).                                                          
                                       remove_all_numeric    boolean   Remove all tokens that contain       no         False                
                                                                       numbers only (e.g. 876).                                             
                                       remove_short_tokens   integer   Remove tokens shorter or equal to    no         0                    
                                                                       this value. If value is <= 0, no                                     
                                                                       filtering will be done.                                              
                                       remove_stopwords      list      Remove stopwords.                    no         -- no default --     
                                                                                                                                            
                                                                                                                                            
                     Outputs                                                                                                                
                                       field name     type    description                                                                   
                                      ──────────────────────────────────────────────────────────────────────────────────────────────────    
                                       tokens_array   array   The pre-processed content, as an array of lists of strings.                   
                                                                                                                                            
                                                                                                                                            

kiara includes the most widely used text analysis pre-processing operations. Let's try some of them and take a few moments to notice how they change our text.

Let's start by removing the so-called stopwords. These are low information words such as articles, pronouns, prepositions, conjunctions, etc. which are not semantically salient. There are numerous stopword lists available for many, though not all, languages which can be easily adapted to the individual researcher's needs. Here we are defining our stopword list but do experiment yourself with adding and change some of the words.

stopword_list = ['la', 'i']

inputs = {
    'tokens_array': outputs['tokens_array'],
    'remove_stopwords' : stopword_list
}

outputs = kiara.run_job('preprocess.tokens_array', inputs=inputs)
outputs

╭──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   field          value                                                                                                                   │
│  ─────────────────────────────────────────────────────────────────────────────────────────────────────────                               │
│   tokens_array                                                                                                                           │
│                    ['RAGIONE', 'ORGANO', 'DI', 'DIFESA', 'DELLA', "ITALIANITÀ'", 'contro', '1', 'vi ...                                  │
│                    ['RAG', 'ONE', 'contro', 'vili', ',', 'camorristi', ',', 'sicari', ',', 'falsari ...                                  │
│                    ['RAGIONE', 'ORGANO', 'DI', 'DIFESA', 'DELLA', 'ITALIANITÀ', 'contro', 'vili', ' ...                                  │
│                    ['contro', 'vili', ',', 'camorristi', ',', 'sicari', ',', 'falsari', 'e', 'gli', ...                                  │
│                    ['contro', 'vili', ',', 'camorristi', ',', 'sicari', ',', 'falsari', 'e', 'gli', ...                                  │
│                    ['RAGIONA', 'ORGANO', 'DI', 'DIFESA', 'DELLA', 'ITALIANITÀ', 'contro', 'vili', ' ...                                  │
│                    ['RAGIONE', 'ORGANO', 'DI', 'DIFESA', 'DELLA', "ITALIANITÀ'", 'contro', 'vili',  ...                                  │
│                    ['RAGIONE', 'contro', 'vili', ',', '1', 'camorristi', ',', 'sicari', ',', 'falsa ...                                  │
│                    ['contro', 'vili', ',', 'camorristi', ',', 'sicari', ',', 'falsari', 'e', 'gli', ...                                  │
│                    ['RAG', 'ONE', 'ORGANO', 'DI', 'DIFESA', 'DELLA', 'ITALIANITÀ', "''", 'contro',  ...                                  │
│                    ['contro', '1', 'vili', ',', 'camorristi', ',', 'sicari', ',', 'falsari', 'e', ' ...                                  │
│                    ['■■■', 'Rassegna', '_', 'Both', 'Phones', 'ANNO', 'L', 'No', '.', '1', 'Il', 'p ...                                  │
│                    ['Rassegna', 'Jjoth', 'Phones', 'ANNO', 'L', 'No', '.', '2', 'BASTA', '!', '...' ...                                  │
│                    ['Both', 'Phones', 'ANNO', '.', 'No', '.', '2', 'BASTA', '!', '...', 'uà', 'quai ...                                  │
│                    ['■', 'jSrìt', '*', '*', 'W', '?', '?', 'iIK', '38®f-', 'i^M', 'F', '<', '5É', ' ...                                  │
│                    ['■Both', 'Phones', 'ANNO', '11', '.', 'No', '.', '5', 'LE', 'COSE', 'A', 'POSTO ...                                  │
│                                                                                                                                          │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

Great. Let's take this a bit further and try and combine two of our options in one function. In reality, we can add all the inputs together in one job, but let's start with converting everything into lowercase and removing any words with non-alphanumeric symbols.

inputs = {
    'tokens_array': outputs['tokens_array'],
    'to_lowercase' : True,
    'remove_non_alpha' : True
}

outputs = kiara.run_job('preprocess.tokens_array', inputs=inputs)
outputs

╭──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   field          value                                                                                                                   │
│  ─────────────────────────────────────────────────────────────────────────────────────────────────────────                               │
│   tokens_array                                                                                                                           │
│                    ['ragione', 'organo', 'di', 'difesa', 'della', 'contro', 'vili', 'camorristi', ' ...                                  │
│                    ['rag', 'one', 'contro', 'vili', 'camorristi', 'sicari', 'falsari', 'e', 'gli',  ...                                  │
│                    ['ragione', 'organo', 'di', 'difesa', 'della', 'italianità', 'contro', 'vili', ' ...                                  │
│                    ['contro', 'vili', 'camorristi', 'sicari', 'falsari', 'e', 'gli', 'austriacanti' ...                                  │
│                    ['contro', 'vili', 'camorristi', 'sicari', 'falsari', 'e', 'gli', 'austriacanti' ...                                  │
│                    ['ragiona', 'organo', 'di', 'difesa', 'della', 'italianità', 'contro', 'vili', ' ...                                  │
│                    ['ragione', 'organo', 'di', 'difesa', 'della', 'contro', 'vili', 'camorristi', ' ...                                  │
│                    ['ragione', 'contro', 'vili', 'camorristi', 'sicari', 'falsari', 'e', 'gli', 'au ...                                  │
│                    ['contro', 'vili', 'camorristi', 'sicari', 'falsari', 'e', 'gli', 'austriacanti' ...                                  │
│                    ['rag', 'one', 'organo', 'di', 'difesa', 'della', 'italianità', 'contro', 'vili' ...                                  │
│                    ['contro', 'vili', 'camorristi', 'sicari', 'falsari', 'e', 'gli', 'austriacanti' ...                                  │
│                    ['rassegna', 'both', 'phones', 'anno', 'l', 'no', 'il', 'perche', 'de', 'rassegn ...                                  │
│                    ['rassegna', 'jjoth', 'phones', 'anno', 'l', 'no', 'basta', 'da', 'qualche', 'te ...                                  │
│                    ['both', 'phones', 'anno', 'no', 'basta', 'uà', 'quaiene', 'tempo', 'a', 'questa ...                                  │
│                    ['jsrìt', 'w', 'iik', 'f', 'v', 'ht', 'p', 't', 'both', 'phones', 'anno', 'il',  ...                                  │
│                    ['phones', 'anno', 'no', 'le', 'cose', 'a', 'posto', 'si', 'va', 'dicendo', 'si' ...                                  │
│                                                                                                                                          │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

Now that we're happy with our prepared pre-processed texts, we can use generate.LDA.for.tokens_array to try out some topic modelling. The default for topics is set at seven, but just like the preprocess.tokens_array operation, we can play around with the options. Let's have a look.

kiara.retrieve_operation_info('generate.LDA.for.tokens_array')

                                                                                                                                            
 Documentation                                                                                                                              
                     Perform Latent Dirichlet Allocation on a tokenized corpus.                                                             
                                                                                                                                            
                     This module computes models for a range of number of topics provided by the user.                                      
                                                                                                                                            
 Author(s)                                                                                                                                  
                     Markus Binsteiner   markus@frkl.io                                                                                     
                                                                                                                                            
 Context                                                                                                                                    
                     Tags         language_processing, LDA, tokens                                                                          
                     Labels       package: kiara_plugin.language_processing                                                                 
                     References   source_repo: https://github.com/DHARPA-Project/kiara_plugin.language_processing                           
                                  documentation: https://DHARPA-Project.github.io/kiara_plugin.language_processing/                         
                                                                                                                                            
 Operation details                                                                                                                          
                     Documentation   Perform Latent Dirichlet Allocation on a tokenized corpus.                                             
                                                                                                                                            
                                     This module computes models for a range of number of topics provided by the user.                      
                                                                                                                                            
                     Inputs                                                                                                                 
                                       field name          type      description                            Required   Default              
                                      ──────────────────────────────────────────────────────────────────────────────────────────────────    
                                       tokens_array        array     The text corpus.                       yes        -- no default --     
                                       num_topics_min      integer   The minimal number of topics.          no         7                    
                                       num_topics_max      integer   The max number of topics.              no         7                    
                                       compute_coherence   boolean   Whether to compute the coherence       no         False                
                                                                     score for each model.                                                  
                                       words_per_topic     integer   How many words per topic to put in     no         10                   
                                                                     the result model.                                                      
                                                                                                                                            
                                                                                                                                            
                     Outputs                                                                                                                
                                       field name        type    description                                                                
                                      ──────────────────────────────────────────────────────────────────────────────────────────────────    
                                       topic_models      dict    A dictionary with one coherence model table for each number of topics.     
                                       coherence_table   table   Coherence details.                                                         
                                       coherence_map     dict    A map with the coherence value for every number of topics.                 
                                                                                                                                            
                                                                                                                                            

We'll stick with the default for now, and generate some topics for our text.

inputs = {
    'tokens_array' : outputs['tokens_array']
}

outputs = kiara.run_job('generate.LDA.for.tokens_array', inputs=inputs)
outputs

╭──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   field             value                                                                                                                │
│  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │
│   coherence_map                                                                                                                          │
│                       dict data     {}                                                                                                   │
│                       dict schema   {                                                                                                    │
│                                       "title": "dict",                                                                                   │
│                                       "type": "object"                                                                                   │
│                                     }                                                                                                    │
│                                                                                                                                          │
│   coherence_table   -- none/not set --                                                                                                   │
│   topic_models                                                                                                                           │
│                       dict data     {                                                                                                    │
│                                       "7": [                                                                                             │
│                                         [                                                                                                │
│                                           0,                                                                                             │
│                                           "0.031*\"di\" + 0.024*\"e\" + 0.017*\"che\" + 0.015*\"il\" + 0.013*\"non\" + 0.012*\"a\" …     │
│                                         ],                                                                                               │
│                                         [                                                                                                │
│                                           1,                                                                                             │
│                                           "0.043*\"di\" + 0.027*\"e\" + 0.025*\"che\" + 0.017*\"il\" + 0.016*\"a\" + 0.016*\"non\" …     │
│                                         ],                                                                                               │
│                                         [                                                                                                │
│                                           2,                                                                                             │
│                                           "0.023*\"di\" + 0.022*\"e\" + 0.021*\"che\" + 0.014*\"a\" + 0.011*\"per\" + 0.011*\"il\" …     │
│                                         ],                                                                                               │
│                                         [                                                                                                │
│                                           3,                                                                                             │
│                                           "0.043*\"di\" + 0.028*\"e\" + 0.026*\"che\" + 0.019*\"il\" + 0.016*\"a\" + 0.013*\"non\" …     │
│                                         ],                                                                                               │
│                                         [                                                                                                │
│                                           4,                                                                                             │
│                                           "0.025*\"di\" + 0.020*\"che\" + 0.018*\"e\" + 0.016*\"a\" + 0.013*\"un\" + 0.012*\"il\" +…     │
│                                         ],                                                                                               │
│                                         [                                                                                                │
│                                           5,                                                                                             │
│                                           "0.030*\"di\" + 0.019*\"e\" + 0.016*\"che\" + 0.016*\"il\" + 0.011*\"un\" + 0.011*\"a\" +…     │
│                                         ],                                                                                               │
│                                         [                                                                                                │
│                                           6,                                                                                             │
│                                           "0.029*\"di\" + 0.018*\"e\" + 0.013*\"che\" + 0.012*\"il\" + 0.010*\"si\" + 0.009*\"per\"…     │
│                                         ]                                                                                                │
│                                       ]                                                                                                  │
│                                     }                                                                                                    │
│                       dict schema   {                                                                                                    │
│                                       "title": "dict",                                                                                   │
│                                       "type": "object"                                                                                   │
│                                     }                                                                                                    │
│                                                                                                                                          │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

Recording and Tracing our Data¶

We've successfully downloaded, organised and pre-processed our text files, and now generated some topics for it.
Fantastic!

As we know, this means we've made lots of decisions about our research process and our data. But by using kiara, we can trace what's changed and the decisions we've made. Let's have a look!

As with the installation notebook, not much to see here yet but will be updated as changes come. Would potentially be useful with operations that require options (like the preproccessing) to know whether this has been selected or not?

topics = outputs['topic_models']

topics.lineage

generate.LDA.for.tokens_array
├── input: compute_coherence (boolean) = 5137a237-fe0f-45bd-abe3-cc84700a2bb6
├── input: num_topics_max (integer) = 75399d70-bbef-4215-b9b5-5dacfa03b2ba
├── input: num_topics_min (integer) = 75399d70-bbef-4215-b9b5-5dacfa03b2ba
├── input: tokens_array (array) = 02d01eb7-70d6-4ef7-811e-66ed25f920bb
│   └── preprocess.tokens_array
│       ├── input: remove_all_numeric (boolean) = 5137a237-fe0f-45bd-abe3-cc84700a2bb6
│       ├── input: remove_alphanumeric (boolean) = 5137a237-fe0f-45bd-abe3-cc84700a2bb6
│       ├── input: remove_non_alpha (boolean) = 8b1b93ec-a51e-4bbd-84cf-c5a1efd78e9b
│       ├── input: remove_short_tokens (integer) = f5df1b36-9884-413d-92d0-81209227f106
│       ├── input: remove_stopwords (list) = bb8a79b2-369c-46ae-a85a-2b0f85c9da22
│       ├── input: to_lowercase (boolean) = 8b1b93ec-a51e-4bbd-84cf-c5a1efd78e9b
│       └── input: tokens_array (array) = d1db365d-2e59-4455-ae05-78447e5a4268
│           └── preprocess.tokens_array
│               ├── input: remove_all_numeric (boolean) = 5137a237-fe0f-45bd-abe3-cc84700a2bb6
│               ├── input: remove_alphanumeric (boolean) = 5137a237-fe0f-45bd-abe3-cc84700a2bb6
│               ├── input: remove_non_alpha (boolean) = 5137a237-fe0f-45bd-abe3-cc84700a2bb6
│               ├── input: remove_short_tokens (integer) = f5df1b36-9884-413d-92d0-81209227f106
│               ├── input: remove_stopwords (list) = 524b5812-c4df-4ea0-a50a-d0ec5166c22f
│               ├── input: to_lowercase (boolean) = 5137a237-fe0f-45bd-abe3-cc84700a2bb6
│               └── input: tokens_array (array) = a3c66f00-7f67-483d-8018-a64714094fa4
│                   └── tokenize.texts_array
│                       ├── input: texts_array (array) = 3db76a98-88e6-45ee-8618-7c95fdf8232c
│                       │   └── table.pick.column
│                       │       ├── input: column_name (string) = 33ebce29-be63-4644-b66b-9e82a3c56236
│                       │       └── input: table (table) = bd56aae9-6289-4f3e-b3f4-edbc55310689
│                       │           └── create.table
│                       │               └── input: file_bundle (file_bundle) = 214ae90d-224b-447a-b0e8-112024a8e6d4
│                       │                   └── download.file_bundle
│                       │                       ├── input: sub_path (string) = 89c3d000-a486-4089-9592-142253d8f3d3
│                       │                       └── input: url (string) = 10d94fa6-0c3d-4d6e-a457-9fa1e7b63e99
│                       └── input: tokenize_by_word (boolean) = 8b1b93ec-a51e-4bbd-84cf-c5a1efd78e9b
└── input: words_per_topic (integer) = cd1319e3-a6ec-4d8d-99b3-34ef873e1d13

from kiara.exceptions import KiaraException
from kiara.utils.graphs import pipeline_graph_to_image

try:
    from kiara_plugin.jupyter import ensure_kiara_plugins
except:
    import sys
    print("Installing 'kiara_plugin.jupyter'...")
    !{sys.executable} -m pip install -q kiara_plugin.jupyter
    from kiara_plugin.jupyter import ensure_kiara_plugins

KIARA_PLUGINS = ["kiara_plugin.onboarding", "kiara_plugin.language_processing"]
ensure_kiara_plugins(*KIARA_PLUGINS)

from kiara.api import KiaraAPI
kiara = KiaraAPI.instance()

Extracting stages from a kiara pipeline

This notebook illustrates an important characteristic of a kiara pipeline: how it allows to extract groups of steps (called 'stages') from its structure, in different ways. I believe that this could be used to great effect in any UI we are going to write.

To understand this, let me explain a bit of context first:
The pipeline structure

Below is the configuration for the pipeline we are going to work with. It is a basic topic modeling workflow, that produces 3 result outputs:

    topic_models
    coherence_table & coherence_map (if the input to calculate coherence is set to True)

PIPELINE_CONFIG = """
pipeline_name: topic_modeling
doc: A minimal topic-modeling end-to-end workflow.
steps:
  - module_type: import.local.file_bundle
    step_id: import_text_corpus
  - module_type: create.table.from.file_bundle
    step_id: create_text_corpus
    input_links:
      file_bundle: import_text_corpus.file_bundle
  - module_type: table.pick.column
    step_id: extract_texts_column
    input_links:
      table: create_text_corpus.table
  - module_type: tokenize.texts_array
    step_id: tokenize_content
    input_links:
      texts_array: extract_texts_column.array
  - module_type: create.stopwords_list
    step_id: create_stopwords_list
  - module_type: preprocess.tokens_array
    step_id: preprocess_corpus
    input_links:
      tokens_array: tokenize_content.tokens_array
      remove_stopwords: create_stopwords_list.stopwords_list
  - module_type: generate.LDA.for.tokens_array
    step_id: generate_lda
    input_links:
      tokens_array: preprocess_corpus.tokens_array

input_aliases:
  extract_texts_column.column_name: content_column_name
  import_text_corpus.path: text_corpus_folder_path
  tokenize_content.tokenize_by_word: tokenize_by_word
  generate_lda.num_topics_min: num_topics_min
  generate_lda.num_topics_max: num_topics_max
  generate_lda.compute_coherence: compute_coherence
  generate_lda.words_per_topic: words_per_topic
  create_stopwords_list.languages: languages
  create_stopwords_list.stopwords: stopwords
  preprocess_corpus.to_lowercase: to_lowercase
  preprocess_corpus.remove_alphanumeric: remove_alphanumeric
  preprocess_corpus.remove_non_alpha: remove_non_alpha
  preprocess_corpus.remove_all_numeric: remove_all_numeric
  preprocess_corpus.remove_short_tokens: remove_short_tokens
  preprocess_corpus.remove_stopwords: remove_stopwords

output_aliases:
  generate_lda.topic_models: topic_models
  generate_lda.coherence_map: coherence_map
  generate_lda.coherence_table: coherence_table
"""

Creating the pipeline structure Python object

from kiara.models.module.pipeline import PipelineConfig

pipeline_config = PipelineConfig.from_string(PIPELINE_CONFIG)

structure = pipeline_config.structure

Visualizing the overall pipeline structure

kiara can extract many things from the pipeline configuration data, most notably how the steps are connected internally (aka: which outputs of which steps connect to which inputs of which other steps).

We can draw the structure as a graph, in different ways. The easiest to follow graph type is called 'execution_graph' and ignores inputs and outputs entirely, and only shows the steps and their overall connections.

graph_type = "execution"  # try out the other possible options: 'data-flow-simple', "data-flow", "stages"
pipeline_graph_to_image(structure, graph_type=graph_type)

Note how the 'create_stopwords_list' is the odd one out, and remember that for the rest of this notebook, whenever you see a rendered graph. This pipeline is fairly simple, and it only has one 'parallel' branch, but I think it's realistic to expect that we'll have quite a few that are more complex, with a higher level of parallelism.
Examine the other important pipeline characteristics

The execution graph is a good tool to quickly see in which order the different steps are executed within the pipeline. (Arguably) more important though, how a user can use a pipeline for their own purposes.

Let's look at the metadata that comes with a pipeline structure:

structure

pipeline
├── inputs
│   ├── text_corpus_folder_path (type: string)
│   ├── content_column_name (type: string)
│   ├── tokenize_by_word (type: boolean)
│   ├── languages (type: list)
│   ├── stopwords (type: list)
│   ├── to_lowercase (type: boolean)
│   ├── remove_alphanumeric (type: boolean)
│   ├── remove_non_alpha (type: boolean)
│   ├── remove_all_numeric (type: boolean)
│   ├── remove_short_tokens (type: integer)
│   ├── num_topics_min (type: integer)
│   ├── num_topics_max (type: integer)
│   ├── compute_coherence (type: boolean)
│   └── words_per_topic (type: integer)
├── steps
│   ├── stage 1
│   │   └── step: import_text_corpus
│   │       └── module: import.local.file_bundle
│   ├── stage 2
│   │   └── step: create_text_corpus
│   │       └── module: create.table.from.file_bundle
│   ├── stage 3
│   │   └── step: extract_texts_column
│   │       └── module: table.pick.column
│   ├── stage 4
│   │   ├── step: tokenize_content
│   │   │   └── module: tokenize.texts_array
│   │   └── step: create_stopwords_list
│   │       └── module: create.stopwords_list
│   ├── stage 5
│   │   └── step: preprocess_corpus
│   │       └── module: preprocess.tokens_array
│   └── stage 6
│       └── step: generate_lda
│           └── module: generate.LDA.for.tokens_array
└── outputs
    ├── topic_models (type: dict)
    ├── coherence_table (type: table)
    └── coherence_map (type: dict)

This shows three things:
inputs

The (pipeline) inputs a user can set, for the lifetime of a pipeline, those will never change, unless a new step is added that has one or several inputs that are not connected to other step output(s). kiara automatically creates the list of user inputs from the pipeline structure, by collecting all inputs of all steps that are not connected to an output of another step.

A pipeline creator can adjust the field name of inputs by setting it in the input_aliases section of the pipeline configuration, for example:

input_aliases:
  extract_texts_column.column_name: content_column_name
  import_text_corpus.path: text_corpus_folder_path

This is optional, but usually makes for a nicer user experience, because input field names are more meaningful.

Pipeline inputs that are not listed under input_aliases will have an auto-generated field name.
steps

A list of steps, similar to the visual representation of the execution graph above. Note how the steps are grouped into 'stages'. More on that later, it's the main thing I want to explain in this notebook.
outputs

The outputs the pipeline produces. This is a sub-set of all the outputs of all steps within the pipeline, selected by the pipeline author to indicate the 'main' outputs that are of interest in the context of a pipeline. The set of outputs is controlled by the 'output_aliases' section of the pipeline configuration, like this:

output_aliases:
  generate_lda.topic_models: topic_models
  generate_lda.coherence_map: coherence_map
  generate_lda.coherence_table: coherence_table

If no output_aliases are defined, all outputs of all steps are considered to be pipeline outputs (with auto-generated pipeline names), but in most cases that would be a bit unwieldy and also unnecessary.
Other details

We can also investigate more details about each of the steps. In most cases, this won't be necessary, but I'll include some example code here, just in case:

structure.get_step_details("preprocess_corpus")

╭─ Step: preprocess_corpus ────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                          │
│   step_id       preprocess_corpus                                                                                                        │
│   module type   preprocess.tokens_array                                                                                                  │
│   module doc    Preprocess lists of tokens, incl. lowercasing, remove special characers, etc.                                            │
│                                                                                                                                          │
│                 Lowercasing: Lowercase the words. This operation is a double-edged sword. It can be effective at yielding potentially    │
│                 better results in the case of relatively small datasets or datatsets with a high percentage of OCR mistakes. For         │
│                 instance, if lowercasing is not performed, the algorithm will treat USA, Usa, usa, UsA, uSA, etc. as distinct tokens,    │
│                 even though they may all refer to the same entity. On the other hand, if the dataset does not contain such OCR           │
│                 mistakes, then it may become difficult to distinguish between homonyms and make interpreting the topics much harder.     │
│                                                                                                                                          │
│                 Removing stopwords and words with less than three characters: Remove low information words. These are typically words    │
│                 such as articles, pronouns, prepositions, conjunctions, etc. which are not semantically salient. There are numerous      │
│                 stopword lists available for many, though not all, languages which can be easily adapted to the individual               │
│                 researcher's needs. Removing words with less than three characters may additionally remove many OCR mistakes. Both       │
│                 these operations have the dual advantage of yielding more reliable results while reducing the size of the dataset,       │
│                 thus in turn reducing the required processing power. This step can therefore hardly be considered optional in TM.        │
│                                                                                                                                          │
│                 Noise removal: Remove elements such as punctuation marks, special characters, numbers, html formatting, etc. This        │
│                 operation is again concerned with removing elements that may not be relevant to the text analysis and in fact            │
│                 interfere with it. Depending on the dataset and research question, this operation can become essential.                  │
│   inputs                                                                                                                                 │
│                   field name                            type      description                            Required   Default              │
│                  ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────    │
│                   preprocess_corpus.tokens_array        array     The tokens array to pre-process.       yes        -- no default --     │
│                   preprocess_corpus.to_lowercase        boolean   Apply lowercasing to the text.         no         False                │
│                   preprocess_corpus.remove_alphanumer   boolean   Remove all tokens that include         no         False                │
│                   ic                                              numbers (e.g. ex1ample).                                               │
│                   preprocess_corpus.remove_non_alpha    boolean   Remove all tokens that include         no         False                │
│                                                                   punctuation and numbers (e.g.                                          │
│                                                                   ex1a.mple).                                                            │
│                   preprocess_corpus.remove_all_numeri   boolean   Remove all tokens that contain         no         False                │
│                   c                                               numbers only (e.g. 876).                                               │
│                   preprocess_corpus.remove_short_toke   integer   Remove tokens shorter or equal to      no         0                    │
│                   ns                                              this value. If value is <= 0, no                                       │
│                                                                   filtering will be done.                                                │
│                   preprocess_corpus.remove_stopwords    list      Remove stopwords.                      no         -- no default --     │
│                                                                                                                                          │
│   outputs                                                                                                                                │
│                   field name                       type    description                                                                   │
│                  ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────    │
│                   preprocess_corpus.tokens_array   array   The pre-processed content, as an array of lists of strings.                   │
│                                                                                                                                          │
│                                                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

Note how here the field names are assembled from the id of the step they belong to, and the field name of the input in the underlying module. This can be considered the 'address' of a value within a pipeline. The actual data of each of the fields will change over time, as a user sets different inputs, but this field name will stay the same, and can always be used to access the current value at this point in the pipeline.
Pipeline stages

Now the important bit. Each step in a pipeline can only be executed when all of its inputs are set. This is obvious for the inputs of that step that are set by a user (in which case we need to wait for the user). If the input is connected to an output of another step though, this means that the other steps needs to have finished processing before this one can be kicked off. Steps that are executed in the same 'level' as other steps (meaning they need to have waited for the same dependency steps) can be grouped into what I call a 'stage'.

There are multiple ways how to group the steps of a pipeline into stages. The most obvious one would be to give each step its own stage, which for our example would look like this:

pipeline_graph_to_image(structure, graph_type="stages", stages_extraction_type="stage_per_step")

This is the only strategy that will actually give us a non-linear graph ("Stage 5" is an extra leaf node -- remember that in the following examples and see how we go through the stages one by one there). This is important to note, because if we have a node based UI, this is the only strategy that makes full use of it. All the following ones will be just a linear succession, one node after the other, and displaying this as a node-based graph makes only very limited sense.

If we think about automatically rendering an UI for the user to provide inputs, each "Stage: X" node would represent a step where the user needs to select the inputs that feed into it, and click 'Process' to get to the next step. The 'one-stage-per-step' strategy will give us the most detailed information about the flow of the data within the pipeline, but it will also be the most confusing (more nodes and connection mean a busier UI) and it will take up the most space.

The other extreme in terms of splitting up a pipeline would be to just create a single stage, and throw all steps into it:

pipeline_graph_to_image(structure, graph_type="stages", stages_extraction_type="single_stage")

Imagining this as a UI, a user would set all inputs at the same time, and re-compute the whole pipeline every time the user changed any of the inputs, and clicks 'Process'.

Both of those strategies have their advantages, but there are other strategies we can employ. There are two I call 'early' and 'late', who are very similar, but have a subtle difference: they schedule steps as early as possible, or as early as necessary. Both of them go through all steps, and figure out which ones can be processed at the same time (because their requirements will be satisfied at the same time), but 'late' will place a step in the last possible layer before it's result is needed, whereas 'early' places it as soon as possible (which, in practice only really applies for steps that require user input, and they will be added to the first stage, always). 'late' makes more sense if we want to auto-generate input forms, because that way user inputs are only asked when they are actually used, and not at the beginning, even though their input will be used 3 stages later, for example.

Here are the two graphs:

pipeline_graph_to_image(structure, graph_type="stages", stages_extraction_type="late")

pipeline_graph_to_image(structure, graph_type="stages", stages_extraction_type="early")

It's a subtle difference, but check out how the 'languages' and 'stopword_lists' inputs are requested in different stages.

I haven't implemented other strategies to split up a pipeline into stages yet, but I want to have at least one more: a variation of 'late', where steps that don't have any user inputs (only connections to other step outputs) are merged with the previous stage. Because, if there is no user input, we can just process the step after we processed the previous one, without having to wait for any user input.

Also, I want to add an option for pipeline creators to group steps into stages that make sense from a 'research' perspective, meaning the creator will manually hint at the best way to present the order of steps to a user.

One of the nice things about the 'late' strategy is that it (usually, not always) 'balances' and distributes pipeline inputs across different stages, which means none of the input forms for a stage has an overwhelming amount of inputs. Also, the inputs are typically 'thematically' related. And, since it's an automated process, it does not require any work on the part of the pipeline creator. Of course, the creator can decide to manually split up a specific pipeline, which would be a fallback for the case where the auto-generation fails to produce a nice result for some reason or other.

I'm not sure if any of this makes sense, but I think we'll have a hard time if we only have a single option to present a pipeline structure/order to users. The pipelines we'll be working with will differ a lot in terms of overall complexity and size, and unless we want to hand-craft a UI for all of them, I think the only option we have is to auto-generate one or several input forms per pipeline. Esp. large pipelines would become very unwieldy to display in a UI, even with zooming, scrolling. Stages will translate a branched execution network into a linear one (one stage after the other), which would be more in line with what users are used to. But, as I said, we would not lose the option to display the actual execution graph either.

An input form (encompassing the user inputs of a stage) would map to a node in your figma wireframe. I think you already unwittingly used stages for that, because you took your example from my 'static' streamlit app, which does.

If we do it like I propose, we could easily have a menu or set of buttons that lets users switch between different views of the same pipeline.

And the nice thing is, we'd only need to create the code to auto-generate such a form once. We'd feed in the information of all stages into a corresponding amount of forms (or nodes). If we want to change the way stages are split up, we just feed in 'broader' or 'slimmer' stages, and the generated UI would have less/more nodes with more/less input fields in each. If one or several user inputs are already set in a session, it wouldn't matter and would still display the current state of each of them, since the input field name would be the same in each of the options (since in all cases, pipeline inputs always live outside of stages).

Another thing I haven't mentioned is that we'll of course also have a lot more data and metadata we can show in the nodes (or connection between nodes), like previews, data types, documentation for each field, etc. What I outline is really only the simplest way I could think of to explain this implementation approach.


kiara plugin: core-types¶

This package contains a set of commonly used/useful modules, pipelines, types and metadata schemas for Kiara.
Description¶

Core data types for kiara.
Package content¶
data_types¶

    integer: An integer.

    float: A float.

    date: A date.

    list: A list.

    kiara_model: A model.

    kiara_model_list: A model.

module_types¶

    string.filters: -- n/a --

    load.kiara_model: -- n/a --

    load.kiara_model_list: -- n/a --

    logic.not: Negates the input.

    logic.and: Returns 'True' if both inputs are 'True'.

    logic.or: Returns 'True' if one of the inputs is 'True'.

    date.extract_from_string: Extract a date object from a string.

    date.check_range: Check whether a date falls within a specified date range.

    list.contains: Check whether an element is in a list.

    string.match_regex: Match a string using a regular expression.

    string.replace: Replace a string if it matches a key in a mapping dictionary.

kiara_model_types¶

    kiara_model_schema_metadata: File stats.

    kiara_model_list_metadata: File stats.

operations¶

    date.check_range: Check whether a date falls within a specified date range.

    date.extract_from_string: Extract a date object from a string.

    deserialize.kiara_model.as.python_object: -- n/a --

    deserialize.kiara_model_list.as.python_object: -- n/a --

    list.contains: Check whether an element is in a list.

    logic.and: Returns 'True' if both inputs are 'True'.

    logic.nand: Returns 'False' if both inputs are 'True'.

    logic.nor: Returns 'True' if both inputs are 'False'.

    logic.not: Negates the input.

    logic.or: Returns 'True' if one of the inputs is 'True'.

    logic.xor: Returns 'True' if exactly one of it's two inputs is 'True'.

    string_filter.tokens: -- n/a --


what's a kiara module?

explain this both high level - what does a module mean to a user? some collection of things kiara can do and at a low level - a module is a python class which subclasses something?

CB: Modules are what you write to create operations. There can be one or multiple modules in one .py document (which allows you to define imported packages and author/desciption metadata). A module will define the inputs and outputs required for an operation; modules are therefore the 'back-end' of the operation, which gets called in the interface/IDE/CLI. Essentially they are the same thing, in two different terms.

MB: On a technical level, a module is a python class that subclasses the kiara.modules.KiaraModule base class. If someone wants to implement their own module, they have to inherit from this class, and implement 3 methods:

    def create_inputs_schema(self): returns the input schema for this module, this is what the user will be asked to provide

    def create_inputs_schema(self): returns the output schema for this module, this describes the data that will be returned by this module (can contain one or several output fields)

    def process(inputs, outputs): this is where the actual processing happens, the inputs and outputs are passed in as instances of ValueMap, and the module is expected to read the inputs, do something with them, and write the results to the outputs

In addition, modules can have a configuration (to be able to configer them to behave in a specific way -- which for example could change the output of the create_input_schema and create_output_schema functions). A module name in combination with its configuration (dict) is called an 'operation' (see below).

Relevant links:

    https://dharpa.org/kiara.documentation/latest/extending_kiara/creating_modules/the_basics/

what's a kiara plugin?

again, high level and low level explanation. link out to how to make a plugin tutorial

CB: A kiara 'package': contains all the modules associated with a particular mode of analysis (topic modelling, network analysis etc.) with relevant documentation and, where included, data. Allows people to focus on just the bits they want to use, without downloading everything if they don't want to. Will also allow users to have their own plugin, where they can store all the additional modules that they have created.

MB: a plugin is a Python package that can be published to pypi.org or as conda package. It can be installed into a Python/Conda environment like any other package, and extends kiara functionality in several ways:

    add data types: in most cases, plugins won't contain new data types. But in some cases they might (for example the 'network_analysis` plugin adds the 'network_data' data type)
    add modules: this is the main use case for a plugin, to contain modules that can do specific processing tasks the plugin developer wants their users to be able to do
    add lower level Python models or functionality: in most cases a plugin is a collection of data-types/modules that are related in some way, mostly by belonging to the same area of research (language_processing, network_analysis). But a plugin can also be created for a specific use case or frontend technology (e.g. a plugin that would implement an interactive TUI client or a REST API, or functionality, data-types and/or modules for a mini app like the tropy one)

On a technical level, it is recommended to use the existing cookiecutter kiara plugin template: https://github.com/DHARPA-Project/kiara_plugin.develop

To create a plugin instance, (at the moment -- not sure if we should make this a bit easier) you would use cruft:

cruft create https://github.com/DHARPA-Project/kiara_plugin.develop.git

what's a kiara pipeline?

a pipeline isn't a workflow? link out to pipeline tutorial

CB: A collection of modules ordered together (like a defined function) - allows users to run a series of functions/operations all together in one go, rather than step by step.

MB: A pipeline is a DAG (Directed Acyclic Graph), where each node is an operation (called 'step' within a pipeline), and the edges are the input-output connections between those. Pipelines are declarative, so the user would create a data structure to describe the pipeline, and kiara would then parse and assemble the internal representation, and calculate things like execution order, which inputs a user needs to provide, and what output a pipeline produces. For kiaras purposes, a pipeline is also an operation (using the 'pipeline' kiara module, and the declarative pipeline structure as module config).

Relevant links:

    https://dharpa.org/kiara.documentation/latest/extending_kiara/pipelines/assemble_pipelines/

what's a workflow?

we kinda use this to mean 2 things, the steps a researcher does to get some results from some data, and a specific kind of file? Some of this information also relevant?, maybe we even want a whole page on workflows as a concept?

CB: The process start to end; can be descriptive (aka qualitative understanding of the research process) or literal in terms of the entire coding process. In this second sense, it may be synonymous with pipeline if the pipeline contains all the steps needed for the entire process. It may also be a combination of individual operations and a pipeline, or any conceivable use of kiara start to finish.

MB: This is my personal use of the word, so not sure how we should define that 'officially'. A workflow (or workflow session) is everything that happens between the point a user arrives with an identified piece of input data, and leaves with a computational result that is meaningful in answering one or several research questions related to that input dataset. This includes:

    the input dataset
    the pipeline (either a static one, or one that 'grows' over time in a dynamic way)
    any parameters/other inputs that are used to configure the pipeline
    the intermediate results -- all dependent on the inputs, so can change over time
    the final result(s) -- all dependent on the inputs, so can change over time

what's a data type?

steps (/operations??) only work on specific data types, they can be something simple like a boolean (true/false) or a string, or complicated like a table with a specific structure

technically, they are a python class that subclasses something??

CB: a bit like string, list, integer etc. in python; essentially same as python data types, though also with kiara specific ones (like network data)

MB: on a technical level a kiara data type wraps a 'well-defined' Python data structure, and implements specific features kiara needs to be able to call on for each supported data type. This includes:

    serialization/deserialization
    'pretty printing'/'data preview'
    hashing
    documentation (that can be displayed to end-users so they understand the characteristics of the data type)

kiara data types inherit from kiara.data_types.DataType, and like modules they can optionally be configured. Creating a custom data type is not documented yet, I'll do that once we have a first draft version of our docs ready so I can link to relevant other topics, since it's the most difficult thing I'd expect non-core developers having to do (very seldomly).
what's an operation?

CB: A function; 'list operations' gives you all the possible kiara functions, or modules.

MB: As stated above, an operation is the name of the kiara module, combined with its module configuration (dict). An operation can always be identified by its hash, which is built using the module name and module configuration dictionary. In most cases, users will probably deal with operations instead of modules, since what we offer on frontends will likely be pre-configured modules. It is possible to dynamically create operations at runtime for users, but that would entail harder to user frontends and some unintuitiveness, which is the main reasons the 'operations' abstractions (and operation ids) exist.
what's a model?

MB: Internal Python object schema that is used very liberally within kiara. Users won't really come in contact with them often (if at all). In some advanced cases other developers might encounter them, I'd prefer to document those instances on a case by case basis, but for the glossary this should be enough I think.
What's the data store?

maybe this wants a whole page, link also to architecture and reproducible research/lineage. What does it mean to onboard data into kiara, how does it track lineage etc

MB: The internal place where kiara stores and manages data the user wants to keep.

Long answer here: https://github.com/DHARPA-Project/kiara-website/issues/12
what's kiara context

MB: A sort of 'project-based' environment, containing a specific data store. Is used to group together data and jobs (operations on that data) that the user wants to keep together for one reason or another.


How kiara does versioning
Last updated: 2024-03-12

    how does versioning work for kiara core, how do I know if I can/should update
        At the moment, while versioning is in alpha (0.x.y), assume that plugins at version 0.X will work (only) with kiara core version 0.X - ie if you are running kiara core 0.5.x, your plugins all also need to be 0.5.x

    how does versioning work for plugins? how do i check what's changed between versions, how do I know if I can/should update

    is there also versioning of data types, operations, modules? Is this independent of plugins? How do I know what version I'm using, if I can/should update, what python package I need to update to to do that

    are versions of everything visible in your data lineage?

    are/how are versions represented when you have a pipeline or workflow file?

    what does all this mean for plugin authors and how they should version their things? Are there utilities in the template for bumping a version, writing a changelog etc?

Digital History: The Story So Far

As the field of Digital History continues to grow, so too does the number of tools, software, and coding packages built to support and advance digital history in practice. The range of this is at times staggering: from applications suitable for the most novice of digital historians, to coding guides and tools for those working to more nuanced and specific end-goals, researchers have an ability to engage with their materials in digital, quantitative ways on a never before seen level. Often we focus primarily on the new findings that come of out this new way of approaching research - but what about the ways we get to those findings?

Regardless of the type of digital analysis being performed or even the software being used, the process is normally the same: input some data, click some buttons or run some code (perhaps a couple of times over to edit the code and adjust the outcomes), and get your end result.

You've got an outcome - but do you know how you've got from a to b? It's likely that variables have been written over several times along the way, and the data has changed from one type to another, been filtered or added to, and decision after decision has been made without necessarily knowing it. Each little adjustment or re-run of the code has contributed to the research process and is critical to the end output or findings.

But how do we keep track?
Hello kiara.

    Introducing kiara, a new data orchestration tool.

This new tool incorporates a number of different digital research approaches, but most importantly documents and encourages users to critically reflect on the process and use of DH tools. In doing so, the software opens up the black box of digital research, moving away from button-clicking software and making digital research more transparent and open to commentary, replicability, and criticism. It not only makes the research process itself more open, allowing users to visualise and examine the individual steps from start to finish, but also allows them to track changes to the data itself, something that is either imperceptible or, perhaps more importantly, forgotten about in traditional digital history methods and tools. kiara therefore acts as a 'wrapper' to this digital reserach process, tracking and documenting the steps and changes to the data, producing a veritable map of the journey that can be reflected upon and shared.

This tutorial will walk you through installation of kiara in Jupyter Notebooks, and some basic but essential functions that can be built on in further notebooks. At the end, it will showcase the data lineage, having tracked the research process and changes to the data from start to finish.

This tutorial requires you to know python and SQL.
Installation

Before running this notebook, you need to install Kiara and its dependencies in a virtual environment (such as Conda) by running the following command in your terminal:

pip install git+https://github.com/DHARPA-Project/kiara_plugin.dh_tagung_2023

Running kiara

In order to use kiara, we need to create a KiaraAPI instance. An API allows us to control and interact with kiara and its functions. In kiara this also allows us to get more information about what can be done (and what is happening) to our data as we go. For more on what can be done with the API, see the kiara API documentation here.

from kiara.api import KiaraAPI

kiara = KiaraAPI.instance()

Now we have an API in place, we can get more information about what we can do in kiara. Let's start by asking kiara to list all the operations that are included with the plugins we just installed.

kiara.list_operation_ids()

['assemble.network_data.from.files',
'assemble.network_data.from.tables',
'compute.modularity_group',
'create.betweenness_rank_list',
'create.closeness_rank_list',
'create.cut_point_list',
'create.database.from.file',
'create.database.from.file_bundle',
'create.database.from.table',
'create.degree_rank_list',
'create.eigenvector_rank_list',
'create.network_data.from.file',
'create.table.from.file',
'create.table.from.file_bundle',
'date.check_range',
'date.extract_from_string',
'download.file',
'download.file_bundle',
'export.file.as.file',
'export.network_data.as.csv_files',
'export.network_data.as.graphml_file',
'export.network_data.as.sql_dump',
'export.network_data.as.sqlite_db',
'export.table.as.csv_file',
'extract.date_array.from.table',
'file_bundle.pick.file',
'file_bundle.pick.sub_folder',
'import.database.from.local_file_path',
'import.file',
'import.file_bundle',
'import.local.file',
'import.local.file_bundle',
'import.network_data.from.local_file_paths',
'import.table.from.local_file_path',
'import.table.from.local_folder_path',
'list.contains',
'logic.and',
'logic.nand',
'logic.nor',
'logic.not',
'logic.or',
'logic.xor',
'network_data.extract_largest_component',
'onboard.gml_file',
'onboard.zenodo_record',
'parse.date_array',
'query.database',
'query.table',
'string_filter.tokens',
'table.pick.column',
'table_filter.drop_columns',
'table_filter.select_columns',
'table_filter.select_rows']

Downloading Files

Great, now we know the different kind of operations we can use with kiara. Let's start by introducing some files to our notebook, using the download.file function.

First we want to find out what this operation does, and just as importantly, what inputs it needs to work.

kiara.retrieve_operation_info('download.file')

Author(s)           Markus Binsteiner   markus@frkl.io Context           Tags         onboarding                                                                                                
  Labels     package: kiara_plugin.onboarding                                                                          
  References source_repo: https://github.com/DHARPA-Project/kiara_plugin.onboardingdocumentation: https://DHARPA-Project.github.io/kiara_plugin.onboarding/Operation details Documentation   Download a single file from a remote location.                                                         
   The result of this operation is a single value of type 'file' (basically an array of raw bytes),       
   which can then be used in other modules to                                                             
   create more meaningful data structures.                                                                
  Inputs         field name  type    description                                   Required  Default             ──────────────────────────────────────────────────────────────────────────────────────────────────    
  url          string   The url of the file to download.               yes        -- no default --     
  file_name    string   The file name to use for the downloaded        no         -- no default --     
            file.                                                                          
  Outputs        field name         type  description                                                              ──────────────────────────────────────────────────────────────────────────────────────────────────    
  file                file   The downloaded file.                                                      
  download_metadata   dict   Metadata about the download.                                              
 

So from this, we know that download.file will download a single file from a remote location for us to use in kiara.
We need to give the function a url and, if we want, a file name. These are the inputs.
In return, we will get the file and metadata about the file as our outputs.

Let's give this a go using some kiara sample data.

First we define our inputs, then use kiara.run_job with our chosen operation, download.file, and save this as our outputs.

inputs = {
        "url": "https://raw.githubusercontent.com/DHARPA-Project/kiara.examples/main/examples/data/network_analysis/journals/JournalNodes1902.csv",
        "file_name": "JournalNodes1902.csv"
}

outputs = kiara.run_job('download.file', inputs=inputs)

Let's print out our outputs and see what that looks like.

outputs

╭──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮ │                                                                                                                                          │ │ field              value                                                                                                            │ │  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │ │ download_metadata │ │   dict data     {│ │"response_headers": [│ │    {│ │"connection": "keep-alive",│ │"content-length": "7436",│ │"cache-control": "max-age=300",│ │"content-security-policy": "default-src 'none'; style-src 'unsafe-inline'; sandbox",│ │"content-type": "text/plain; charset=utf-8",│ │"etag": "W/"641ae85d69e5836d27ea8906aba0a33b48b0f3ed0ed4c40d21a07fccebdd238d"",│ │"strict-transport-security": "max-age=31536000",│ │"x-content-type-options": "nosniff",│ │"x-frame-options": "deny",│ │"x-xss-protection": "1; mode=block",│ │"x-github-request-id": "5428:E056:DE6D8:E58DB:6527E802",│ │"content-encoding": "gzip",│ │"accept-ranges": "bytes",│ │"date": "Thu, 12 Oct 2023 12:35:15 GMT",│ │"via": "1.1 varnish",│ │"x-served-by": "cache-fra-eddf8230131-FRA",│ │"x-cache": "MISS",│ │"x-cache-hits": "0",│ │"x-timer": "S1697114115.825867,VS0,VE179",│ │"vary": "Authorization,Accept-Encoding,Origin",│ │"access-control-allow-origin": "*",│ │"cross-origin-resource-policy": "cross-origin",│ │"x-fastly-request-id": "aa72f9a416f0a1fb259a8f6a986059d83a8119ff",│ │"expires": "Thu, 12 Oct 2023 12:40:15 GMT",│ │"source-age": "0"│ │    }│ │  ],│ │"request_time": "2023-10-12T12:35:14.923561+00:00"│ │}│ │   dict schema   {│ │"title": "dict",│ │"type": "object"│ │}│ ││ │ file               ﻿Id,Label,JournalType,City,CountryNetworkTime,PresentDayCountry,Latitude,Longitude,Language                      │ │ 75,Psychiatrische en neurologische bladen,specialized: psychiatry and                                            │ │ neurology,Amsterdam,Netherlands,Netherlands,52.366667,4.9,Dutch                                                  │ │ 36,The American Journal of Insanity,specialized: psychiatry and neurology,Baltimore,United States,United         │ │ States,39.289444,-76.615278,English                                                                              │ │ 208,The American Journal of Psychology,specialized: psychology,Baltimore,United States,United                    │ │ States,39.289444,-76.615278,English                                                                              │ │ 295,Die Krankenpflege,specialized: therapy,Berlin,German Empire,Germany,52.52,13.405,German                      │ │ 296,Die deutsche Klinik am Eingange des zwanzigsten Jahrhunderts,general medicine,Berlin,German                  │ │ Empire,Germany,52.52,13.405,German                                                                               │ │ 300,Therapeutische Monatshefte,specialized: therapy,Berlin,German Empire,Germany,52.52,13.405,German             │ │ 1,Allgemeine Zeitschrift für Psychiatrie,specialized: psychiatry and neurology,Berlin,German                     │ │ Empire,Germany,52.52,13.405,German                                                                               │ │ 7,Archiv für Psychiatrie und Nervenkrankheiten,specialized: psychiatry and neurology,Berlin,German               │ │ Empire,Germany,52.52,13.405,German                                                                               │ │ 10,Berliner klinische Wochenschrift,general medicine,Berlin,German Empire,Germany,52.52,13.405,German            │ │ 13,Charité Annalen,general medicine,Berlin,German Empire,Germany,52.52,13.405,German                             │ │ 21,Monatsschrift für Psychiatrie und Neurologie,specialized: psychiatry and neurology,Berlin,German              │ │ Empire,Germany,52.52,13.405,German                                                                               │ │ 29,Virchows Archiv,"specialized: anatomy, physiology and pathology",Berlin,German                                │ │ Empire,Germany,52.52,13.405,German                                                                               │ │ 31,Zeitschrift für pädagogische Psychologie und Pathologie,specialized: psychology and pedagogy,Berlin,German    │ │ Empire,Germany,52.52,13.405,German                                                                               │ │ 42,Vierteljahrsschrift für gerichtliche Medizin und öffentliches Sanitätswesen,"specialized: anthropology,       │ │ criminology and forensics",Berlin,German Empire,Germany,52.52,13.405,German                                      │ │ 47,Centralblatt für Nervenheilkunde und Psychiatrie,specialized: psychiatry and neurology,Berlin,German          │ │ Empire,Germany,52.52,13.405,German                                                                               │ │ 50,Russische medicinische Rundschau,general medicine,Berlin,German Empire,Germany,52.52,13.405,German            │ │ 76,Deutsche Aerzte-Zeitung,general medicine,Berlin,German Empire,Germany,52.52,13.405,German                     │ │ 87,Monatsschrift für Geburtshülfe und Gynäkologie,specialized: gynecology,Berlin,German                          │ │ Empire,Germany,52.52,13.405,German                                                                               │ │ 108,Archiv für klinische Chirurgie,specialized: surgery,Berlin,German Empire,Germany,52.52,13.405,German         │ │ 113,Zeitschrift für klinische Medicin,general medicine,Berlin,German Empire,Germany,52.52,13.405,German          │ │ 159,Deutsche militärärztliche Zeitschrift,specialized: military medicine,Berlin,German                           │ │ Empire,Germany,52.52,13.405,German                                                                               │ │ 162,Jahresbericht über die Leistungen und Fortschritte auf dem Gebiete der Neurologie und                        │ │ Psychiatrie,specialized: psychiatry and neurology,Berlin,German Empire,Germany,52.52,13.405,German               │ │ 192,Ärztliche Sachverständigen-Zeitung,general medicine,Berlin,German Empire,Germany,52.52,13.405,German         │ │ 198,Zeitschrift für die Behandlung Schwachsinniger und Epileptischer,specialized: psychiatry and                 │ │ neurology,Berlin,German Empire,Germany,52.52,13.405,German                                                       │ │ 258,Der Pfarrbote,news media,Berlin,German Empire,Germany,52.52,13.405,German                                    │ │ 71,Correspondenz-Blatt für Schweizer Aerzte,general                                                              │ │ medicine,Bern,Switzerland,Switzerland,46.948056,7.4475,German                                                    │ │ 6,Archiv für mikroskopische Anatomie,"specialized: anatomy, physiology and pathology",Bonn,German                │ │ Empire,Germany,50.733333,7.1,German                                                                              │ │ 203,The Journal of Abnormal Psychology,specialized: psychology,Boston,United States,United                       │ │ States,42.358056,-71.063611,English                                                                              │ │ 273,"Correspondenz-Blatt der Deutschen Gesellschaft für Anthropologie, Ethnologie und                            │ │ Urgeschichte","specialized: anthropology, criminology and forensics",Braunschweig,German                         │ │ Empire,Germany,52.266667,10.516667,German                                                                        │ │ 303,Policlinique de Bruxelles,general medicine,Brussels,Belgium,Belgium,50.85,4.35,French                        │ │ 306,Annales de la Société Belge de Neurologie,specialized: psychiatry and                                        │ │ neurology,Brussels,Belgium,Belgium,50.85,4.35,French                                                             │ │ 19,Journal de neurologie,specialized: psychiatry and neurology,Brussels,Belgium,Belgium,50.85,4.35,French        │ │ 25,"Revue internationale d'électrothérapie, de physiologie, de médecine, de chirurgie, d'obstétrique, de         │ │ thérapeutique, de chimie et de pharmacie",general medicine,Brussels,Belgium,Belgium,50.85,4.35,French            │ │ 35,Bulletin de la Société de Médecine Mentale de Belgique,specialized: psychiatry and                            │ │ neurology,Brussels,Belgium,Belgium,50.85,4.35,French                                                             │ │ ...                                                                                                              │ ││ │ ...                                                                                                              │ │                                                                                                                                          │ ╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

Great! We've successfully downloaded the file, and we can see there's lots of information here.

At the moment, we're most interested in the file output. This contains the actual contents of the file that we have just downloaded.

Let's separate this out and store it in a separate variable for us to use.

downloaded_file = outputs['file']

New Formats: Creating and Converting

What next? We could transform the downloaded file contents into a different format.
Let's use the operation list earlier, and look for something that allows us to create something out of our new file.

kiara.list_operation_ids('create')

['create.betweenness_rank_list',
'create.closeness_rank_list',
'create.cut_point_list',
'create.database.from.file',
'create.database.from.file_bundle',
'create.database.from.table',
'create.degree_rank_list',
'create.eigenvector_rank_list',
'create.network_data.from.file',
'create.table.from.file',
'create.table.from.file_bundle']

Our file was orginally in a CSV format, so let's make a table using create.table.from.file.

Just like when we used download.file, we can double check what this does, and what inputs and outputs this involves.

This time, we're also going to use a variable to store the operation in - this is especially handy if the operation has a long name, or if you want to use the same operation more than once without retyping it.

op_id = 'create.table.from.file'

kiara.retrieve_operation_info(op_id)

Author(s)           Markus Binsteiner   markus@frkl.io Context           Tags         tabular                                                                                                   
  Labels     package: kiara_plugin.tabular                                                                             
  References source_repo: https://github.com/DHARPA-Project/kiara_plugin.tabulardocumentation: https://DHARPA-Project.github.io/kiara_plugin.tabular/Operation details Documentation   Create a table from a file, trying to auto-determine the format of said file.                          
  Inputs         field name           type     description                         Required  Default             ──────────────────────────────────────────────────────────────────────────────────────────────────    
  file                  file      The source value (of type 'file').   yes        -- no default --     
  first_row_is_header   boolean   Whether the first row of the file    no         -- no default --     
             is a header row. If not provided,                                    
             kiara will try to auto-determine.                                    
  Outputs        field name  type   description                                                                    ──────────────────────────────────────────────────────────────────────────────────────────────────    
  table        table   The result value (of type 'table').                                             
 

Great, we have all the information we need now.

Let's go again.

First we define our inputs, that is the downloaded file we saved earlier as well as telling kiara that the first row should be read as a header.

Then use kiara.run_job with our chosen operation, this time stored as op_id.

Once this is saved as our outputs, we can print it out.

inputs = {
"file": downloaded_file,
"first_row_is_header": True
}

outputs = kiara.run_job(op_id, inputs=inputs)

outputs

╭──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮ │                                                                                                                                          │ │ field  value                                                                                                                        │ │  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │ │ table │ │ Id   Label           JournalType     City       CountryNetworkT  PresentDayCoun  Latitude   Longitude   Language │ │  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │ │   75    Psychiatrische   specialized: p   Amsterdam   Netherlands       Netherlands      52.366667   4.9          Dutch      │ │   36    The American J   specialized: p   Baltimore   United States     United States    39.289444   -76.615278   English    │ │   208   The American J   specialized: p   Baltimore   United States     United States    39.289444   -76.615278   English    │ │   295   Die Krankenpfl   specialized: t   Berlin      German Empire     Germany          52.52       13.405       German     │ │   296   Die deutsche K   general medici   Berlin      German Empire     Germany          52.52       13.405       German     │ │   300   Therapeutische   specialized: t   Berlin      German Empire     Germany          52.52       13.405       German     │ │   1     Allgemeine Zei   specialized: p   Berlin      German Empire     Germany          52.52       13.405       German     │ │   7     Archiv für Psy   specialized: p   Berlin      German Empire     Germany          52.52       13.405       German     │ │   10    Berliner klini   general medici   Berlin      German Empire     Germany          52.52       13.405       German     │ │   13    Charité Annale   general medici   Berlin      German Empire     Germany          52.52       13.405       German     │ │   21    Monatsschrift    specialized: p   Berlin      German Empire     Germany          52.52       13.405       German     │ │   29    Virchows Archi   specialized: a   Berlin      German Empire     Germany          52.52       13.405       German     │ │   31    Zeitschrift fü   specialized: p   Berlin      German Empire     Germany          52.52       13.405       German     │ │   42    Vierteljahrssc   specialized: a   Berlin      German Empire     Germany          52.52       13.405       German     │ │   47    Centralblatt f   specialized: p   Berlin      German Empire     Germany          52.52       13.405       German     │ │   50    Russische medi   general medici   Berlin      German Empire     Germany          52.52       13.405       German     │ │   ...   ...              ...              ...         ...               ...              ...         ...          ...        │ │   ...   ...              ...              ...         ...               ...              ...         ...          ...        │ │   277   L'arte medica    general medici   Turin       Italy             Italy            45.079167   7.676111     Italian    │ │   288   Allgemeine öst   specialized: a   Vienna      Austro-Hungaria   Austria          48.2        16.366667    German     │ │   18    Jahrbücher für   specialized: p   Vienna      Austro-Hungaria   Austria          48.2        16.366667    German     │ │   30    Wiener klinisc   general medici   Vienna      Austro-Hungaria   Austria          48.2        16.366667    German     │ │   44    Wiener klinisc   general medici   Vienna      Austro-Hungaria   Austria          48.2        16.366667    German     │ │   45    Wiener medizin   general medici   Vienna      Austro-Hungaria   Austria          48.2        16.366667    German     │ │   72    Wiener medizin   general medici   Vienna      Austro-Hungaria   Austria          48.2        16.366667    German     │ │   81    Monatsschrift    general medici   Vienna      Austro-Hungaria   Austria          48.2        16.366667    German     │ │   93    Klinisch-thera   general medici   Vienna      Austro-Hungaria   Austria          48.2        16.366667    German     │ │   151   Medicinisch-ch   specialized: s   Vienna      Austro-Hungaria   Austria          48.2        16.366667    German     │ │   199   Der Militärazt   specialized: m   Vienna      Austro-Hungaria   Austria          48.2        16.366667    German     │ │   261   Медицинская бе   general medici   Voronezh    Russian Empire    Russia           51.671667   39.210556    Russian    │ │   77    Medycyna         general medici   Warsaw      Russian Empire    Poland           52.233333   21.016667    Polish     │ │   150   Kronika Lekars   general medici   Warsaw      Russian Empire    Poland           52.233333   21.016667    Polish     │ │   86    Grenzfragen de   specialized: p   Wiesbaden   German Empire     Germany          50.0825     8.24         German     │ │   206   Ergebnisse der   specialized: a   Wiesbaden   German Empire     Germany          50.0825     8.24         German     │ ││ │                                                                                                                                          │ ╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

This has done exactly what we wanted, and shown the contents from the downloaded file as a table. But we are also interested in some general (mostly internal) information and metadata, this time for the new table we have just created, rather than the original file itself.

Let's have a look.

outputs_table = outputs['table']

outputs_table

 value_id            36df833f-0dbe-4683-b912-42c73df877ac                                                                                  
  kiara_id            441206f8-e5b4-43d1-b198-d4741dc64e04                                                                                  
 ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────── data_type_info     data_type_name     table                                                                                            
  data_type_config   {}                                                                                               
  characteristics    {                                                                                                
     "is_scalar": false,                                                                            
     "is_json_serializable": false                                                                  
   }                                                                                                
  data_type_class   python_class_name    TableType                                                                 
  python_module_name   kiara_plugin.tabular.data_types.table                                     
  full_name            kiara_plugin.tabular.data_types.table.TableType                           
  destiny_backlinks   {}                                                                                                                    
  enviroments         None                                                                                                                  
  property_links      {                                                                                                                     
     "metadata.python_class": "2e52a3a1-de3d-4202-aea1-90a0cec145e0",                                                    
     "metadata.table": "29bc8c46-be1b-4a3a-8f52-a58c1f194cc2"                                                            
   }                                                                                                                     
  value_hash          zdpuAn89Et1ENzfoASJRYcWEceyfRiPg664mN4nnHLFnjRLyg                                                                     
  value_schema       type          table                                                                                                 
  type_config   {}                                                                                                    
  default     not_set optional      False                                                                                                 
  is_constant   False                                                                                                 
  doc           The result value (of type 'table').                                                                   
  value_size          42.79 KB                                                                                                              
  value_status      -- set --

Querying our Data

So now we have downloaded our file and converted it into a table, we want to actually explore it.

To do this, we can query the table using SQL and some functions already included in kiara.

Let's take another look at that operation list, this time looking for functions that let us 'query'.

kiara.list_operation_ids('query')

['query.database', 'query.table']

Well, we already know our file has been converted into a table, so let's have a look at query.table.

kiara.retrieve_operation_info('query.table')

Author(s)           Markus Binsteiner   markus@frkl.io Context           Tags         tabular                                                                                                   
  Labels     package: kiara_plugin.tabular                                                                             
  References source_repo: https://github.com/DHARPA-Project/kiara_plugin.tabulardocumentation: https://DHARPA-Project.github.io/kiara_plugin.tabular/Operation details Documentation   Execute a sql query against an (Arrow) table.                                                          
   The default relation name for the sql query is 'data', but can be modified by the 'relation_name'      
   config option/input.                                                                                   
   If the 'query' module config option is not set, users can provide their own query, otherwise the       
   pre-set                                                                                                
   one will be used.                                                                                      
  Inputs         field name     type    description                                Required  Default             ──────────────────────────────────────────────────────────────────────────────────────────────────    
  table           table    The table to query                          yes        -- no default --     
  query           string   The query, use the value of the             yes        -- no default --     
            'relation_name' input as table, e.g.                                        
            'select * from data'.                                                       
  relation_name   string   The name the table is referred to in the    no         data                 
            sql query.                                                                  
  Outputs        field name    type   description                                                                  ──────────────────────────────────────────────────────────────────────────────────────────────────    
  query_result   table   The query result.                                                             
 

So from this information, we only need to provide the table itself, and our query.

Let's work out how many of these journals were published in Berlin.

inputs = {
"table": outputs_table,
"query": "SELECT * from data where City like 'Berlin'"
}

outputs = kiara.run_job('query.table', inputs=inputs)

outputs

╭──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮ │                                                                                                                                          │ │ field         value                                                                                                                 │ │  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │ │ query_result │ │ Id   Label           JournalType     City    CountryNetwor  PresentDayCoun  Latitude  Longitude  Language │ │  ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │ │   295   Die Krankenpfl   specialized: t   Berlin   German Empire   Germany          52.52      13.405      German     │ │   296   Die deutsche K   general medici   Berlin   German Empire   Germany          52.52      13.405      German     │ │   300   Therapeutische   specialized: t   Berlin   German Empire   Germany          52.52      13.405      German     │ │   1     Allgemeine Zei   specialized: p   Berlin   German Empire   Germany          52.52      13.405      German     │ │   7     Archiv für Psy   specialized: p   Berlin   German Empire   Germany          52.52      13.405      German     │ │   10    Berliner klini   general medici   Berlin   German Empire   Germany          52.52      13.405      German     │ │   13    Charité Annale   general medici   Berlin   German Empire   Germany          52.52      13.405      German     │ │   21    Monatsschrift    specialized: p   Berlin   German Empire   Germany          52.52      13.405      German     │ │   29    Virchows Archi   specialized: a   Berlin   German Empire   Germany          52.52      13.405      German     │ │   31    Zeitschrift fü   specialized: p   Berlin   German Empire   Germany          52.52      13.405      German     │ │   42    Vierteljahrssc   specialized: a   Berlin   German Empire   Germany          52.52      13.405      German     │ │   47    Centralblatt f   specialized: p   Berlin   German Empire   Germany          52.52      13.405      German     │ │   50    Russische medi   general medici   Berlin   German Empire   Germany          52.52      13.405      German     │ │   76    Deutsche Aerzt   general medici   Berlin   German Empire   Germany          52.52      13.405      German     │ │   87    Monatsschrift    specialized: g   Berlin   German Empire   Germany          52.52      13.405      German     │ │   108   Archiv für kli   specialized: s   Berlin   German Empire   Germany          52.52      13.405      German     │ │   113   Zeitschrift fü   general medici   Berlin   German Empire   Germany          52.52      13.405      German     │ │   159   Deutsche milit   specialized: m   Berlin   German Empire   Germany          52.52      13.405      German     │ │   162   Jahresbericht    specialized: p   Berlin   German Empire   Germany          52.52      13.405      German     │ │   192   Ärztliche Sach   general medici   Berlin   German Empire   Germany          52.52      13.405      German     │ │   198   Zeitschrift fü   specialized: p   Berlin   German Empire   Germany          52.52      13.405      German     │ │   258   Der Pfarrbote    news media       Berlin   German Empire   Germany          52.52      13.405      German     │ ││ │                                                                                                                                          │ ╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

The function has returned the table with just the results we were looking for from the SQL query.

Let's narrow this further, and find all the journals that are just about general medicine and published in Berlin.

We can re-use the query.table function and the table we've just made, stored in outputs['query_result']

inputs = {
"table" : outputs['query_result'],
"query" : "SELECT * from data where JournalType like 'general medicine'"
}

outputs = kiara.run_job('query.table', inputs=inputs)

outputs

╭──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮ │                                                                                                                                          │ │ field         value                                                                                                                 │ │  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │ │ query_result │ │ Id   Label           JournalType     City    CountryNetwork  PresentDayCou  Latitude  Longitude  Language │ │  ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────  │ │   296   Die deutsche K   general medici   Berlin   German Empire    Germany         52.52      13.405      German     │ │   10    Berliner klini   general medici   Berlin   German Empire    Germany         52.52      13.405      German     │ │   13    Charité Annale   general medici   Berlin   German Empire    Germany         52.52      13.405      German     │ │   50    Russische medi   general medici   Berlin   German Empire    Germany         52.52      13.405      German     │ │   76    Deutsche Aerzt   general medici   Berlin   German Empire    Germany         52.52      13.405      German     │ │   113   Zeitschrift fü   general medici   Berlin   German Empire    Germany         52.52      13.405      German     │ │   192   Ärztliche Sach   general medici   Berlin   German Empire    Germany         52.52      13.405      German     │ ││ │                                                                                                                                          │ ╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

Recording and Tracing our Data

We've quite a few changes to this table, so let's double check the information about this new table we've created with our queries.

query_output = outputs['query_result']

query_output

 value_id            008e4800-677d-4f10-a94f-a47a5822b1a0                                                                                  
  kiara_id            441206f8-e5b4-43d1-b198-d4741dc64e04                                                                                  
 ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────── data_type_info     data_type_name     table                                                                                            
  data_type_config   {}                                                                                               
  characteristics    {                                                                                                
     "is_scalar": false,                                                                            
     "is_json_serializable": false                                                                  
   }                                                                                                
  data_type_class   python_class_name    TableType                                                                 
  python_module_name   kiara_plugin.tabular.data_types.table                                     
  full_name            kiara_plugin.tabular.data_types.table.TableType                           
  destiny_backlinks   {}                                                                                                                    
  enviroments         None                                                                                                                  
  property_links      {                                                                                                                     
     "metadata.python_class": "69a56eb4-98f7-4d38-bad1-51b7dc6bc300",                                                    
     "metadata.table": "2a73f673-0cff-45f2-bd6e-393343d6edc0"                                                            
   }                                                                                                                     
  value_hash          zdpuB2LfZYHdiuR1sxy2ZkjPZ7JDnhysN48Y4RN9WNT4AvNN6                                                                     
  value_schema       type          table                                                                                                 
  type_config   {}                                                                                                    
  default     not_set optional      False                                                                                                 
  is_constant   False                                                                                                 
  doc           The query result.                                                                                     
  value_size          5.22 KB                                                                                                               
  value_status      -- set --

Looks good!

We might have changed things around, but we can still get lots of information about all our data.

More importantly, kiara is able to trace all of these changes, tracking the inputs and outputs and giving them all different identifiers, so you know exactly what has happened to your data.

First lets have a look at our basic lineage function - this gets us the 'backstage' of what has been going on, showing the inputs for each of the functions that we have run, and where they might feed into one another. In each case, kiara has assigned the inputs a unique identifier. Check it out!

query_output.lineage

query.table
├── input: query (string)= 0a66077d-b9c7-4a0a-ba81-f60a52055d50 ├── input:relation_name (string)= 593fc9c4-3dfe-4e5b-a017-daf01c05b9ba └── input:table (table)= e324894f-c4ec-4caa-9e27-6f1463437ed3 └──query.table
        ├── input: query (string)= 851bd6c3-c3dd-4506-b316-81797078a515 ├── input:relation_name (string)= 32ff3626-2b42-4cfb-be67-3e8ec0f25446 └── input:table (table)= 36df833f-0dbe-4683-b912-42c73df877ac └──create.table
                ├── input: file (file)= 737547e8-7c61-43e7-a6ee-e037c5304f96 │   └──download.file
                │       ├── input: file_name (string)= 2751a86e-460e-4df8-92c3-a20f65576e3b │       └── input:url (string)= 371573ac-17a3-43ff-9073-19f249e7739e └── input:first_row_is_header (boolean) = 53185a6d-3b24-4744-b501-1f94a5639ab6

We can also visualise this, allowing us to view the different functions and their inputs and outputs as a series of steps or 'workflow' as we've been talking about.

from kiara_plugin.dh_tagung_2023.utils import augment_lineage_data

augmented_nodes = augment_lineage_data(query_output,kiara)

from observable_jupyter import embed

embed('@dharpa-project/kiara-data-lineage', cells=['displayViz', 'style'], inputs={'dataset':augmented_nodes})

Even though we are only actually asking for the data lineage using the last SQL query and the table it made, kiara shows us everything that has happened since we first downloaded the file. This helps us keep an eye on the research process and the changes we are making to the data at the same time!

How to import a local file into kiara

A local file is a file that is currently on your computer, for example in your "Documents" folder or alongside the Python code you're working on.

To import a local file, you don't need any plugins installed. Use the import.local.file operation provided in kiara.core. The existing documentation for this operation is here

Here's what importing a local file looks like in code.

# get set up with the Kiara python API
from kiara.api import KiaraAPI

kiara = KiaraAPI.instance()

# let's imagine you have some data stored next to where you're going to run this code from (in the same directory)
relative_path = "./my_local_data.csv"
# and some other data somewhere else on your filesystem
absolute_path = "/Users/demouser/Documents/data/my_absolute_data.txt"
# you can import a file using either kind of file path

# the import.local.file operation takes a single input, called path, which is the path to your file
relative_path_inputs = {"path": relative_path}

import_file_results = kiara.run_job("import.local.file", inputs=relative_path_inputs)

# to then access the file you imported, get it from the 'file' key in the result
imported_file = import_file_results["file"]

When you want to do other things with this file you imported, you'll want to use the value in imported_file, or the ID or alias of that thing, as input to other operations.

If you want to use the file data again without recomputing, you might want to add the imported file to the Kiara store.

If you have more than one file to import, and they all logically belong together (for example making up a text corpus), you might want to instead use the import.local.file_bundle operation instead.

Attributes¶
Classes¶
NetworkDataPreview ¶

Bases: PreviewComponent

Preview a value of type 'network data'.

Currently, this displays a graph, as well as the nodes and edges tables. The graph is only a preview, and takes a while to render depending on the network data size, this will replaced at some point.
Source code in /opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/network_analysis/streamlit/components/__init__.py
Functions¶
get_data_type() -> str classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/network_analysis/streamlit/components/__init__.py
render_preview(st: DeltaGenerator, options: PreviewOptions) ¶
Source code in /opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/network_analysis/streamlit/components/__init__.py


How we write code in docs
Last updated: 2024-03-12

It is useful for us to use consistent style, patterns and names of things in all example code, particularly in end-user facing docs. We decided

    the import line at the start of all examples should be from kiara.api import KiaraAPI, optionally with a comment about what version we're assuming if that is relevant for the example.
    If any plugins are required, note that where imports would normally go, including versions
    immediately after this, get the instance from KiaraAPI and name it kiara - kiara = KiaraAPI.instance()
    If you're going to run an operation:
        define the inputs to the operation in a separate variable, called <something_meaningful>_inputs, depending on what your example is actually doing. It is a dict structure. Consider adding comments if there's anything meaningful to say about individual values
        always use kiara.run_job to do the operation, pass the inputs in from the variable you just made
        call the thing you get back from run_job <something_meaningful>_results (plural because you get back a lot of things rather than a single value)
        Show how to extract the most meaningful thing from the results, for example if the operation is import a file, show how to get the file
    Use comments liberally, although prefer markdown prose if possible. If you're going to break up the code and explain it line-by-line in prose, also provide the full example (if it's fairly short) at the end for ease of copy/paste, and to pull the content together for a final summary.
    Don't use type hints by default, although you may in documentation targeted at more technical users if it's really meaningful

Here's a full example, illustrating most of these things

from kiara.api import KiaraAPI
# no plugins required

kiara = KiaraAPI.instance()

# let's imagine you have some data stored next to where you're going to run this code from (in the same directory)
relative_path = "./my_local_data.csv"
# and some other data somewhere else on your filesystem
absolute_path = "/Users/demouser/Documents/data/my_absolute_data.txt"
# you can import a file using either kind of file path

# the import.local.file operation takes a single input, called path, which is the path to your file
relative_path_inputs = {"path": relative_path}

import_file_results = kiara.run_job("import.local.file", inputs=relative_path_inputs)

# to then access the file you imported, get it from the 'file' key in the result
imported_file = import_file_results["file"]

Notice the initial setup block, which should always mostly be the same, and the descriptive variable names.


How to work on these docs
Last updated: 2024-03-12

The platform for these docs is maintained by Caro Appleby, grab me on GitHub (@caro401) or the team Slack for any feedback or questions.

The platform is based on Starlight, which itself is based on Astro, which is a fancy static site generator (for our usecase at least). It turns Markdown or MDX or Markdoc content into HTML, which can then be viewed via a web browser.

There’s also a Content Management System (CMS) available for people on the team to use. This is based on Keystatic, and can be accessed at /keystatic if you have write access to this repository on GitHub.

Everything that ends up in the main branch in GitHub will automatically end up in the live site (here!) after a few minutes, unless something goes wrong. Commits to other branches will also get deployed, but to different “preview” URLS.

I’ll call this whole system the “docs platform”. There’s a label docs-platform for it in GitHub if you make an issue about the platform or how to use it.
Ways to add or edit content

There’s a bunch of different ways you can add or edit content in the docs, depending on how big the changes are you want to make, and how technically comfortable you feel.
I just want to fix a typo

Find the page on the website you want to edit, and click the “edit page” link at the bottom. This will take you straight to the right file to edit in GitHub. Make the change, then click the green “Commit changes…” button in the top corner and follow the prompts. If the change is super tiny, commit straight to the main branch. Wait for a minute or two (and check that the build succeeds) and your change should be live on the site.
I want to write or edit some prose

Also use these steps if you want to add a new page with mostly words. This will go smoother if you’ve already drafted the changes you want to write in a Google doc or some other text editor first. The advantage of using this process via the CMS rather than editing in GitHub is being able to use the CMS’s rich text editor (more like word or google docs) rather than having to write markdown by hand.

Go to the CMS (if you have access) and sign in with GitHub. If you’re planning to make a substantial change, you’ll probably want to create or move to a new git branch from the CMS homepage - remember anything committed to main goes to the live site immediately without review. The CMS makes commits directly to the branch you have selected when you save. If you need a git refresher to know what that means, check out this guide, or ask Caro for help.

Once you’re on the right branch, find the appopriate collection for your page. This loosely matches up with the main sidebar sections, and with our target user personas. Find the page you want to work on by its “slug” - probably the same as the title but with - not spaces. Paste in or make your edits in the big text box for that page, then hit the blue “Save” button in the top corner.

Hitting “save” makes a commit in GitHub, which triggers a site rebuild each time you do it, so ideally only save when you have a meaningful chunk of work completed. Your browser will remember what you were working on if you accidentally navigate away, you don’t have to save after every sentence.

If you worked on a separate branch, you’ll want to go back to GitHub and open a pull request once you’re mostly happy with your work. This will get a comment from the cloudflare-pages bot with a preview URL, so you can check how your article will look on the live site. Once this is merged into main, your new prose will appear on the live site.
I want to add or edit structurally complex page

For these purposes, a structurally complex page is one with a lot of code samples, requiring special components or extra markdown features that the CMS doesn’t support well. This is probably something like an in-depth tutorial, as opposed to an article explaining a high-level concept using mostly prose.

I’m assuming that you know the basics of how to use git to clone a repository, make a branch, commit and pull request, can run commands in your terminal, and can (work out how to) write markdown syntax in your text editor of choice. For some basic information on git commits and pull requests, check out this guide.

It’s much easier to write big chunks of documentation if you can run a copy of the site on your local computer, so you can look at the changes you’re making as you’re working. Follow these instructions to get set up. Then, work out where your file is/should go. You’ll want to look in the /src/content/docs directory to start with, then find the section that matches with where your doc should go (eg concepts).

Create a new file where you want your new doc to appear. If you want to be able to edit it in the CMS in the future, use Markdoc format (.mdoc), otherwise use MDX format for maximum flexibility (.mdx). The first thing you’ll need to do in a new file is add the required frontmatter. This means adding a special section at the start of your file, which looks like:

---
title: Title for your new page
---

Whatever you actually want to write goes here below the ---.
You can copy this code snippet straight into your new page with the
copy button in the top right corner of this code box.

You can add all sorts of things to the frontmatter (see Starlight’s docs on what’s allowed), but the title is required.

You’ll need to write your content using markdown syntax directly - here’s a quick primer on how to do that.

Starlight also provides a couple extra neat things that might be useful (if you’re in a .md or .mdx file, not a .mdoc one yet). One is asides for things you want to draw extra attention to:

Tip

You can see examples of the aside and codeblock syntax in the source document for this page

The other is extra fancy things with code blocks using the Expressive Code library. This can be really powerful for highlighting particular lines or diffs in your code samples, making it clear whether you’re showing code to write in a file or run in a terminal. Read their docs or ask for help on how to do this.

When you’re done making changes, check that the site will build by running the following in your terminal:
Tidy up and build the site

# optionally run the formatter to tidy up your code
npm run format
# build the site ready for deployment
npm run build

This will probably give you a lot of output that you don’t care about (because there’s a lot of pages!), just check that the final line of output says Complete! rather than an error message or stack trace. See when things go wrong for ideas about how to fix errors if there are any.

Once you’re happy, make a git commit (probably to a new branch), push it and open a pull request to get reviews on what you’ve written.

Note

I understand this whole process is a bit complicated (sorry!). Feel free to ask me for help at any point with anything, or to suggest improvements to these docs about how to use the platform, or to the platform itself.
I need to add a new version of a plugin

This site should only include docs for plugins that we think are stable and good quality. If that isn’t the case, your plugin should be able to make a standalone version of its own docs to use until it’s considered stable enough to include here.

Note

All the content displayed in the auto-generated plugin docs sections comes directly from the Python source code for the plugins themselves. So if the content needs improvement, you’ll need to do that in the Python code for the plugin. Then, release a new version of the plugin and add that version to these docs as outlined here.

I’ll use kiara_plugin.core_types as an example here, replace that with the name of your plugin as appropriate. This process is a bit manual at the moment, but hopefully shouldn’t be super common. If this changes, or I have spare time, I’ll automate it.

At a high level, the key thing that needs to happen is a JSON file with a specific filename and in a specific format needs to end up in a specific place in this repository, then the docs platform should take care of everything else. The filename needs to be in the precise format kiara_plugin.PLUGIN_NAME-vX.Y.Z.json, where PLUGIN_NAME is something like core_types or tabular, and X.Y.Z is the version number, and it needs to be in the src/content/plugins/PLUGIN_NAME directory.

Generate this file with a command something like kiara info plugin explain kiara_plugin.core_types --format json > ./kiara_plugin.core_types-v0.5.0.json, when core_types is the plugin you care about, and v0.5.0 is both the version you care about, and the version listed when running kiara --version. I’ll leave it up to you to set up a working kiara install with the plugin version you care about, whether that’s using conda or a virtual environment or pixi or whatever.

Move the file you generated to the required place, either in a cloned copy of this site then git commit and push, or by uploading directly to GitHub, making extra sure the filename and location is correct (there’s no reliable automated checks for this yet, it will probably just silently fail).
When things go wrong

Sometimes things go wrong, this is completely fine. You can’t publish a broken site - there’s a “build step” between you pushing code to GitHub on the main branch and the changes going live which prevents broken code making it onto the live site. If you notice that changes you just made aren’t showing up in the live site after a minute or two, this might be the problem. You can see whether your build was successful by looking for a green checkmark ✅ or red x ❌ in GitHub, usually next to a commit ID or a summary of the last thing you did. If you click on that icon, GitHub will tell you more about what happened.

If you get a red x, there’s a few common things that might have gone wrong. Most likely, you forgot to add the frontmatter to a new page. If you know how to run the site locally, you can check this by going to the page(s) you changed in your browser while running the dev server. When you go to that page, the browser and your terminal where the dev server is running will tell you something like this:
Terminal window

[ERROR] [InvalidContentEntryFrontmatterError]
docs → internal/how-to-write-these-docs.mdx   # the path of the file where the frontmatter is wrong
frontmatter does not match collection schema.
title: Required  # what key in the frontmatter you got wrong

Grab the frontmatter example code from above and add that to your page, checking there’s no blank lines or spaces before the first ---.

If this doesn’t fix things, ping Caro (@caro401 on GitHub). For the moment (because of how and where the site is currently deployed), you can’t get any better diagnostics than “something failed”, but this should be improved in the future.
Running this site on your own computer

You only need to care about this if you particularly want to make a lot of changes to a lot of docs all at once (and only then to save you a bit of time), or preview how structurally complex pages are going to look. Don’t worry about this section at all if that’s not something you need to do.

I’m assuming that you know the basics of how to use git to clone a repository, make a branch, commit and pull request, can run commands in your terminal, and can follow installation instructions for your own operating system for common tools.

The first thing to do is clone this repository to your machine, which will look something like this:
Clone this repository

git clone git@github.com:DHARPA-Project/kiara-website.git
cd kiara-website

Next, we’ll need to install a JavaScript runtime to be able to run and build the site. Don’t worry, you don’t actually have to write any JavaScript! Go to Nodejs.org and download the “LTS” version (labelled “recommended for most users”). Once you’ve done that, check it worked by running the following:
Check your node version

node --version
# should be something like v20.11.0, must be >18
npm --version
# should be something like 10.2.3

Node is sort of equivalent to Python, or more properly CPython. NPM is Node’s package manager, sort of like pip or conda for Python. Unlike Python, Node doesn’t have a concept of virtual environments that you need to manage yourself, you can dive straight in.

Now we can install the dependencies for the docs platform with:
Install the dependencies

npm install

And if everything’s worked, you should be able to start the “dev server” to view a preview of the site in your browser. Run:
Start the dev server

npm run dev

then open the URL it tells you in your browser, probably http://127.0.0.1:4321. The dev server will intelligently refresh the pages or content it’s serving when you make changes to files in the repository, so you can preview anything you’re working on really fast.

Search doesn’t work while running the dev server. If you need to experiment with how search works, you’ll need to npm run build, then serve the /dist directory using the server of your choice (I run npx serve dist). This doesn’t magically refresh itself, so you’ll need to rebuild and restart the server each time you make a change.
Site structure

The site is structured like this (omitting bits I don’t think you’ll need to touch):

src
├── content
│   ├── docs
│   │   ├── ...
│   │   ├── index.md  ← this is the site homepage
│   │   ├── ...
│   │   ├── module-users ← these sections all accessible in the CMS
│   │   │   ├── <lots of other pages here>
│   │   │   ├── something.mdoc  ← a specific page
│   │   │   └── index.mdoc  ← this page will always appear first in that sidebar section
│   │   └── plugins  ← be a bit careful in here
│   │       ├── ...
│   │       ├── index.mdx  ← about plugins in general
│   │       └── tabular
│   │           └── index.mdx  ← authored content about this plugin
│   └── plugins
│       └── <JSON files of plugin docs here>
├── pages
│   └── <autogenerated plugin docs come from here>
└── styles

Mostly you’ll interact with files in src/content/docs/, as this is where most of the hand-authored content lives (as opposed to autogenerated things or configuration files). The directories inside there correspond to the sections you see in the left sidebar of the site, and to our user personas.

There’s also the src/content/plugins collection, which is where the autogenerated plugin documentation data starts out, exported directly from kiara. The src/pages section deals with turning that raw data into nice pages, which appear in the sidebar under “Plugins → Some plugin name → v0.something”

astro.config.mjs contains the configuration for the sidebar, in case you need to tweak that (but prefer to do it at a page level via frontmatter if you can).


Operations in plugin core_types v0.5.0
Public operations

    date.check_range

    Check whether a date falls within a specified date range.
    date.extract_from_string

    Extract a date object from a string.
    list.contains

    Check whether an element is in a list.
    logic.and

    Returns 'True' if both inputs are 'True'.
    logic.nand

    Returns 'False' if both inputs are 'True'.
    logic.nor

    Returns 'True' if both inputs are 'False'.
    logic.not

    Negates the input.
    logic.or

    Returns 'True' if one of the inputs is 'True'.
    logic.xor

    Returns 'True' if exactly one of it's two inputs is 'True'.
    string_filter.tokens 

Internal operations

    deserialize.kiara_model.as.python_object
    deserialize.kiara_model_list.as.python_object 


Modules in plugin core_types v0.5.0

    date.check_range

    Check whether a date falls within a specified date range.
    date.extract_from_string

    Extract a date object from a string.
    list.contains

    Check whether an element is in a list.
    load.kiara_model
    load.kiara_model_list
    logic.and

    Returns 'True' if both inputs are 'True'.
    logic.not

    Negates the input.
    logic.or

    Returns 'True' if one of the inputs is 'True'.
    string.filters
    string.match_regex

    Match a string using a regular expression.
    string.replace


Data types in plugin core_types v0.5.0

    date

    A date.
    float

    A float.
    integer

    An integer.
    kiara_model

    A model.
    kiara_model_list

    A model.
    list

    A list.


Kiara model types in plugin core_types v0.5.0

    kiara_model_list_metadata

    File stats.
    kiara_model_schema_metadata

    File stats.


Operations in plugin tabular v0.5.3
Public operations

    assemble.tables

    Assemble a 'tables' value from multiple tables.
    create.database.from.file

    Create a database from a file.
    create.database.from.file_bundle

    Create a database from a file_bundle value.
    create.database.from.table

    Create a database value from a table.
    create.database.from.tables

    Create a database value from a list of tables.
    create.table.from.file

    Create a table from a file, trying to auto-determine the format of said file.
    create.table.from.file_bundle

    Create a table value from a text file_bundle.
    create.tables.from.file_bundle

    Create a database from a file_bundle value.
    export.database.as.csv_files

    Export network data as 2 csv files (one for edges, one for nodes.
    export.database.as.sql_dump

    Export network data as a sql dump file.
    export.database.as.sqlite_db

    Export network data as a sqlite database file.
    export.table.as.csv_file

    Export a table as csv file.
    export.tables.as.csv_files

    Export network data as 2 csv files (one for edges, one for nodes.
    export.tables.as.sql_dump

    Export network data as a sql dump file.
    export.tables.as.sqlite_db

    Export network data as a sqlite database file.
    extract.date_array.from.table

    Extract a date array from a table column.
    import.database.from.local_file_path

    Import a database from a csv file.
    import.table.from.local_file_path

    Import a table from a file on the local filesystem.
    import.table.from.local_folder_path

    Import a table from a local folder containing text files.
    parse.date_array

    Create an array of date objects from an array of strings.
    query.database

    Execute a sql query against a (sqlite) database.
    query.table

    Execute a sql query against an (Arrow) table.
    table.pick.column

    Pick one column from a table, returning an array.
    table_filter.drop_columns
    table_filter.select_columns
    table_filter.select_rows
    tables.pick.column

    Pick one column from a table, returning an array.
    tables.pick.table

    Pick one column from a table, returning an array.

Internal operations

    deserialize.array.as.python_object
    deserialize.database.as.python_object
    deserialize.table.as.python_object
    deserialize.tables.as.python_object
    render.database.as.string
    render.database.as.terminal_renderable
    render.table.as.string
    render.table.as.terminal_renderable 


Modules in plugin tabular v0.5.3

    assemble.tables

    Assemble a 'tables' value from multiple tables.
    create.database
    create.table

    Create a table from supported source input types.
    create.tables
    export.database

    Export database values.
    export.table

    Export table data items.
    export.tables

    Export network data items.
    load.array

    Deserialize array data.
    load.database
    load.table
    load.tables
    parse.date_array

    Create an array of date objects from an array of strings.
    query.database

    Execute a sql query against a (sqlite) database.
    query.table

    Execute a sql query against an (Arrow) table.
    render.database
    render.table
    table.filters
    table.merge

    Create a table from other tables and/or arrays.
    table.pick.column

    Pick one column from a table, returning an array.
    tables.pick.table

    Pick one column from a table, returning an array.


Data types in plugin tabular v0.5.3

    array

    An array, in most cases used as a column within a table.
    database

    A database, containing one or several tables.
    table

    Tabular data (table, spreadsheet, data_frame, what have you).
    tables

    Multiple tabular data sets.


Kiara model types in plugin tabular v0.5.3

    database_metadata

    Database and table properties.
    kiara_array

    A class to manage array-like data.
    kiara_array_metadata

    File stats.
    kiara_database

    A wrapper class to manage a sqlite database.
    kiara_table

    A wrapper class to manage tabular data in a memory efficient way.
    kiara_table_metadata

    File stats.
    kiara_tables

    A wrapper class, containing multiple tables.
    kiara_tables_metadata

    File stats.
    table_metadata

    Describes properties for the 'table' data type.

tabular

Top-level package for kiara_plugin.tabular.
Attributes¶
KIARA_METADATA = {'authors': [{'name': __author__, 'email': __email__}], 'description': 'Kiara modules for: tabular', 'references': {'source_repo': {'desc': 'The module package git repository.', 'url': 'https://github.com/DHARPA-Project/kiara_plugin.tabular'}, 'documentation': {'desc': 'The url for the module package documentation.', 'url': 'https://DHARPA-Project.github.io/kiara_plugin.tabular/'}}, 'tags': ['tabular'], 'labels': {'package': 'kiara_plugin.tabular'}} module-attribute ¶
find_modules: KiaraEntryPointItem = (find_kiara_modules_under, 'kiara_plugin.tabular.modules') module-attribute ¶
find_model_classes: KiaraEntryPointItem = (find_kiara_model_classes_under, 'kiara_plugin.tabular.models') module-attribute ¶
find_data_types: KiaraEntryPointItem = (find_data_types_under, 'kiara_plugin.tabular.data_types') module-attribute ¶
find_pipelines: KiaraEntryPointItem = (find_pipeline_base_path_for_module, 'kiara_plugin.tabular.pipelines', KIARA_METADATA) module-attribute ¶


Workflows¶

This part of the documentation is work in progress, and very bare-bones at the moment.
Example workflows¶
logic.xor¶

kiara can render different artefacts from pipeline descriptinos, most notably Jupyter notebooks. This can be done via the command-line:

kiara render pipeline logic.xor a=true b=true > xor.ipynb

This command looks up the logic.xor pipeline operation (you can also specify a pipeline description file -- for example the one created when following this tutorial ), and uses Jupyter_notebook.ipynb.j2 from this template folder to render a Jupyter notebook that outlines how to use the kiara workflow api via Python. Rendered versions of this example can be found:

    here
    or directly on Github

topic_modeling example pipeline¶

As mentioned above, it's possible to use a pipeline description file as input for the render command. Here, we use this pipeline to render:

    this
    or, the github-rendered version of the same notebook here

Assuming you have a working kiara virtual environment with all the necessary plugins, you can try that out yourself:

git clone https://github.com/DHARPA-Project/kiara.examples.git
❯ kiara render pipeline kiara.examples/examples/pipelines/topic_modeling/topic_modeling.yaml > topic_modeling.ipynb
jupyter-lab topic_modeling.ipynb


api
Attributes¶
ValueMapSchema = Mapping[str, Union[ValueSchema, Mapping[str, Any]]] module-attribute ¶
Classes¶
ValueSchema ¶

Bases: KiaraModel

The schema of a value.

The schema contains the [ValueTypeOrm][kiara.data.values.ValueTypeOrm] of a value, as well as an optional default that will be used if no user input was given (yet) for a value.

For more complex container data_types like array, tables, unions etc, data_types can also be configured with values from the type_config field.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/models/values/value_schema.py
Attributes¶
type: str = Field(description='The type of the value.') class-attribute instance-attribute ¶
type_config: typing.Dict[str, typing.Any] = Field(description="Configuration for the type, in case it's complex.", default_factory=dict) class-attribute instance-attribute ¶
default: typing.Any = Field(description='A default value.', default=SpecialValue.NOT_SET) class-attribute instance-attribute ¶
optional: bool = Field(description="Whether this value is required (True), or whether 'None' value is allowed (False).", default=False) class-attribute instance-attribute ¶
is_constant: bool = Field(description='Whether the value is a constant.', default=False) class-attribute instance-attribute ¶
doc: DocumentationMetadataModel = Field(default_factory=DocumentationMetadataModel, description='A description for the value of this input field.') class-attribute instance-attribute ¶
Classes¶
Config ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/models/values/value_schema.py
Attributes¶
use_enum_values = True class-attribute instance-attribute ¶
Functions¶
validate_doc(value) ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/models/values/value_schema.py
is_required() ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/models/values/value_schema.py
JobDesc ¶

Bases: KiaraModel

An object describing a compute job with both raw or referenced inputs.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/models/job.py
Attributes¶
job_alias: str = Field(description='The alias for the job.', default='default') class-attribute instance-attribute ¶
operation: str = Field(description='The operation id or module type.') class-attribute instance-attribute ¶
module_config: Union[Mapping[str, Any], None] = Field(default=None, description='The configuration for the module.') class-attribute instance-attribute ¶
inputs: Dict[str, Any] = Field(description='The inputs for the job.', default_factory=dict) class-attribute instance-attribute ¶
doc: DocumentationMetadataModel = Field(description='A description/doc for this job.', default_factory=DocumentationMetadataModel.create) class-attribute instance-attribute ¶
save: Dict[str, str] = Field(description='Configuration on how/whether to save the job results.', default_factory=dict) class-attribute instance-attribute ¶
Functions¶
create_from_file(path: Union[str, Path]) classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/models/job.py
parse_from_file(path: Union[str, Path]) classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/models/job.py
parse_data(data: Mapping[str, Any], var_repl_dict: Union[Mapping[str, Any], None] = None, alias: Union[str, None] = None) classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/models/job.py
create_from_data(data: Mapping[str, Any], var_repl_dict: Union[Mapping[str, Any], None] = None, alias: Union[str, None] = None) -> JobDesc classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/models/job.py
validate_inputs(values) ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/models/job.py
validate_doc(value) ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/models/job.py
get_operation(kiara_api: KiaraAPI) -> Operation ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/models/job.py
KiaraModuleConfig ¶

Bases: KiaraModel

Base class that describes the configuration a [KiaraModule][kiara.module.KiaraModule] class accepts.

This is stored in the _config_cls class attribute in each KiaraModule class.

There are two config options every KiaraModule supports:

    constants, and
    defaults

Constants are pre-set inputs, and users can't change them and an error is thrown if they try. Defaults are default values that override the schema defaults, and those can be overwritten by users. If both a constant and a default value is set for an input field, an error is thrown.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/models/module/__init__.py
Attributes¶
constants: Dict[str, Any] = Field(default_factory=dict, description='Value constants for this module.') class-attribute instance-attribute ¶
defaults: Dict[str, Any] = Field(default_factory=dict, description='Value defaults for this module.') class-attribute instance-attribute ¶
Classes¶
Config ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/models/module/__init__.py
Attributes¶
extra = Extra.forbid class-attribute instance-attribute ¶
validate_assignment = True class-attribute instance-attribute ¶
Functions¶
requires_config(config: Union[Mapping[str, Any], None] = None) -> bool classmethod ¶

Return whether this class can be used as-is, or requires configuration before an instance can be created.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/models/module/__init__.py
get(key: str) -> Any ¶

Get the value for the specified configuation key.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/models/module/__init__.py
create_renderable(**config: Any) -> RenderableType ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/models/module/__init__.py
Kiara ¶

Bases: object

The core context of a kiara session.

The Kiara object holds all information related to the current environment the user does works in. This includes:

    available modules, operations & pipelines
    available value data_types
    available metadata schemas
    available data items
    available controller and processor data_types
    misc. configuration options

It's possible to use kiara without ever manually touching the 'Kiara' class, by default all relevant classes and functions will use a default instance of this class (available via the Kiara.instance() method.

The Kiara class is highly dependent on the Python environment it lives in, because it auto-discovers available sub-classes of its building blocks (modules, value data_types, etc.). So, you can't assume that, for example, a pipeline you create will work the same way (or at all) in a different environment. kiara will always be able to tell you all the details of this environment, though, and it will attach those details to things like data, so there is always a record of how something was created, and in which environment.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/__init__.py
Attributes¶
id: uuid.UUID property ¶
context_config: KiaraContextConfig property ¶
runtime_config: KiaraRuntimeConfig property ¶
context_info: KiaraContextInfo property ¶
environment_registry: EnvironmentRegistry property ¶
type_registry: TypeRegistry property ¶
module_registry: ModuleRegistry property ¶
kiara_model_registry: ModelRegistry property ¶
alias_registry: AliasRegistry property ¶
destiny_registry: DestinyRegistry property ¶
job_registry: JobRegistry property ¶
operation_registry: OperationRegistry property ¶
data_registry: DataRegistry property ¶
workflow_registry: WorkflowRegistry property ¶
event_registry: EventRegistry property ¶
render_registry: RenderRegistry property ¶
current_environments: Mapping[str, RuntimeEnvironment] property ¶
data_type_classes: Mapping[str, Type[DataType]] property ¶
data_type_names: List[str] property ¶
module_type_classes: Mapping[str, Type[KiaraModule]] property ¶
module_type_names: Iterable[str] property ¶
Functions¶
instance() -> Kiara classmethod ¶

The default kiara context. In most cases, it's recommended you create and manage your own, though.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/__init__.py
lock_context() ¶

Lock the context, so that it can't be used by other processes.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/__init__.py
unlock_context() ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/__init__.py
update_runtime_config(**settings) -> KiaraRuntimeConfig ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/__init__.py
create_manifest(module_or_operation: str, config: Union[Mapping[str, Any], None] = None) -> Manifest ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/__init__.py
queue(manifest: Manifest, inputs: Mapping[str, Any], wait: bool = False) -> uuid.UUID ¶

Queue a job with the specified manifest and inputs.

manifest: the job manifest inputs: the job inputs wait: whether to wait for the job to be finished before returning

the job id that can be used to look up job status & results

Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/__init__.py
process(manifest: Manifest, inputs: Mapping[str, Any]) -> ValueMap ¶

Queue a job with the specified manifest and inputs.

manifest: the job manifest inputs: the job inputs wait: whether to wait for the job to be finished before returning
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/__init__.py
save_values(values: ValueMap, alias_map: Mapping[str, Iterable[str]]) -> StoreValuesResult ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/__init__.py
create_context_summary() -> ContextInfo ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/__init__.py
get_all_archives() -> Dict[KiaraArchive, Set[str]] ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/__init__.py
KiaraAPI ¶

Bases: object

Public API for clients.

This class wraps a [Kiara][kiara.context.kiara.Kiara] instance, and allows easy a access to tasks that are typically done by a frontend. The return types of each method are json seriable in most cases.

Can be extended for special scenarios and augmented with scenario-specific methdos (Jupyter, web-frontend, ...)

The naming of the API endpoints follows a (loose-ish) convention: - list_: return a list of ids or items, if items, filtering is supported - get_: get specific instances of a type (operation, value, etc.) - retrieve_: get augmented information about an instance or type of something. This usually implies that there is some overhead, so before you use this, make sure that there is not 'get_' or 'list_*' endpoint that could give you what you need. .
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
Attributes¶
doc: Dict[str, str] cached property ¶

Get the documentation for this API.
context: Kiara property ¶

Return the kiara context.

DON"T USE THIS! This is going away in the production release.
Functions¶
instance(context_name: Union[str, None] = None) -> KiaraAPI classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
get_runtime_config() -> KiaraRuntimeConfig ¶

Retrieve the current runtime configuration.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
get_context_info() -> ContextInfo ¶

Retrieve information about the current kiara context.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
ensure_plugin_packages(package_names: Union[str, Iterable[str]], update: bool = False) -> Union[bool, None] ¶

Ensure that the specified packages are installed.

Parameters:
Name 	Type 	Description 	Default
package_names 	Union[str, Iterable[str]] 	

The names of the packages to install.
	required
update 	bool 	

If True, update the packages if they are already installed
	False

Returns:
Type 	Description
Union[bool, None] 	

'None' if run in jupyter, 'True' if any packages were installed, 'False' otherwise.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
list_context_names() -> List[str] ¶

list the names of all available/registered contexts.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
retrieve_context_infos() -> ContextInfos ¶

Retrieve information about the available/registered contexts.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
get_current_context_name() -> str ¶

Retrieve the name fo the current context.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
create_new_context(context_name: str, set_active: bool) -> None ¶

Create a new context.

Parameters:
Name 	Type 	Description 	Default
context_name 	str 	

the name of the new context
	required
set_active 	bool 	

set the newly created context as the active one
	required
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
set_active_context(context_name: str, create: bool = False) -> None ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
list_data_type_names(include_profiles: bool = False) -> List[str] ¶

Get a list of all registered data types.

Parameters:
Name 	Type 	Description 	Default
include_profiles 	bool 	

if True, also include the names of all registered data type profiles
	False
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
is_internal_data_type(data_type_name: str) -> bool ¶

Checks if the data type is prepdominantly used internally by kiara, or whether it should be exposed to the user.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
retrieve_data_types_info(filter: Union[str, Iterable[str], None] = None, include_data_type_profiles: bool = False, python_package: Union[None, str] = None) -> DataTypeClassesInfo ¶

Retrieve information about all data types.

A data type is a Python class that inherits from [DataType[kiara.data_types.DataType], and it wraps a specific Python class that holds the actual data and provides metadata and convenience methods for managing the data internally. Data types are not directly used by users, but they are exposed in the input/output schemas of moudles and other data-related features.

Parameters:
Name 	Type 	Description 	Default
filter 	Union[str, Iterable[str], None] 	

an optional string or (list of strings) the returned datatype ids have to match (all filters in the case of a list)
	None
include_data_type_profiles 	bool 	

if True, also include the names of all registered data type profiles
	False
python_package 	Union[None, str] 	

if provided, only return data types that are defined in the given python package
	None

Returns:
Type 	Description
DataTypeClassesInfo 	

an object containing all information about all data types
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
retrieve_data_type_info(data_type_name: str) -> DataTypeClassInfo ¶

Retrieve information about a specific data type.

Parameters:
Name 	Type 	Description 	Default
data_type 		

the registered name of the data type
	required

Returns:
Type 	Description
DataTypeClassInfo 	

an object containing all information about a data type
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
list_module_type_names() -> List[str] ¶

Get a list of all registered module types.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
retrieve_module_types_info(filter: Union[None, str, Iterable[str]] = None, python_package: Union[str, None] = None) -> ModuleTypesInfo ¶

Retrieve information for all available module types (or a filtered subset thereof).

A module type is Python class that inherits from KiaraModule, and is the basic building block for processing pipelines. Module types are not used directly by users, Operations are. Operations are instantiated modules (meaning: the module & some (optional) configuration).

Parameters:
Name 	Type 	Description 	Default
filter 	Union[None, str, Iterable[str]] 	

an optional string (or list of string) the returned module names have to match (all filters in case of list)
	None
python_package 	Union[str, None] 	

an optional string, if provided, only modules from the specified python package are returned
	None

Returns:
Type 	Description
ModuleTypesInfo 	

a mapping object containing module names as keys, and information about the modules as values
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
retrieve_module_type_info(module_type: str) -> ModuleTypeInfo ¶

Retrieve information about a specific module type.

This can be used to retrieve information like module documentation and configuration options.

Parameters:
Name 	Type 	Description 	Default
module_type 	str 	

the registered name of the module
	required

Returns:
Type 	Description
ModuleTypeInfo 	

an object containing all information about a module type
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
create_operation(module_type: str, module_config: Union[Mapping[str, Any], str, None] = None) -> Operation ¶

Create an Operation instance for the specified module type and (optional) config.

This can be used to get information about the operation itself, it's inputs & outputs schemas, documentation etc.

Parameters:
Name 	Type 	Description 	Default
module_type 	str 	

the registered name of the module
	required
module_config 	Union[Mapping[str, Any], str, None] 	

(Optional) configuration for the module instance.
	None

Returns:
Type 	Description
Operation 	

an Operation instance (which contains all the available information about an instantiated module)
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
list_operation_ids(filter: Union[str, None, Iterable[str]] = None, input_types: Union[str, Iterable[str], None] = None, output_types: Union[str, Iterable[str], None] = None, include_internal: bool = False, python_packages: Union[str, None, Iterable[str]] = None) -> List[str] ¶

Get a list of all operation ids that match the specified filter.

Parameters:
Name 	Type 	Description 	Default
filter 	Union[str, None, Iterable[str]] 	

an optional single or list of filters (all filters must match the operation id for the operation to be included)
	None
include_internal 	bool 	

also return internal operations
	False
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
get_operation(operation: Union[Mapping[str, Any], str, Path], allow_external: Union[bool, None] = None) -> Operation ¶

Return the operation instance with the specified id.

This can be used to get information about a specific operation, like inputs/outputs scheman, documentation, etc.

The order in which the operation argument is resolved: - if it's a string, and an existing, registered operation_id, the associated operation is returned - if it's a path to an existing file, the content of the file is loaded into a dict and depending on the content a pipeline module will be created, or a 'normal' manifest (if module_type is a key in the dict)

Parameters:
Name 	Type 	Description 	Default
operation 	Union[Mapping[str, Any], str, Path] 	

the operation id, module_type_name, path to a file, or url
	required
allow_external 	Union[bool, None] 	

if True, allow loading operations from external sources (e.g. a URL), if 'None' is provided, the configured value in the runtime configuration is used.
	None

Returns:
Type 	Description
Operation 	

operation instance data
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
list_operations(filter: Union[str, None, Iterable[str]] = None, input_types: Union[str, Iterable[str], None] = None, output_types: Union[str, Iterable[str], None] = None, operation_types: Union[str, Iterable[str], None] = None, python_packages: Union[str, Iterable[str], None] = None, include_internal: bool = False) -> OperationsMap ¶

List all available values, optionally filter.

Parameters:
Name 	Type 	Description 	Default
filter 	Union[str, None, Iterable[str]] 	

the (optional) filter string(s), an operation must match all of them to be included in the result
	None
input_types 	Union[str, Iterable[str], None] 	

each operation must have at least one input that matches one of the specified types
	None
output_types 	Union[str, Iterable[str], None] 	

each operation must have at least one output that matches one of the specified types
	None
operation_types 	Union[str, Iterable[str], None] 	

only include operations of the specified type(s)
	None
include_internal 	bool 	

whether to include operations that are predominantly used internally in kiara.
	False
python_packages 	Union[str, Iterable[str], None] 	

only include operations that are contained in one of the provided python packages
	None

Returns:
Type 	Description
OperationsMap 	

a dictionary with the operation id as key, and [kiara.models.module.operation.Operation] instance data as value
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
retrieve_operation_info(operation: str, allow_external: bool = False) -> OperationInfo ¶

Return the full information for the specified operation id.

This is similar to the 'get_operation' method, but returns additional information. Only use this instead of 'get_operation' if you need the additional info, as it's more expensive to get.

Parameters:
Name 	Type 	Description 	Default
operation 	str 	

the operation id
	required

Returns:
Type 	Description
OperationInfo 	

augmented operation instance data
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
retrieve_operations_info(*filters, input_types: Union[str, Iterable[str], None] = None, output_types: Union[str, Iterable[str], None] = None, operation_types: Union[str, Iterable[str], None] = None, python_packages: Union[str, Iterable[str], None] = None, include_internal: bool = False) -> OperationGroupInfo ¶

Retrieve information about the matching operations.

This retrieves the same list of operations as list_operations, but augments each result instance with additional information that might be useful in frontends.

'OperationInfo' objects contains augmented information on top of what 'normal' Operation objects hold, but they can take longer to create/resolve. If you don't need any of the augmented information, just use the list_operations method instead.

Parameters:
Name 	Type 	Description 	Default
filters 		

the (optional) filter strings, an operation must match all of them to be included in the result
	()
include_internal 	bool 	

whether to include operations that are predominantly used internally in kiara.
	False
input_types 	Union[str, Iterable[str], None] 	

each operation must have at least one input that matches one of the specified types
	None
output_types 	Union[str, Iterable[str], None] 	

each operation must have at least one output that matches one of the specified types
	None
operation_types 	Union[str, Iterable[str], None] 	

only include operations of the specified type(s)
	None
include_internal 	bool 	

whether to include operations that are predominantly used internally in kiara.
	False
python_packages 	Union[str, Iterable[str], None] 	

only include operations that are contained in one of the provided python packages
	None

Returns:
Type 	Description
OperationGroupInfo 	

a wrapper object containing a dictionary of items with value_id as key, and [kiara.interfaces.python_api.models.info.OperationInfo] as value
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
register_pipeline(data: Union[Path, str, Mapping[str, Any]], operation_id: Union[str, None] = None) -> Operation ¶

Register a pipelne as new operation into this context.

Parameters:
Name 	Type 	Description 	Default
data 	Union[Path, str, Mapping[str, Any]] 	

a dict or a path to a json/yaml file containing the definition
	required
operation_id 	Union[str, None] 	

the id to use for the operation (if not specified, the id will be auto-determined)
	None

Returns:
Type 	Description
Operation 	

the assembled operation
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
register_pipelines(*pipeline_paths: Union[str, Path]) -> Dict[str, Operation] ¶

Register all pipelines found in the specified paths.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
register_data(data: Any, data_type: Union[None, str, ValueSchema] = None, reuse_existing: bool = False) -> Value ¶

Register data with kiara.

This will create a new value instance from the data and return it. The data/value itself won't be stored in a store, you have to use the 'store_value' function for that.

Parameters:
Name 	Type 	Description 	Default
data 	Any 	

the data to register
	required
data_type 	Union[None, str, ValueSchema] 	

(optional) the data type of the data. If not provided, kiara will try to infer the data type.
	None
reuse_existing 	bool 	

whether to re-use an existing value that is already registered and has the same hash.
	False

Returns:
Type 	Description
Value 	

a [kiara.models.values.value.Value] instance
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
list_value_ids(**matcher_params) -> List[uuid.UUID] ¶

List all available value ids for this kiara context.

This method exists mainly so frontend can retrieve a list of all value_ids that exists on the backend without having to look up the details of each value (like list_values does). This method can also be used with a matcher, but in this case the list_values would be preferable in most cases, because it is called under the hood, and the performance advantage of not having to look up value details is gone.

Parameters:
Name 	Type 	Description 	Default
matcher_params 		

the (optional) filter parameters, check the ValueMatcher class for available parameters
	{}

Returns:
Type 	Description
List[uuid.UUID] 	

a list of value ids
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
list_values(**matcher_params: Any) -> ValueMapReadOnly ¶

List all available values, optionally filter.

Retrieve information about all values that are available in the current kiara context session (both stored and non-stored).

Parameters:
Name 	Type 	Description 	Default
matcher_params 	Any 	

the (optional) filter parameters, check the ValueMatcher class for available parameters
	{}

Returns:
Type 	Description
ValueMapReadOnly 	

a dictionary with value_id as key, and [kiara.models.values.value.Value] as value
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
get_value(value: Union[str, Value, uuid.UUID]) -> Value ¶

Retrieve a value instance with the specified id or alias.

Raises an exception if no value could be found.

Parameters:
Name 	Type 	Description 	Default
value 	Union[str, Value, uuid.UUID] 	

a value id, alias or object that has a 'value_id' attribute.
	required

Returns:
Type 	Description
Value 	

the Value instance
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
query_value(value_or_path: Union[str, Value, uuid.UUID], query_path: Union[str, None] = None) -> Any ¶

Retrieve a value attribute with the specified id or alias.

A query path is delimited by "::", and has the following format:

<value_id_or_alias>::[<category_name>]::[<attribute_name>]::[...]

Currently supported categories: - "data": the data of the value - "properties: the properties of the value

If no category is specified, the value instance itself is returned.

Raises an exception if no value could be found.

Parameters:
Name 	Type 	Description 	Default
value_or_path 	Union[str, Value, uuid.UUID] 	

a value or value reference, or a query path containing the value id or alias as first token
	required
query_path 	Union[str, None] 	

a query path which will be appended a potential query path computed from the first argument
	None

Returns:
Type 	Description
Any 	

the attribute value
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
retrieve_value_info(value: Union[str, uuid.UUID, Value]) -> ValueInfo ¶

Retrieve an info object for a value.

'ValueInfo' objects contains augmented information on top of what 'normal' Value objects hold (like resolved properties for example), but they can take longer to create/resolve. If you don't need any of the augmented information, just use the get_value method instead.

Parameters:
Name 	Type 	Description 	Default
value 	Union[str, uuid.UUID, Value] 	

a value id, alias or object that has a 'value_id' attribute.
	required

Returns:
Type 	Description
ValueInfo 	

the ValueInfo instance
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
retrieve_values_info(**matcher_params) -> ValuesInfo ¶

Retrieve information about the matching values.

This retrieves the same list of values as list_values, but augments each result value instance with additional information that might be useful in frontends.

'ValueInfo' objects contains augmented information on top of what 'normal' Value objects hold (like resolved properties for example), but they can take longer to create/resolve. If you don't need any of the augmented information, just use the list_values method instead.

Parameters:
Name 	Type 	Description 	Default
matcher_params 		

the (optional) filter parameters, check the ValueMatcher class for available parameters
	{}

Returns:
Type 	Description
ValuesInfo 	

a wrapper object containing the items as dictionary with value_id as key, and [kiara.interfaces.python_api.models.values.ValueInfo] as value
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
list_alias_names(**matcher_params) -> List[str] ¶

List all available alias keys.

This method exists mainly so frontend can retrieve a list of all value_ids that exists on the backend without having to look up the details of each value (like list_aliases does). This method can also be used with a matcher, but in this case the list_aliases would be preferrable in most cases, because it is called under the hood, and the performance advantage of not having to look up value details is gone.

Parameters:
Name 	Type 	Description 	Default
matcher_params 		

the (optional) filter parameters, check the ValueMatcher class for available parameters
	{}

Returns:
Type 	Description
List[str] 	

a list of value ids
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
list_aliases(**matcher_params) -> ValueMapReadOnly ¶

List all available values that have an alias assigned, optionally filter.

Parameters:
Name 	Type 	Description 	Default
matcher_params 		

the (optional) filter parameters, check the ValueMatcher class for available parameters
	{}

Returns:
Type 	Description
ValueMapReadOnly 	

a dictionary with value_id as key, and [kiara.models.values.value.Value] as value
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
retrieve_aliases_info(**matcher_params) -> ValuesInfo ¶

Retrieve information about the matching values.

This retrieves the same list of values as list_values, but augments each result value instance with additional information that might be useful in frontends.

'ValueInfo' objects contains augmented information on top of what 'normal' Value objects hold (like resolved properties for example), but they can take longer to create/resolve. If you don't need any of the augmented information, just use the get_value method instead.

Parameters:
Name 	Type 	Description 	Default
matcher_params 		

the (optional) filter parameters, check the ValueMatcher class for available parameters
	{}

Returns:
Type 	Description
ValuesInfo 	

a dictionary with a value alias as key, and [kiara.interfaces.python_api.models.values.ValueInfo] as value
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
assemble_value_map(values: Mapping[str, Union[uuid.UUID, None, str, Value, Any]], values_schema: Union[None, Mapping[str, ValueSchema]] = None, register_data: bool = False, reuse_existing_data: bool = False) -> ValueMapReadOnly ¶

Retrive a [ValueMap][TODO] object from the provided value ids or value links.

By default, this method can only use values/datasets that are already registered in kiara. If you want to auto-register 'raw' data, you need to set the 'register_data' flag to 'True', and provide a schema for each of the fields that are not yet registered.

Parameters:
Name 	Type 	Description 	Default
values 	Mapping[str, Union[uuid.UUID, None, str, Value, Any]] 	

a dictionary with the values in question
	required
values_schema 	Union[None, Mapping[str, ValueSchema]] 	

an optional dictionary with the schema for each of the values that are not yet registered
	None
register_data 	bool 	

whether to allow auto-registration of 'raw' data
	False
reuse_existing_data 	bool 	

whether to reuse existing data with the same hash as the 'raw' data that is being registered
	False

Returns:
Type 	Description
ValueMapReadOnly 	

a value map instance
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
store_value(value: Union[str, uuid.UUID, Value], alias: Union[str, Iterable[str], None], allow_overwrite: bool = True) -> StoreValueResult ¶

Store the specified value in the (default) value store.

Parameters:
Name 	Type 	Description 	Default
value 	Union[str, uuid.UUID, Value] 	

the value (or a reference to it)
	required
alias 	Union[str, Iterable[str], None] 	

(Optional) aliases for the value
	required
allow_overwrite 	bool 	

whether to allow overwriting existing aliases
	True
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
store_values(values: Mapping[str, Union[str, uuid.UUID, Value]], alias_map: Mapping[str, Iterable[str]]) -> StoreValuesResult ¶

Store multiple values into the (default) kiara value store.

Values are identified by unique keys in both input arguments, the alias map references the key that is used in the 'values' argument.

Parameters:
Name 	Type 	Description 	Default
values 	Mapping[str, Union[str, uuid.UUID, Value]] 	

a map of value keys/values
	required
alias_map 	Mapping[str, Iterable[str]] 	

a map of value keys aliases
	required

Returns:
Type 	Description
StoreValuesResult 	

an object outlining which values (identified by the specified value key) where stored and how
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
get_operation_type(op_type: Union[str, Type[OP_TYPE]]) -> OperationType ¶

Get the management object for the specified operation type.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
retrieve_operation_type_info(op_type: Union[str, Type[OP_TYPE]]) -> OperationTypeInfo ¶

Get an info object for the specified operation type.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
find_operation_id(module_type: str, module_config: Union[None, Mapping[str, Any]] = None) -> Union[None, str] ¶

Try to find the registered operation id for the specified module type and configuration.

Parameters:
Name 	Type 	Description 	Default
module_type 	str 	

the module type
	required
module_config 	Union[None, Mapping[str, Any]] 	

the module configuration
	None

Returns:
Type 	Description
Union[None, str] 	

the registered operation id, if found, or None
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
assemble_filter_pipeline_config(data_type: str, filters: Union[str, Iterable[str], Mapping[str, str]], endpoint: Union[None, Manifest, str] = None, endpoint_input_field: Union[str, None] = None, endpoint_step_id: Union[str, None] = None, extra_input_aliases: Union[None, Mapping[str, str]] = None, extra_output_aliases: Union[None, Mapping[str, str]] = None) -> PipelineConfig ¶

Assemble a (pipeline) module config to filter values of a specific data type.

Optionally, a module that uses the filtered dataset as input can be specified.
TODO: document filter names¶

For the 'filters' argument, the accepted inputs are: - a string, in which case a single-step pipeline will be created, with the string referencing the operation id or filter - a list of strings: in which case a multi-step pipeline will be created, the step_ids will be calculated automatically - a map of string pairs: the keys are step ids, the values operation ids or filter names

Parameters:
Name 	Type 	Description 	Default
data_type 	str 	

the type of the data to filter
	required
filters 	Union[str, Iterable[str], Mapping[str, str]] 	

a list of operation ids or filter names (and potentiall step_ids if type is a mapping)
	required
endpoint 	Union[None, Manifest, str] 	

optional module to put as last step in the created pipeline
	None
endpoing_input_field 		

field name of the input that will receive the filtered value
	required
endpoint_step_id 	Union[str, None] 	

id to use for the endpoint step (module type name will be used if not provided)
	None
extra_input_aliases 	Union[None, Mapping[str, str]] 	

extra output aliases to add to the pipeline config
	None
extra_output_aliases 	Union[None, Mapping[str, str]] 	

extra output aliases to add to the pipeline config
	None

Returns:
Type 	Description
PipelineConfig 	

the (pipeline) module configuration of the filter pipeline
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
retrieve_renderer_infos(source_type: Union[str, None] = None) -> RendererInfos ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
retrieve_renderers_for(source_type: str) -> List[KiaraRenderer] ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
render(item: Any, source_type: str, target_type: str, render_config: Union[Mapping[str, Any], None] = None) -> Any ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
assemble_render_pipeline(data_type: str, target_format: Union[str, Iterable[str]] = 'string', filters: Union[None, str, Iterable[str], Mapping[str, str]] = None, use_pretty_print: bool = False) -> Operation ¶

Create a manifest describing a transformation that renders a value of the specified data type in the target format.

If a list is provided as value for 'target_format', all items are tried until a 'render_value' operation is found that matches the value type of the source value, and the provided target format.

Parameters:
Name 	Type 	Description 	Default
value 		

the value (or value id)
	required
target_format 	Union[str, Iterable[str]] 	

the format into which to render the value
	'string'
filters 	Union[None, str, Iterable[str], Mapping[str, str]] 	

a list of filters to apply to the value before rendering it
	None
use_pretty_print 	bool 	

if True, use a 'pretty_print' operation instead of 'render_value'
	False

Returns:
Type 	Description
Operation 	

the manifest for the transformation
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
queue_manifest(manifest: Manifest, inputs: Union[None, Mapping[str, Any]] = None) -> uuid.UUID ¶

Queue a job using the provided manifest to describe the module and config that should be executed.

Parameters:
Name 	Type 	Description 	Default
manifest 	Manifest 	

the manifest
	required
inputs 	Union[None, Mapping[str, Any]] 	

the job inputs (can be either references to values, or raw inputs
	None

Returns:
Type 	Description
uuid.UUID 	

a result value map instance
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
run_manifest(manifest: Manifest, inputs: Union[None, Mapping[str, Any]] = None) -> ValueMapReadOnly ¶

Run a job using the provided manifest to describe the module and config that should be executed.

Parameters:
Name 	Type 	Description 	Default
manifest 	Manifest 	

the manifest
	required
inputs 	Union[None, Mapping[str, Any]] 	

the job inputs (can be either references to values, or raw inputs
	None

Returns:
Type 	Description
ValueMapReadOnly 	

a result value map instance
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
queue_job(operation: Union[str, Path, Manifest, OperationInfo, JobDesc], inputs: Union[Mapping[str, Any], None], operation_config: Union[None, Mapping[str, Any]] = None) -> uuid.UUID ¶

Queue a job from a operation id, module_name (and config), or pipeline file, wait for the job to finish and retrieve the result.

This is a convenience method that auto-detects what is meant by the 'operation' string input argument.

Parameters:
Name 	Type 	Description 	Default
operation 	Union[str, Path, Manifest, OperationInfo, JobDesc] 	

a module name, operation id, or a path to a pipeline file (resolved in this order, until a match is found)..
	required
inputs 	Union[Mapping[str, Any], None] 	

the operation inputs
	required
operation_config 	Union[None, Mapping[str, Any]] 	

the (optional) module config in case 'operation' is a module name
	None

Returns:
Type 	Description
uuid.UUID 	

the queued job id
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
run_job(operation: Union[str, Path, Manifest, OperationInfo, JobDesc], inputs: Union[None, Mapping[str, Any]] = None, operation_config: Union[None, Mapping[str, Any]] = None) -> ValueMapReadOnly ¶

Run a job from a operation id, module_name (and config), or pipeline file, wait for the job to finish and retrieve the result.

This is a convenience method that auto-detects what is meant by the 'operation' string input argument.

In general, try to avoid this method and use 'queue_job', 'get_job' and 'retrieve_job_result' manually instead, since this is a blocking operation.

If the 'operation' is a JobDesc instance, and that JobDesc instance has the 'save' attribute set, it will be ignored, so you'll have to store any results manually.

Parameters:
Name 	Type 	Description 	Default
operation 	Union[str, Path, Manifest, OperationInfo, JobDesc] 	

a module name, operation id, or a path to a pipeline file (resolved in this order, until a match is found)..
	required
inputs 	Union[None, Mapping[str, Any]] 	

the operation inputs
	None
operation_config 	Union[None, Mapping[str, Any]] 	

the (optional) module config in case 'operation' is a module name
	None

Returns:
Type 	Description
ValueMapReadOnly 	

the job result value map
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
get_job(job_id: Union[str, uuid.UUID]) -> ActiveJob ¶

Retrieve the status of the job with the provided id.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
get_job_result(job_id: Union[str, uuid.UUID]) -> ValueMapReadOnly ¶

Retrieve the result(s) of the specified job.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
render_value(value: Union[str, uuid.UUID, Value], target_format: Union[str, Iterable[str]] = 'string', filters: Union[None, Iterable[str], Mapping[str, str]] = None, render_config: Union[Mapping[str, str], None] = None, add_root_scenes: bool = True, use_pretty_print: bool = False) -> RenderValueResult ¶

Render a value in the specified target format.

If a list is provided as value for 'target_format', all items are tried until a 'render_value' operation is found that matches the value type of the source value, and the provided target format.

Parameters:
Name 	Type 	Description 	Default
value 	Union[str, uuid.UUID, Value] 	

the value (or value id)
	required
target_format 	Union[str, Iterable[str]] 	

the format into which to render the value
	'string'
filters 	Union[None, Iterable[str], Mapping[str, str]] 	

an (optional) list of filters
	None
render_config 	Union[Mapping[str, str], None] 	

manifest specific render configuration
	None
add_root_scenes 	bool 	

add root scenes to the result
	True
use_pretty_print 	bool 	

use 'pretty_print' operation instead of 'render_value'
	False

Returns:
Type 	Description
RenderValueResult 	

the rendered value data, and any related scenes, if applicable
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
list_workflow_ids() -> List[uuid.UUID] ¶

List all available workflow ids.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
list_workflow_alias_names() -> List[str] ¶

"List all available workflow aliases.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
get_workflow(workflow: Union[str, uuid.UUID], create_if_necessary: bool = True) -> Workflow ¶

Retrieve the workflow instance with the specified id or alias.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
retrieve_workflow_info(workflow: Union[str, uuid.UUID, Workflow]) -> WorkflowInfo ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
list_workflows(**matcher_params) -> WorkflowsMap ¶

List all available workflow sessions, indexed by their unique id.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
list_workflow_aliases(**matcher_params) -> WorkflowsMap ¶

List all available workflow sessions that have an alias, indexed by alias.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
retrieve_workflows_info(**matcher_params: Any) -> WorkflowGroupInfo ¶

Get a map info instances for all available workflows, indexed by (stringified) workflow-id.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
retrieve_workflow_aliases_info(**matcher_params: Any) -> WorkflowGroupInfo ¶

Get a map info instances for all available workflows, indexed by alias.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
create_workflow(workflow_alias: Union[None, str] = None, initial_pipeline: Union[None, Path, str, Mapping[str, Any]] = None, initial_inputs: Union[None, Mapping[str, Any]] = None, documentation: Union[Any, None] = None, save: bool = False, force_alias: bool = False) -> Workflow ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/__init__.py
KiaraConfig ¶

Bases: BaseSettings
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/config.py
Attributes¶
context_search_paths: List[str] = Field(description='The base path to look for contexts in.', default=[KIARA_MAIN_CONTEXTS_PATH]) class-attribute instance-attribute ¶
base_data_path: str = Field(description='The base path to use for all data (unless otherwise specified.', default=kiara_app_dirs.user_data_dir) class-attribute instance-attribute ¶
stores_base_path: str = Field(description='The base path for the stores of this context.') class-attribute instance-attribute ¶
default_context: str = Field(description='The name of the default context to use if none is provided.', default=DEFAULT_CONTEXT_NAME) class-attribute instance-attribute ¶
auto_generate_contexts: bool = Field(description="Whether to auto-generate requested contexts if they don't exist yet.", default=True) class-attribute instance-attribute ¶
runtime_config: KiaraRuntimeConfig = Field(description='The kiara runtime config.', default_factory=KiaraRuntimeConfig) class-attribute instance-attribute ¶
available_context_names: Iterable[str] property ¶
context_configs: Mapping[str, KiaraContextConfig] property ¶
Classes¶
Config ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/config.py
Attributes¶
env_prefix = 'kiara_' class-attribute instance-attribute ¶
extra = Extra.forbid class-attribute instance-attribute ¶
use_enum_values = True class-attribute instance-attribute ¶
Functions¶
create_in_folder(path: Union[Path, str]) -> KiaraConfig classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/config.py
load_from_file(path: Union[Path, None] = None) -> KiaraConfig classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/config.py
validate_context_search_paths(v) ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/config.py
get_context_config(context_name: Union[str, None] = None, auto_generate: Union[bool, None] = None) -> KiaraContextConfig ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/config.py
create_context_config(context_alias: Union[str, None] = None) -> KiaraContextConfig ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/config.py
create_context(context: Union[None, str, uuid.UUID, Path] = None, extra_pipelines: Union[None, str, Iterable[str]] = None) -> Kiara ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/config.py
find_context_config(context_id: uuid.UUID) -> KiaraContextConfig ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/config.py
save(path: Union[Path, None] = None) ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/config.py
delete(context_name: Union[str, None] = None, dry_run: bool = True) -> ContextInfo ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/config.py
create_renderable(**render_config: Any) ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/config.py
RunSpec ¶

Bases: BaseModel

A list of jobs, ran one after the other, incl saving of results.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/models/job.py
Attributes¶
run_alias: str = Field(description='The alias for the run.') class-attribute instance-attribute ¶
jobs: List[JobDesc] = Field(description='The jobs to run.', default_factory=list) class-attribute instance-attribute ¶
doc: DocumentationMetadataModel = Field(description='A description/doc for this run.', default_factory=DocumentationMetadataModel.create) class-attribute instance-attribute ¶
Functions¶
create_from_file(path: Union[str, Path]) classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/models/job.py
create_from_data(data: Mapping[str, Any], var_repl_dict: Union[Mapping[str, Any], None] = None, alias: Union[str, None] = None) classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/models/job.py
validate_inputs(values) ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/models/job.py
validate_doc(value) ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/interfaces/python_api/models/job.py
KiaraModule ¶

Bases: InputOutputObject, Generic[KIARA_CONFIG]

The base class that every custom module in Kiara needs to inherit from.

The core of every KiaraModule is a process method, which should be a 'pure', idempotent function that creates one or several output values from the given input(s), and its purpose is to transfor a set of inputs into a set of outputs.

Every module can be configured. The module configuration schema can differ, but every one such configuration needs to subclass the [KiaraModuleConfig][kiara.module_config.KiaraModuleConfig] class and set as the value to the _config_cls attribute of the module class. This is useful, because it allows for some modules to serve a much larger variety of use-cases than non-configurable modules would be, which would mean more code duplication because of very simlilar, but slightly different module data_types.

Each module class (type) has a unique -- within a kiara context -- module type id which can be accessed via the _module_type_name class attribute.

Examples:

A simple example would be an 'addition' module, with ``a`` and ``b`` configured as inputs, and ``z`` as the output field name.

An implementing class would look something like this:

Todo:¶

module_config: the configuation for this module

Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/modules/__init__.py
Attributes¶
_config_cls: Type[KIARA_CONFIG] = KiaraModuleConfig class-attribute instance-attribute ¶
manifest: Manifest property ¶
doc: DocumentationMetadataModel property ¶
module_id: uuid.UUID property ¶

The id of this module.
module_type_name: str property ¶
config: KIARA_CONFIG property ¶

Retrieve the configuration object for this module.

the module-class-specific config object

module_instance_cid: CID property ¶
characteristics: ModuleCharacteristics property ¶
operation: Operation property ¶
Functions¶
is_pipeline() -> bool classmethod ¶

Check whether this module type is a pipeline, or not.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/modules/__init__.py
get_config_value(key: str) -> Any ¶

Retrieve the value for a specific configuration option.

key: the config key

the value for the provided key

Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/modules/__init__.py
run(kiara: Kiara, **inputs: Any) -> ValueMap ¶

Run the module ad-hoc.

This is mostly used in unit tests, you typically want to run a module via the KiaraAPI instance.

kiara: the kiara context
inputs: the inputs for this module

the outputs of this module run as a ValueMap instance

Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/modules/__init__.py
process_step(inputs: ValueMap, outputs: ValueMap, job_log: JobLog) -> None ¶

Kick off processing for a specific set of input/outputs.

This method calls the implemented [process][kiara.module.KiaraModule.process] method of the inheriting class, as well as wrapping input/output-data related functionality.

inputs: the input value set
outputs: the output value set

Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/modules/__init__.py
create_renderable(**config) -> RenderableType ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/modules/__init__.py
Value ¶

Bases: ValueDetails
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/models/values/value.py
Attributes¶
environment_hashes: Mapping[str, Mapping[str, str]] = Field(description='Hashes for the environments this value was created in.') class-attribute instance-attribute ¶
enviroments: Union[Mapping[str, Mapping[str, Any]], None] = Field(description='Information about the environments this value was created in.', default=None) class-attribute instance-attribute ¶
property_links: Mapping[str, uuid.UUID] = Field(description='Links to values that are properties of this value.', default_factory=dict) class-attribute instance-attribute ¶
destiny_backlinks: Mapping[uuid.UUID, str] = Field(description='Backlinks to values that this value acts as destiny/or property for.', default_factory=dict) class-attribute instance-attribute ¶
is_serializable: bool property ¶
serialized_data: SerializedData property ¶
data: Any property ¶
is_initialized: bool property ¶
is_stored: bool property ¶
data_type: DataType property ¶
lineage: ValueLineage property ¶
property_values: ValueMap property ¶

Return a dictionary of all of this values properties.
property_names: Iterable[str] property ¶
Functions¶
add_property(value_id: Union[uuid.UUID, Value], property_path: str, add_origin_to_property_value: bool = True) ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/models/values/value.py
add_destiny_details(value_id: uuid.UUID, destiny_alias: str) ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/models/values/value.py
get_property_value(property_key) -> Value ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/models/values/value.py
get_property_data(property_key: str) -> Any ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/models/values/value.py
get_all_property_data(flatten_models: bool = False) -> Mapping[str, Any] ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/models/values/value.py
lookup_self_aliases() -> Set[str] ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/models/values/value.py
create_info() -> ValueInfo ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/models/values/value.py
create_info_data(**config: Any) -> Mapping[str, Any] ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/models/values/value.py
create_renderable(**render_config: Any) -> RenderableType ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/models/values/value.py
ValueMap ¶

Bases: KiaraModel, MutableMapping[str, Value]
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/models/values/value.py
Attributes¶
values_schema: Dict[str, ValueSchema] = Field(description='The schemas for all the values in this set.') class-attribute instance-attribute ¶
field_names: Iterable[str] property ¶
all_items_valid: bool property ¶
Functions¶
get_value_obj(field_name: str) -> Value abstractmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/models/values/value.py
check_invalid() -> Dict[str, str] ¶

Check whether the value set is invalid, if it is, return a description of what's wrong.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/models/values/value.py
get_value_data_for_fields(*field_names: str, raise_exception_when_unset: bool = False) -> Dict[str, Any] ¶

Return the data for a one or several fields of this ValueMap.

If a value is unset, by default 'None' is returned for it. Unless 'raise_exception_when_unset' is set to 'True', in which case an Exception will be raised (obviously).
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/models/values/value.py
get_value_data(field_name: str, raise_exception_when_unset: bool = False) -> Any ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/models/values/value.py
get_all_value_ids() -> Dict[str, uuid.UUID] ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/models/values/value.py
get_all_value_data(raise_exception_when_unset: bool = False) -> Dict[str, Any] ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/models/values/value.py
set_values(**values) -> None ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/models/values/value.py
set_value(field_name: str, data: Any) -> None ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/models/values/value.py
create_invalid_renderable(**config) -> Union[RenderableType, None] ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/models/values/value.py
create_renderable(**config: Any) -> RenderableType ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/models/values/value.py

context
Attributes¶
logger = structlog.getLogger() module-attribute ¶
Classes¶
Kiara ¶

Bases: object

The core context of a kiara session.

The Kiara object holds all information related to the current environment the user does works in. This includes:

    available modules, operations & pipelines
    available value data_types
    available metadata schemas
    available data items
    available controller and processor data_types
    misc. configuration options

It's possible to use kiara without ever manually touching the 'Kiara' class, by default all relevant classes and functions will use a default instance of this class (available via the Kiara.instance() method.

The Kiara class is highly dependent on the Python environment it lives in, because it auto-discovers available sub-classes of its building blocks (modules, value data_types, etc.). So, you can't assume that, for example, a pipeline you create will work the same way (or at all) in a different environment. kiara will always be able to tell you all the details of this environment, though, and it will attach those details to things like data, so there is always a record of how something was created, and in which environment.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/__init__.py
Attributes¶
id: uuid.UUID property ¶
context_config: KiaraContextConfig property ¶
runtime_config: KiaraRuntimeConfig property ¶
context_info: KiaraContextInfo property ¶
environment_registry: EnvironmentRegistry property ¶
type_registry: TypeRegistry property ¶
module_registry: ModuleRegistry property ¶
kiara_model_registry: ModelRegistry property ¶
alias_registry: AliasRegistry property ¶
destiny_registry: DestinyRegistry property ¶
job_registry: JobRegistry property ¶
operation_registry: OperationRegistry property ¶
data_registry: DataRegistry property ¶
workflow_registry: WorkflowRegistry property ¶
event_registry: EventRegistry property ¶
render_registry: RenderRegistry property ¶
current_environments: Mapping[str, RuntimeEnvironment] property ¶
data_type_classes: Mapping[str, Type[DataType]] property ¶
data_type_names: List[str] property ¶
module_type_classes: Mapping[str, Type[KiaraModule]] property ¶
module_type_names: Iterable[str] property ¶
Functions¶
instance() -> Kiara classmethod ¶

The default kiara context. In most cases, it's recommended you create and manage your own, though.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/__init__.py
lock_context() ¶

Lock the context, so that it can't be used by other processes.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/__init__.py
unlock_context() ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/__init__.py
update_runtime_config(**settings) -> KiaraRuntimeConfig ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/__init__.py
create_manifest(module_or_operation: str, config: Union[Mapping[str, Any], None] = None) -> Manifest ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/__init__.py
queue(manifest: Manifest, inputs: Mapping[str, Any], wait: bool = False) -> uuid.UUID ¶

Queue a job with the specified manifest and inputs.

manifest: the job manifest inputs: the job inputs wait: whether to wait for the job to be finished before returning

the job id that can be used to look up job status & results

Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/__init__.py
process(manifest: Manifest, inputs: Mapping[str, Any]) -> ValueMap ¶

Queue a job with the specified manifest and inputs.

manifest: the job manifest inputs: the job inputs wait: whether to wait for the job to be finished before returning
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/__init__.py
save_values(values: ValueMap, alias_map: Mapping[str, Iterable[str]]) -> StoreValuesResult ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/__init__.py
create_context_summary() -> ContextInfo ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/__init__.py
get_all_archives() -> Dict[KiaraArchive, Set[str]] ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/__init__.py
KiaraContextInfo ¶

Bases: KiaraModel
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/__init__.py
Attributes¶
kiara_id: uuid.UUID = Field(description='The id of the kiara context.') class-attribute instance-attribute ¶
package_filter: Union[str, None] = Field(description='Whether this context is filtered to only include information included in a specific Python package.') class-attribute instance-attribute ¶
data_types: DataTypeClassesInfo = Field(description='The included data types.') class-attribute instance-attribute ¶
module_types: ModuleTypesInfo = Field(description='The included kiara module types.') class-attribute instance-attribute ¶
kiara_model_types: KiaraModelClassesInfo = Field(description='The included model classes.') class-attribute instance-attribute ¶
operation_types: OperationTypeClassesInfo = Field(description='The included operation types.') class-attribute instance-attribute ¶
operations: OperationGroupInfo = Field(description='The included operations.') class-attribute instance-attribute ¶
Functions¶
create_from_kiara_instance(kiara: Kiara, package_filter: Union[str, None] = None) classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/__init__.py
get_info(item_type: str, item_id: str) -> ItemInfo ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/__init__.py
get_all_info(skip_empty_types: bool = True) -> Dict[str, InfoItemGroup] ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/__init__.py
Functions¶
explain(item: Any, kiara: Union[None, Kiara] = None) ¶

Pretty print information about an item on the terminal.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/__init__.py

config
Attributes¶
logger = structlog.getLogger() module-attribute ¶
yaml = r_yaml.YAML(typ='safe', pure=True) module-attribute ¶
KIARA_SETTINGS = KiaraSettings() module-attribute ¶
Classes¶
KiaraArchiveConfig ¶

Bases: BaseModel
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/config.py
Attributes¶
archive_id: str = Field(description='The unique archive id.') class-attribute instance-attribute ¶
archive_type: str = Field(description='The archive type.') class-attribute instance-attribute ¶
config: Mapping[str, Any] = Field(description='Archive type specific config.', default_factory=dict) class-attribute instance-attribute ¶
archive_uuid: uuid.UUID property ¶
KiaraContextConfig ¶

Bases: BaseModel
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/config.py
Attributes¶
context_id: str = Field(description='A globally unique id for this kiara context.') class-attribute instance-attribute ¶
archives: Dict[str, KiaraArchiveConfig] = Field(description='All the archives this kiara context can use and the aliases they are registered with.') class-attribute instance-attribute ¶
extra_pipelines: List[str] = Field(description='Paths to local folders that contain kiara pipelines.', default_factory=list) class-attribute instance-attribute ¶
Classes¶
Config ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/config.py
Attributes¶
extra = Extra.forbid class-attribute instance-attribute ¶
Functions¶
add_pipelines(*pipelines: str) ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/config.py
KiaraSettings ¶

Bases: BaseSettings
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/config.py
Attributes¶
syntax_highlight_background: str = Field(description='The background color for code blocks when rendering to terminal, Jupyter, etc.', default='default') class-attribute instance-attribute ¶
Classes¶
Config ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/config.py
Attributes¶
extra = Extra.forbid class-attribute instance-attribute ¶
validate_assignment = True class-attribute instance-attribute ¶
env_prefix = 'kiara_setting_' class-attribute instance-attribute ¶
KiaraConfig ¶

Bases: BaseSettings
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/config.py
Attributes¶
context_search_paths: List[str] = Field(description='The base path to look for contexts in.', default=[KIARA_MAIN_CONTEXTS_PATH]) class-attribute instance-attribute ¶
base_data_path: str = Field(description='The base path to use for all data (unless otherwise specified.', default=kiara_app_dirs.user_data_dir) class-attribute instance-attribute ¶
stores_base_path: str = Field(description='The base path for the stores of this context.') class-attribute instance-attribute ¶
default_context: str = Field(description='The name of the default context to use if none is provided.', default=DEFAULT_CONTEXT_NAME) class-attribute instance-attribute ¶
auto_generate_contexts: bool = Field(description="Whether to auto-generate requested contexts if they don't exist yet.", default=True) class-attribute instance-attribute ¶
runtime_config: KiaraRuntimeConfig = Field(description='The kiara runtime config.', default_factory=KiaraRuntimeConfig) class-attribute instance-attribute ¶
available_context_names: Iterable[str] property ¶
context_configs: Mapping[str, KiaraContextConfig] property ¶
Classes¶
Config ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/config.py
Attributes¶
env_prefix = 'kiara_' class-attribute instance-attribute ¶
extra = Extra.forbid class-attribute instance-attribute ¶
use_enum_values = True class-attribute instance-attribute ¶
Functions¶
create_in_folder(path: Union[Path, str]) -> KiaraConfig classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/config.py
load_from_file(path: Union[Path, None] = None) -> KiaraConfig classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/config.py
validate_context_search_paths(v) ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/config.py
get_context_config(context_name: Union[str, None] = None, auto_generate: Union[bool, None] = None) -> KiaraContextConfig ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/config.py
create_context_config(context_alias: Union[str, None] = None) -> KiaraContextConfig ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/config.py
create_context(context: Union[None, str, uuid.UUID, Path] = None, extra_pipelines: Union[None, str, Iterable[str]] = None) -> Kiara ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/config.py
find_context_config(context_id: uuid.UUID) -> KiaraContextConfig ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/config.py
save(path: Union[Path, None] = None) ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/config.py
delete(context_name: Union[str, None] = None, dry_run: bool = True) -> ContextInfo ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/config.py
create_renderable(**render_config: Any) ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/config.py
Functions¶
config_file_settings_source(settings: BaseSettings) -> Dict[str, Any] ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/config.py


runtime_config
Classes¶
JobCacheStrategy ¶

Bases: Enum
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/runtime_config.py
Attributes¶
no_cache = 'no_cache' class-attribute instance-attribute ¶
value_id = 'value_id' class-attribute instance-attribute ¶
data_hash = 'data_hash' class-attribute instance-attribute ¶
KiaraRuntimeConfig ¶

Bases: BaseSettings
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/runtime_config.py
Attributes¶
job_cache: JobCacheStrategy = Field(description='Name of the strategy that determines when to re-run jobs or use cached results.', default=JobCacheStrategy.data_hash) class-attribute instance-attribute ¶
allow_external: bool = Field(description='Whether to allow external external pipelines.', default=True) class-attribute instance-attribute ¶
lock_context: bool = Field(description='Whether to lock context(s) on creation.', default=False) class-attribute instance-attribute ¶
Classes¶
Config ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/context/runtime_config.py
Attributes¶
extra = Extra.forbid class-attribute instance-attribute ¶
validate_assignment = True class-attribute instance-attribute ¶
env_prefix = 'kiara_runtime_' class-attribute instance-attribute 

data_types

This is the base module that contains everything data type-related in kiara.

I'm still not 100% sure how to best implement the kiara type system, there are several ways it could be done, for example based on Python type-hints, using JSON-schema, Avro (which is my 2nd favourite option), as well as by implementing a custom type-class hierarchy. Which is what I have choosen to try first. For now, it looks like it'll work out, but there is a chance requirements I haven't forseen will crop up that could make this become ugly.

Anyway, the way it works (for now) is that kiara comes with a set of often used data_types (the standard set of: scalars, list, dict, table & array, etc.) which each come with 2 functions that can serialize and deserialize values of that type in a persistant fashion -- which could be storing as a file on disk, or as a cell/row in a database. Those functions will most likley be kiara modules themselves, with even more restricted input/output type options.

In addition, packages that contain modules can implement their own, custom data_types, if suitable ones are not available in core-kiara. Those can either be 'serialized/deserialized' into kiara-native data_types (which in turn will serialize them using their own serializing functions), or will have to implement custom serializing functionality (which will probably be discouraged, since this might not be trivial and there are quite a few things to consider).
Attributes¶
logger = structlog.getLogger() module-attribute ¶
TYPE_PYTHON_CLS = TypeVar('TYPE_PYTHON_CLS') module-attribute ¶
TYPE_CONFIG_CLS = TypeVar('TYPE_CONFIG_CLS', bound=DataTypeConfig) module-attribute ¶
Classes¶
DataTypeConfig ¶

Bases: BaseModel

Base class that describes the configuration a [DataType][kiara.data.data_types.DataType] class accepts.

This is stored in the _config_cls class attribute in each DataType class. By default, a DataType is not configurable, unless the _config_cls class attribute points to a sub-class of this class.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/__init__.py
Attributes¶
config_hash: int property ¶
Classes¶
Config ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/__init__.py
Attributes¶
json_loads = orjson.loads class-attribute instance-attribute ¶
json_dumps = orjson_dumps class-attribute instance-attribute ¶
extra = Extra.forbid class-attribute instance-attribute ¶
Functions¶
requires_config() -> bool classmethod ¶

Return whether this class can be used as-is, or requires configuration before an instance can be created.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/__init__.py
get(key: str) -> Any ¶

Get the value for the specified configuation key.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/__init__.py
DataType ¶

Bases: abc.ABC, Generic[TYPE_PYTHON_CLS, TYPE_CONFIG_CLS]

Base class that all kiara data_types must inherit from.

kiara data_types have 3 main responsibilities:

    serialize into / deserialize from persistent state
    data validation
    metadata extraction

Serializing being the arguably most important of those, because without most of the data management features of kiara would be impossible. Validation should not require any explanation. Metadata extraction is important, because that metadata will be available to other components of kiara (or frontends for it), without them having to request the actual data. That will hopefully make kiara very efficient in terms of memory management, as well as data transfer and I/O. Ideally, the actual data (bytes) will only be requested at the last possible moment. For example when a module needs the input data to do processing on it -- and even then it might be that it only requests a part of the data, say a single column of a table. Or when a frontend needs to display/visualize the data.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/__init__.py
Attributes¶
data_type_name: str property ¶
data_type_hash: int property ¶
info: DataTypeInfo property ¶
characteristics: DataTypeCharacteristics property ¶
type_config: TYPE_CONFIG_CLS property ¶
Functions¶
retrieve_available_type_profiles() -> Mapping[str, Mapping[str, Any]] classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/__init__.py
python_class() -> Type[TYPE_PYTHON_CLS] abstractmethod classmethod ¶

The Python class that the internal 'data' attribute of a value has.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/__init__.py
data_type_config_class() -> Type[TYPE_CONFIG_CLS] classmethod ¶

The Python class that holds the (optional) configuration for a data type instance.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/__init__.py
calculate_hash(data: SerializedData) -> str ¶

Calculate the hash of the value.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/__init__.py
calculate_size(data: SerializedData) -> int ¶

Calculate the size of the value.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/__init__.py
serialize_as_json(data: Any) -> SerializedData ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/__init__.py
serialize(data: TYPE_PYTHON_CLS) -> Union[None, str, SerializedData] ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/__init__.py
assemble_value(value_id: uuid.UUID, data: Any, schema: ValueSchema, environment_hashes: Mapping[str, Mapping[str, str]], serialized: Union[str, SerializedData], status: Union[ValueStatus, str], value_hash: str, value_size: int, pedigree: ValuePedigree, kiara_id: uuid.UUID, pedigree_output_name: str) -> Tuple[Value, Any] ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/__init__.py
parse_python_obj(data: Any) -> TYPE_PYTHON_CLS ¶

Parse a value into a supported python type.

This exists to make it easier to do trivial conversions (e.g. from a date string to a datetime object). If you choose to overwrite this method, make 100% sure that you don't change the meaning of the value, and try to avoid adding or removing information from the data (e.g. by changing the resolution of a date).

v: the value

'None', if no parsing was done and the original value should be used, otherwise return the parsed Python object

Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/__init__.py
create_renderable(**config) ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/__init__.py

included_core_types
Attributes¶
SCALAR_CHARACTERISTICS = DataTypeCharacteristics(is_scalar=True, is_json_serializable=True) module-attribute ¶
KIARA_MODEL_CLS = TypeVar('KIARA_MODEL_CLS', bound=KiaraModel) module-attribute ¶
Classes¶
NoneType ¶

Bases: DataType[SpecialValue, DataTypeConfig]

Type indicating a 'None' value.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
Functions¶
python_class() -> Type classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
calculate_hash(data: Any) -> str ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
calculate_size(data: Any) -> int ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
parse_python_obj(data: Any) -> SpecialValue ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
pretty_print_as__string(value: Value, render_config: Mapping[str, Any]) -> Any ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
pretty_print_as__terminal_renderable(value: Value, render_config: Mapping[str, Any]) ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
AnyType ¶

Bases: DataType[TYPE_PYTHON_CLS, TYPE_CONFIG_CLS], Generic[TYPE_PYTHON_CLS, TYPE_CONFIG_CLS]

'Any' type, the parent type for most other types.

This type acts as the parents for all (or at least most) non-internal value types. There are some generic operations (like 'persist_value', or 'pretty_print') which are implemented for this type, so it's descendents have a fallback option in case no subtype-specific operations are implemented for it. In general, it is not recommended to use the 'any' type as module input or output, but it is possible. Values of type 'any' are not allowed to be persisted (at the moment, this might or might not change).
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
Functions¶
python_class() -> Type classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
pretty_print_as__string(value: Value, render_config: Mapping[str, Any]) -> Any ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
pretty_print_as__terminal_renderable(value: Value, render_config: Mapping[str, Any]) ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
render_as__string(value: Value, render_config: Mapping[str, Any], manifest: Manifest) ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
render_as__terminal_renderable(value: Value, render_config: Mapping[str, Any], manifest: Manifest) -> RenderableType ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
BytesType ¶

Bases: AnyType[bytes, DataTypeConfig]

An array of bytes.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
Functions¶
python_class() -> Type classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
serialize(data: bytes) -> SerializedData ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
StringTypeConfig ¶

Bases: DataTypeConfig
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
Attributes¶
allowed_strings: Union[None, List[str]] = Field(description='A list of allowed strings, if empty or None, any string is allowed.') class-attribute instance-attribute ¶
StringType ¶

Bases: AnyType[str, StringTypeConfig]

A string.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
Functions¶
data_type_config_class() -> Type[TYPE_CONFIG_CLS] classmethod ¶

The Python class that holds the (optional) configuration for a data type instance.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
python_class() -> Type classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
serialize(data: str) -> SerializedData ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
parse_python_obj(data: Any) -> str ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
pretty_print_as__bytes(value: Value, render_config: Mapping[str, Any]) ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
BooleanType ¶

Bases: AnyType[bool, DataTypeConfig]

A boolean.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
Functions¶
python_class() -> Type classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
serialize(data: bool) -> SerializedData ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
parse_python_obj(data: Any) -> bool ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
validate(value: Any) ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
DictValueType ¶

Bases: AnyType[KiaraDict, DataTypeConfig]

A dictionary.

In addition to the actual dictionary value, this value type comes also with an optional schema, describing the dictionary. In case no schema was attached, a simple generic one is attached. This data type is backed by the [DictModel][kiara_plugin.core_types.models.DictModel] class.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
Functions¶
python_class() -> Type classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
parse_python_obj(data: Any) -> KiaraDict ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
serialize(data: KiaraDict) -> SerializedData ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
render_as__terminal_renderable(value: Value, render_config: Mapping[str, Any], manifest: Manifest) -> RenderableType ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
KiaraModelValueBaseType ¶

Bases: AnyType[KIARA_MODEL_CLS, TYPE_CONFIG_CLS], Generic[KIARA_MODEL_CLS, TYPE_CONFIG_CLS]

A value type that is used internally.

This type should not be used by user-facing modules and/or operations.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
Functions¶
data_type_config_class() -> Type[TYPE_CONFIG_CLS] classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
create_model_from_python_obj(data: Any) -> KIARA_MODEL_CLS abstractmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
parse_python_obj(data: Any) -> KIARA_MODEL_CLS ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/__init__.py
Functions

filesystem
Attributes¶
logger = structlog.getLogger() module-attribute ¶
SUPPORTED_FILE_TYPES = ['csv', 'json', 'text', 'binary'] module-attribute ¶
Classes¶
FileTypeConfig ¶

Bases: DataTypeConfig
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/filesystem.py
Attributes¶
content_type: Union[str, None] = Field(description='The content type of this file.', default=None) class-attribute instance-attribute ¶
FileValueType ¶

Bases: KiaraModelValueBaseType[KiaraFile, FileTypeConfig]

A file.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/filesystem.py
Functions¶
retrieve_available_type_profiles() -> Mapping[str, Mapping[str, Any]] classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/filesystem.py
python_class() -> Type classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/filesystem.py
data_type_config_class() -> Type[FileTypeConfig] classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/filesystem.py
serialize(data: KiaraFile) -> SerializedData ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/filesystem.py
create_model_from_python_obj(data: Any) -> KiaraFile ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/filesystem.py
FileBundleValueType ¶

Bases: AnyType[KiaraFileBundle, FileTypeConfig]

A bundle of files (like a folder, zip archive, etc.).
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/filesystem.py
Functions¶
retrieve_available_type_profiles() -> Mapping[str, Mapping[str, Any]] classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/filesystem.py
python_class() -> Type classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/filesystem.py
data_type_config_class() -> Type[FileTypeConfig] classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/filesystem.py
serialize(data: KiaraFileBundle) -> SerializedData ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/filesystem.py
parse_python_obj(data: Any) -> KiaraFileBundle ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/filesystem.py

internal
Attributes¶
logger = structlog.getLogger() module-attribute ¶
Classes¶
InternalType ¶

Bases: DataType[TYPE_PYTHON_CLS, TYPE_CONFIG_CLS], Generic[TYPE_PYTHON_CLS, TYPE_CONFIG_CLS]

'A 'marker' base data type for data types that are (mainly) used internally in kiara..
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/internal/__init__.py
Functions¶
python_class() -> Type classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/internal/__init__.py
pretty_print_as__string(value: Value, render_config: Mapping[str, Any]) -> Any ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/internal/__init__.py
pretty_print_as__terminal_renderable(value: Value, render_config: Mapping[str, Any]) ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/internal/__init__.py
render_as__string(value: Value, render_config: RenderScene, manifest: Manifest) ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/internal/__init__.py
render_as__terminal_renderable(value: Value, render_config: RenderScene, manifest: Manifest) ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/internal/__init__.py
TerminalRenderable ¶

Bases: InternalType[object, DataTypeConfig]

A list of renderable objects, used in the 'rich' Python library, to print to the terminal or in Jupyter.

Internally, the result list items can be either a string, a 'rich.console.ConsoleRenderable', or a 'rich.console.RichCast'.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/internal/__init__.py
Functions¶
python_class() -> Type classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/internal/__init__.py
InternalModelTypeConfig ¶

Bases: DataTypeConfig
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/internal/__init__.py
Attributes¶
kiara_model_id: Union[str, None] = Field(description="The Python class backing this model (must sub-class 'KiaraModel').") class-attribute instance-attribute ¶
InternalModelValueType ¶

Bases: InternalType[KiaraModel, InternalModelTypeConfig]

A value type that is used internally.

This type should not be used by user-facing modules and/or operations.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/internal/__init__.py
Functions¶
data_type_config_class() -> Type[InternalModelTypeConfig] classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/internal/__init__.py
serialize(data: KiaraModel) -> Union[str, SerializedData] ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/internal/__init__.py
python_class() -> Type classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/internal/__init__.py
parse_python_obj(data: Any) -> KiaraModel ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/internal/__init__.py
DocumentationModelValueType ¶

Bases: InternalModelValueType

Documentation for an internal entity.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/internal/__init__.py
Functions¶
parse_python_obj(data: Any) -> DocumentationMetadataModel ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/internal/__init__.py
python_class() -> Type classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/internal/__init__.py

render_value
Classes¶
RenderSceneTypeConfig ¶

Bases: DataTypeConfig
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/internal/render_value.py
Attributes¶
kiara_model_id: Union[str, None] = Field(description="The id of the model backing this render (Python class must sub-class 'RenderScene').", default=None) class-attribute instance-attribute ¶
RenderSceneDataType ¶

Bases: InternalType[RenderScene, RenderSceneTypeConfig]

A value type to contain information about how to render a value in a specific render scenario.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/internal/render_value.py
Attributes¶
model_cls: Type[RenderScene] property ¶
Functions¶
python_class() -> Type classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/internal/render_value.py
data_type_config_class() -> Type[RenderSceneTypeConfig] classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/internal/render_value.py
parse_python_obj(data: Any) -> RenderScene ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/internal/render_value.py
RenderValueResultDataType ¶

Bases: InternalType[RenderValueResult, DataTypeConfig]

A value type to contain information about how to render a value in a specific render scenario.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/internal/render_value.py
Functions¶
python_class() -> Type classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/internal/render_value.py
parse_python_obj(data: Any) -> RenderValueResult ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/internal/render_value.py
Functions

metadata
Classes¶
Metadata ¶

Bases: KiaraModel
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/metadata.py
MetadataTypeConfig ¶

Bases: DataTypeConfig
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/metadata.py
MetadataValueType ¶

Bases: KiaraModelValueBaseType[Metadata, MetadataTypeConfig]

A file.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/metadata.py
Functions¶
retrieve_available_type_profiles() -> Mapping[str, Mapping[str, Any]] classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/metadata.py
python_class() -> Type classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/metadata.py
data_type_config_class() -> Type[MetadataTypeConfig] classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/metadata.py
serialize(data: Metadata) -> SerializedData ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/metadata.py
create_model_from_python_obj(data: Any) -> Metadata ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/metadata.py

serialization
Attributes¶
Classes¶
PythonObjectType ¶

Bases: InternalType[object, DataTypeConfig]

A 'plain' Python object.

This data type is mostly used internally, for hading over data in (de-)serialization operations.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/serialization.py
Functions¶
python_class() -> Type classmethod ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/serialization.py
parse_python_obj(data: Any) -> object ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/serialization.py
calculate_hash(data: SerializedData) -> str ¶

Calculate the hash of the value.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/serialization.py
calculate_size(data: SerializedData) -> int ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/data_types/included_core_types/serialization.py

defaults
Attributes¶
kiara_app_dirs = AppDirs('kiara', 'DHARPA') module-attribute ¶
KIARA_CONFIG_FILE_NAME = 'kiara.config' module-attribute ¶
KIARA_DEV_CONFIG_FILE_NAME = 'dev.config' module-attribute ¶
KIARA_MAIN_CONFIG_FILE = os.path.join(kiara_app_dirs.user_config_dir, KIARA_CONFIG_FILE_NAME) module-attribute ¶
KIARA_DEV_CONFIG_FILE = os.path.join(kiara_app_dirs.user_config_dir, KIARA_DEV_CONFIG_FILE_NAME) module-attribute ¶
KIARA_MAIN_CONTEXTS_PATH = os.path.join(kiara_app_dirs.user_config_dir, 'contexts') module-attribute ¶
KIARA_MAIN_CONTEXT_DATA_PATH = os.path.join(kiara_app_dirs.user_data_dir, 'context_data') module-attribute ¶
KIARA_MAIN_CONTEXT_LOCKS_PATH = os.path.join(kiara_app_dirs.user_data_dir, 'context_locks') module-attribute ¶
KIARA_DEFAULT_STAGES_EXTRACTION_TYPE = 'early' module-attribute ¶
MODULE_TYPE_KEY = 'module_type' module-attribute ¶

The key to specify the type of a module.
STEP_ID_KEY = 'step_id' module-attribute ¶

The key to specify the step id.
INVALID_VALUE_NAMES = ['kiara', 'callbacks'] module-attribute ¶

List of reserved names, inputs/outputs can't use those.
DEFAULT_DATA_STORE_MARKER = 'default_data_store' module-attribute ¶

Name for the default context data store.
DEFAULT_JOB_STORE_MARKER = 'default_job_store' module-attribute ¶

Name for the default context job store.
DEFAULT_ALIAS_STORE_MARKER = 'default_alias_store' module-attribute ¶

Name for the default context alias store.
DEFAULT_WORKFLOW_STORE_MARKER = 'default_workflow_store' module-attribute ¶

Name for the default context workflow store.
METADATA_DESTINY_STORE_MARKER = 'metadata' module-attribute ¶

Name for the default context destiny store.
PIPELINE_PARENT_MARKER = '__pipeline__' module-attribute ¶

Marker string in the pipeline structure that indicates a parent pipeline element.
DEFAULT_EXCLUDE_DIRS = ['.git', '.tox', '.cache'] module-attribute ¶

List of directory names to exclude by default when walking a folder recursively.
DEFAULT_EXCLUDE_FILES = ['.DS_Store'] module-attribute ¶

List of file names to exclude by default when reading folders.
VALID_PIPELINE_FILE_EXTENSIONS = ['yaml', 'yml', 'json'] module-attribute ¶

File extensions a kiara pipeline/workflow file can have.
MODULE_TYPE_NAME_KEY = 'module_type_name' module-attribute ¶

The string for the module type name in a module configuration dict.
DEFAULT_PIPELINE_PARENT_ID = '__kiara__' module-attribute ¶

Default parent id for pipeline objects that are not associated with a workflow.
DEFAULT_NO_DESC_VALUE = '-- n/a --' module-attribute ¶
NOT_AVAILBLE_MARKER = '-- n/a --' module-attribute ¶
KIARA_MODULE_METADATA_ATTRIBUTE = 'KIARA_METADATA' module-attribute ¶
KIARA_DEFAULT_ROOT_NODE_ID = '__self__' module-attribute ¶
VALUE_ATTR_DELIMITER = '::' module-attribute ¶
VALID_VALUE_QUERY_CATEGORIES = ['data', 'properties'] module-attribute ¶
DEFAULT_PRETTY_PRINT_CONFIG = {'max_no_rows': 32, 'max_row_height': 1, 'max_cell_length': 80} module-attribute ¶
NO_HASH_MARKER = '--no-hash--' module-attribute ¶

Marker string to indicate no hash was calculated.
NO_VALUE_ID_MARKER = '--no-value-id--' module-attribute ¶

Marker string to indicate no value id exists.
DEFAULT_TO_JSON_CONFIG: typing.Mapping[str, typing.Any] = {'indent': 2} module-attribute ¶
COLOR_LIST = ['green', 'blue', 'bright_magenta', 'dark_red', 'gold3', 'cyan', 'orange1', 'light_yellow3', 'light_slate_grey', 'deep_pink4'] module-attribute ¶
VOID_KIARA_ID = uuid.UUID('00000000-0000-0000-0000-000000000000') module-attribute ¶
NOT_SET_VALUE_ID = uuid.UUID('00000000-0000-0000-0000-000000000001') module-attribute ¶
NONE_VALUE_ID = uuid.UUID('00000000-0000-0000-0000-000000000002') module-attribute ¶
NONE_STORE_ID = uuid.UUID('00000000-0000-0000-0000-000000000003') module-attribute ¶
ORPHAN_PEDIGREE_OUTPUT_NAME = '__orphan__' module-attribute ¶
NO_MODULE_TYPE = 'EXTERNAL_DATA' module-attribute ¶
INVALID_HASH_MARKER = '' module-attribute ¶
INVALID_SIZE_MARKER = -1 module-attribute ¶
NO_SERIALIZATION_MARKER = '-- serialization not supported --' module-attribute ¶
KIARA_ROOT_TYPE_NAME = '__kiara__' module-attribute ¶
SERIALIZED_DATA_TYPE_NAME = 'serialized_data' module-attribute ¶
LOAD_CONFIG_DATA_TYPE_NAME = 'load_config' module-attribute ¶
PYDANTIC_USE_CONSTRUCT: bool = False module-attribute ¶
STRICT_CHECKS: bool = False module-attribute ¶
KIARA_HASH_FUNCTION = mmh3.hash module-attribute ¶
ANY_TYPE_NAME = 'any' module-attribute ¶
DEFAULT_ENV_HASH_KEY = 'default' module-attribute ¶
LOAD_CONFIG_PLACEHOLDER = '__placeholder__' module-attribute ¶
DATA_TYPE_CATEGORY_ID = 'metadata.type' module-attribute ¶
DATA_TYPES_CATEGORY_ID = 'data_types' module-attribute ¶
DATA_TYPE_CLASS_CATEGORY_ID = 'data_type_class' module-attribute ¶
DATA_WRAP_CATEGORY_ID = 'instance.datawrap' module-attribute ¶
UNOLOADABLE_DATA_CATEGORY_ID = 'instance.unloadable_data' module-attribute ¶
VALUE_CATEGORY_ID = 'instance.value' module-attribute ¶
VALUES_CATEGORY_ID = 'instance.values' module-attribute ¶
VALUE_METADATA_CATEGORY_ID = 'instance.value_metadata' module-attribute ¶
MODULE_CONFIG_SCHEMA_CATEGORY_ID = 'module_config_schema' module-attribute ¶
MODULE_CONFIG_CATEGORY_ID = 'module_config' module-attribute ¶
MODULE_CONFIG_METADATA_CATEGORY_ID = 'metadata.module_config' module-attribute ¶
MODULE_TYPE_CATEGORY_ID = 'metadata.module' module-attribute ¶
MODULE_TYPES_CATEGORY_ID = 'modules' module-attribute ¶
BATCH_CONFIG_TYPE_CATEGORY_ID = 'instance.batch_config' module-attribute ¶
PIPELINE_TYPE_CATEGORY_ID = 'metadata.pipeline' module-attribute ¶
PIPELINE_TYPES_CATEGORY_ID = 'pipelines' module-attribute ¶
PIPELINE_STEP_TYPE_CATEGORY_ID = 'instance.pipeline_step' module-attribute ¶
PIPELINE_CONFIG_TYPE_CATEGORY_ID = 'instance.pipeline_config' module-attribute ¶
PIPELINE_STRUCTURE_TYPE_CATEGORY_ID = 'instance.pipeline_structure' module-attribute ¶
PIPELINE_STEP_DETAILS_CATEGORY_ID = 'instance.pipeline_step_details' module-attribute ¶
OPERATION_TYPE_CATEGORY_ID = 'metadata.operation_type' module-attribute ¶
OPERATION_TYPES_CATEGORY_ID = 'operation_types' module-attribute ¶
OPERATIONS_CATEGORY_ID = 'operations' module-attribute ¶
OPERATION_CATEOGORY_ID = 'instance.operation' module-attribute ¶
OPERATION_CONFIG_CATEOGORY_ID = 'instance.operation_config' module-attribute ¶
OPERATION_DETAILS_CATEOGORY_ID = 'instance.operation_details' module-attribute ¶
OPERATION_INPUTS_SCHEMA_CATEOGORY_ID = 'instance.operation_input_schema' module-attribute ¶
OPERATION_OUTPUTS_SCHEMA_CATEOGORY_ID = 'instance.operation_output_schema' module-attribute ¶
ENVIRONMENT_TYPE_CATEGORY_ID = 'instance.environment' module-attribute ¶
DOCUMENTATION_CATEGORY_ID = 'documentation' module-attribute ¶
VALUE_SCHEMA_CATEGORY_ID = 'value_schema' module-attribute ¶
JOB_CATEGORY_ID = 'instance.job' module-attribute ¶
JOB_LOG_CATEGORY_ID = 'job_log' module-attribute ¶
DESTINY_CATEGORY_ID = 'instance.destiny' module-attribute ¶
CONTEXT_INFO_CATEGORY_ID = 'info.context' module-attribute ¶
CONTEXT_METADATA_CATEOGORY_ID = 'metadata.context' module-attribute ¶
AUTHORS_METADATA_CATEGORY_ID = 'metadata.authors' module-attribute ¶
JOB_CONFIG_TYPE_CATEGORY_ID = 'instance.job' module-attribute ¶
JOB_RECORD_TYPE_CATEGORY_ID = 'instance.job_record' module-attribute ¶
VALUE_PEDIGREE_TYPE_CATEGORY_ID = 'instance.value_pedigree' module-attribute ¶
FILE_MODEL_CATEOGORY_ID = 'instance.model.file' module-attribute ¶
FILE_BUNDLE_MODEL_CATEOGORY_ID = 'instance.model.file_bundle' module-attribute ¶
ARRAY_MODEL_CATEOGORY_ID = 'instance.model.array' module-attribute ¶
TABLE_MODEL_CATEOGORY_ID = 'instance.model.table' module-attribute ¶
DEFAULT_CONTEXT_NAME = 'default' module-attribute ¶
KIARA_MODEL_ID_KEY = 'kiara_model_id' module-attribute ¶
KIARA_MODEL_DATA_KEY = 'data' module-attribute ¶
KIARA_MODEL_SCHEMA_KEY = 'schema' module-attribute ¶
SYMLINK_ISSUE_MSG = "Your operating system does not support symlinks, which is a requirement for kiara to work.\n\nYou can enable developer mode to fix this issue:\n\n- open 'Settings'\n- click 'Updates & Security'\n- click 'For developers'\n- make sure 'Developer Mode' is turned on\n- log out of your Windows session, and log back in again\n\nFor more information, please visit:\n- https://dharpa.org/kiara.documentation/latest/installation/#enable-developer-mode\n- https://learn.microsoft.com/en-us/windows/apps/get-started/enable-your-device-for-development\n" module-attribute ¶
OFFICIAL_KIARA_PLUGINS = ['core_types', 'tabular', 'onboarding', 'network_analysis', 'language_processing'] module-attribute ¶
Classes¶
SpecialValue ¶

Bases: Enum
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/defaults.py
Attributes¶
NOT_SET = '__not_set__' class-attribute instance-attribute ¶
NO_VALUE = '__no_value__' class-attribute instance-attribute 

doc

Main module for code that helps with documentation auto-generation in supported projects.
Classes¶
FrklDocumentationPlugin ¶

Bases: BasePlugin

mkdocs plugin to render API documentation for a project.

To add to a project, add this to the 'plugins' section of a mkdocs config file:

- frkl-docgen:
    main_module: "module_name"

This will add an API reference navigation item to your page navigation, with auto-generated entries for every Python module in your package.
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/doc/__init__.py
Attributes¶
config_scheme = (('main_module', mkdocs.config.config_options.Type(str))) class-attribute instance-attribute ¶
Functions¶
on_files(files: Files, config: Config) -> Files ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/doc/__init__.py
on_page_content(html, page: Page, config: Config, files: Files) ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/doc/__init__.py
on_nav(nav: Navigation, config: Config, files: Files) ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/doc/__init__.py
on_post_build(config: Config) ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/doc/__init__.py

Package content¶

The kiara main package also contains basic, low-level data-types, modules and operations that are necessary for its core functionality. This page lists all of them.
data_types¶

    any: 'Any' type, the parent type for most other types.

    boolean: A boolean.

    bytes: An array of bytes.

    dict: A dictionary.

    doc: Documentation for an internal entity.

    file: A file.

    file_bundle: A bundle of files (like a folder, zip archive, etc.).

    internal: 'A 'marker' base data type for data types that are (mainly) used internally in kiara..

    internal_model: A value type that is used internally.

    none: Type indicating a 'None' value.

    [python_object][kiara_info.data_types.python_object]: A 'plain' Python object.

    render_scene: A value type to contain information about how to render a value in a specific render scenario.

    render_value_result: A value type to contain information about how to render a value in a specific render scenario.

    string: A string.

    terminal_renderable: A list of renderable objects, used in the 'rich' Python library, to print to the terminal or in Jupyter.

any¶
type_name 	any 	The registered name for this item type.
documentation 	
description 	'Any' type, the parent type for most other types. 	Short description of the item.
doc 	This type acts as the parents for all (or at least most) non-internal value types. There are some generic operations (like 'persist_value', or 'pretty_print') which are implemented for this type, so it's descendents have a fallback option in case no subtype-specific operations are implemented for it. In general, it is not recommended to use the 'any' type as module input or output, but it is possible. Values of type 'any' are not allowed to be persisted (at the moment, this might or might not change). 	Detailed documentation of the item (in markdown).
	Documentation for the item.
authors 	
authors 	

    name 	Markus Binsteiner 	The full name of the author.
    email 	markus@frkl.io 	The email address of the author

	The authors/creators of this item.
	Information about authorship for the item.
context 	
references 	
source_repo 	
url 	https://github.com/DHARPA-Project/kiara 	The url.
desc 	The kiara project git repository. 	A short description of the link content.
documentation 	
url 	https://dharpa.org/kiara_documentation/ 	The url.
desc 	The url for kiara documentation. 	A short description of the link content.
	References for the item.
tags 	

	A list of tags for the item.
labels 	
package 	kiara
	A list of labels for the item.
	Generic properties of this item (description, tags, labels, references, ...).
python_class 	
python_class_name 	AnyType 	The name of the Python class.
python_module_name 	kiara.data_types.included_core_types 	The name of the Python module this class lives in.
full_name 	kiara.data_types.included_core_types.AnyType 	The full class namespace.
	The python class that implements this module type.
value_cls 	
python_class_name 	object 	The name of the Python class.
python_module_name 	builtins 	The name of the Python module this class lives in.
full_name 	object 	The full class namespace.
	The python class of the value itself.
data_type_config_cls 	
python_class_name 	DataTypeConfig 	The name of the Python class.
python_module_name 	kiara.data_types 	The name of the Python module this class lives in.
full_name 	kiara.data_types.DataTypeConfig 	The full class namespace.
	The python class holding the schema for configuring this type.
lineage 	

    any

	This types lineage.
qualifier_profiles 	
	A map of qualifier profiles for this data types.
boolean¶
type_name 	boolean 	The registered name for this item type.
documentation 	
description 	A boolean. 	Short description of the item.
doc 	None 	Detailed documentation of the item (in markdown).
	Documentation for the item.
authors 	
authors 	

    name 	Markus Binsteiner 	The full name of the author.
    email 	markus@frkl.io 	The email address of the author

	The authors/creators of this item.
	Information about authorship for the item.
context 	
references 	
source_repo 	
url 	https://github.com/DHARPA-Project/kiara 	The url.
desc 	The kiara project git repository. 	A short description of the link content.
documentation 	
url 	https://dharpa.org/kiara_documentation/ 	The url.
desc 	The url for kiara documentation. 	A short description of the link content.
	References for the item.
tags 	

	A list of tags for the item.
labels 	
package 	kiara
	A list of labels for the item.
	Generic properties of this item (description, tags, labels, references, ...).
python_class 	
python_class_name 	BooleanType 	The name of the Python class.
python_module_name 	kiara.data_types.included_core_types 	The name of the Python module this class lives in.
full_name 	kiara.data_types.included_core_types.BooleanType 	The full class namespace.
	The python class that implements this module type.
value_cls 	
python_class_name 	bool 	The name of the Python class.
python_module_name 	builtins 	The name of the Python module this class lives in.
full_name 	bool 	The full class namespace.
	The python class of the value itself.
data_type_config_cls 	
python_class_name 	DataTypeConfig 	The name of the Python class.
python_module_name 	kiara.data_types 	The name of the Python module this class lives in.
full_name 	kiara.data_types.DataTypeConfig 	The full class namespace.
	The python class holding the schema for configuring this type.
lineage 	

    boolean
    any

	This types lineage.
qualifier_profiles 	
	A map of qualifier profiles for this data types.
bytes¶
type_name 	bytes 	The registered name for this item type.
documentation 	
description 	An array of bytes. 	Short description of the item.
doc 	None 	Detailed documentation of the item (in markdown).
	Documentation for the item.
authors 	
authors 	

    name 	Markus Binsteiner 	The full name of the author.
    email 	markus@frkl.io 	The email address of the author

	The authors/creators of this item.
	Information about authorship for the item.
context 	
references 	
source_repo 	
url 	https://github.com/DHARPA-Project/kiara 	The url.
desc 	The kiara project git repository. 	A short description of the link content.
documentation 	
url 	https://dharpa.org/kiara_documentation/ 	The url.
desc 	The url for kiara documentation. 	A short description of the link content.
	References for the item.
tags 	

	A list of tags for the item.
labels 	
package 	kiara
	A list of labels for the item.
	Generic properties of this item (description, tags, labels, references, ...).
python_class 	
python_class_name 	BytesType 	The name of the Python class.
python_module_name 	kiara.data_types.included_core_types 	The name of the Python module this class lives in.
full_name 	kiara.data_types.included_core_types.BytesType 	The full class namespace.
	The python class that implements this module type.
value_cls 	
python_class_name 	bytes 	The name of the Python class.
python_module_name 	builtins 	The name of the Python module this class lives in.
full_name 	bytes 	The full class namespace.
	The python class of the value itself.
data_type_config_cls 	
python_class_name 	DataTypeConfig 	The name of the Python class.
python_module_name 	kiara.data_types 	The name of the Python module this class lives in.
full_name 	kiara.data_types.DataTypeConfig 	The full class namespace.
	The python class holding the schema for configuring this type.
lineage 	

    bytes
    any

	This types lineage.
qualifier_profiles 	
	A map of qualifier profiles for this data types.
dict¶
type_name 	dict 	The registered name for this item type.
documentation 	
description 	A dictionary. 	Short description of the item.
doc 	In addition to the actual dictionary value, this value type comes also with an optional schema, describing the dictionary. In case no schema was attached, a simple generic one is attached. This data type is backed by the [DictModel][kiara_plugin.core_types.models.DictModel] class. 	Detailed documentation of the item (in markdown).
	Documentation for the item.
authors 	
authors 	

    name 	Markus Binsteiner 	The full name of the author.
    email 	markus@frkl.io 	The email address of the author

	The authors/creators of this item.
	Information about authorship for the item.
context 	
references 	
source_repo 	
url 	https://github.com/DHARPA-Project/kiara 	The url.
desc 	The kiara project git repository. 	A short description of the link content.
documentation 	
url 	https://dharpa.org/kiara_documentation/ 	The url.
desc 	The url for kiara documentation. 	A short description of the link content.
	References for the item.
tags 	

	A list of tags for the item.
labels 	
package 	kiara
	A list of labels for the item.
	Generic properties of this item (description, tags, labels, references, ...).
python_class 	
python_class_name 	DictValueType 	The name of the Python class.
python_module_name 	kiara.data_types.included_core_types 	The name of the Python module this class lives in.
full_name 	kiara.data_types.included_core_types.DictValueType 	The full class namespace.
	The python class that implements this module type.
value_cls 	
python_class_name 	KiaraDict 	The name of the Python class.
python_module_name 	kiara.models.data_types 	The name of the Python module this class lives in.
full_name 	kiara.models.data_types.KiaraDict 	The full class namespace.
	The python class of the value itself.
data_type_config_cls 	
python_class_name 	DataTypeConfig 	The name of the Python class.
python_module_name 	kiara.data_types 	The name of the Python module this class lives in.
full_name 	kiara.data_types.DataTypeConfig 	The full class namespace.
	The python class holding the schema for configuring this type.
lineage 	

    dict
    any

	This types lineage.
qualifier_profiles 	
	A map of qualifier profiles for this data types.
doc¶
type_name 	doc 	The registered name for this item type.
documentation 	
description 	Documentation for an internal entity. 	Short description of the item.
doc 	None 	Detailed documentation of the item (in markdown).
	Documentation for the item.
authors 	
authors 	

    name 	Markus Binsteiner 	The full name of the author.
    email 	markus@frkl.io 	The email address of the author

	The authors/creators of this item.
	Information about authorship for the item.
context 	
references 	
source_repo 	
url 	https://github.com/DHARPA-Project/kiara 	The url.
desc 	The kiara project git repository. 	A short description of the link content.
documentation 	
url 	https://dharpa.org/kiara_documentation/ 	The url.
desc 	The url for kiara documentation. 	A short description of the link content.
	References for the item.
tags 	

	A list of tags for the item.
labels 	
package 	kiara
	A list of labels for the item.
	Generic properties of this item (description, tags, labels, references, ...).
python_class 	
python_class_name 	DocumentationModelValueType 	The name of the Python class.
python_module_name 	kiara.data_types.included_core_types.internal 	The name of the Python module this class lives in.
full_name 	kiara.data_types.included_core_types.internal.DocumentationModelValueType 	The full class namespace.
	The python class that implements this module type.
value_cls 	
python_class_name 	DocumentationMetadataModel 	The name of the Python class.
python_module_name 	kiara.models.documentation 	The name of the Python module this class lives in.
full_name 	kiara.models.documentation.DocumentationMetadataModel 	The full class namespace.
	The python class of the value itself.
data_type_config_cls 	
python_class_name 	InternalModelTypeConfig 	The name of the Python class.
python_module_name 	kiara.data_types.included_core_types.internal 	The name of the Python module this class lives in.
full_name 	kiara.data_types.included_core_types.internal.InternalModelTypeConfig 	The full class namespace.
	The python class holding the schema for configuring this type.
lineage 	

    doc
    internal_model
    internal

	This types lineage.
qualifier_profiles 	
	A map of qualifier profiles for this data types.
file¶
type_name 	file 	The registered name for this item type.
documentation 	
description 	A file. 	Short description of the item.
doc 	None 	Detailed documentation of the item (in markdown).
	Documentation for the item.
authors 	
authors 	

    name 	Markus Binsteiner 	The full name of the author.
    email 	markus@frkl.io 	The email address of the author

	The authors/creators of this item.
	Information about authorship for the item.
context 	
references 	
source_repo 	
url 	https://github.com/DHARPA-Project/kiara 	The url.
desc 	The kiara project git repository. 	A short description of the link content.
documentation 	
url 	https://dharpa.org/kiara_documentation/ 	The url.
desc 	The url for kiara documentation. 	A short description of the link content.
	References for the item.
tags 	

	A list of tags for the item.
labels 	
package 	kiara
	A list of labels for the item.
	Generic properties of this item (description, tags, labels, references, ...).
python_class 	
python_class_name 	FileValueType 	The name of the Python class.
python_module_name 	kiara.data_types.included_core_types.filesystem 	The name of the Python module this class lives in.
full_name 	kiara.data_types.included_core_types.filesystem.FileValueType 	The full class namespace.
	The python class that implements this module type.
value_cls 	
python_class_name 	KiaraFile 	The name of the Python class.
python_module_name 	kiara.models.filesystem 	The name of the Python module this class lives in.
full_name 	kiara.models.filesystem.KiaraFile 	The full class namespace.
	The python class of the value itself.
data_type_config_cls 	
python_class_name 	FileTypeConfig 	The name of the Python class.
python_module_name 	kiara.data_types.included_core_types.filesystem 	The name of the Python module this class lives in.
full_name 	kiara.data_types.included_core_types.filesystem.FileTypeConfig 	The full class namespace.
	The python class holding the schema for configuring this type.
lineage 	

    file
    any

	This types lineage.
qualifier_profiles 	
csv_file 	
type_name 	file
type_config 	
content_type 	csv
json_file 	
type_name 	file
type_config 	
content_type 	json
text_file 	
type_name 	file
type_config 	
content_type 	text
binary_file 	
type_name 	file
type_config 	
content_type 	binary
	A map of qualifier profiles for this data types.
file_bundle¶
type_name 	file_bundle 	The registered name for this item type.
documentation 	
description 	A bundle of files (like a folder, zip archive, etc.). 	Short description of the item.
doc 	None 	Detailed documentation of the item (in markdown).
	Documentation for the item.
authors 	
authors 	

    name 	Markus Binsteiner 	The full name of the author.
    email 	markus@frkl.io 	The email address of the author

	The authors/creators of this item.
	Information about authorship for the item.
context 	
references 	
source_repo 	
url 	https://github.com/DHARPA-Project/kiara 	The url.
desc 	The kiara project git repository. 	A short description of the link content.
documentation 	
url 	https://dharpa.org/kiara_documentation/ 	The url.
desc 	The url for kiara documentation. 	A short description of the link content.
	References for the item.
tags 	

	A list of tags for the item.
labels 	
package 	kiara
	A list of labels for the item.
	Generic properties of this item (description, tags, labels, references, ...).
python_class 	
python_class_name 	FileBundleValueType 	The name of the Python class.
python_module_name 	kiara.data_types.included_core_types.filesystem 	The name of the Python module this class lives in.
full_name 	kiara.data_types.included_core_types.filesystem.FileBundleValueType 	The full class namespace.
	The python class that implements this module type.
value_cls 	
python_class_name 	KiaraFileBundle 	The name of the Python class.
python_module_name 	kiara.models.filesystem 	The name of the Python module this class lives in.
full_name 	kiara.models.filesystem.KiaraFileBundle 	The full class namespace.
	The python class of the value itself.
data_type_config_cls 	
python_class_name 	FileTypeConfig 	The name of the Python class.
python_module_name 	kiara.data_types.included_core_types.filesystem 	The name of the Python module this class lives in.
full_name 	kiara.data_types.included_core_types.filesystem.FileTypeConfig 	The full class namespace.
	The python class holding the schema for configuring this type.
lineage 	

    file_bundle
    any

	This types lineage.
qualifier_profiles 	
csv_file_bundle 	
type_name 	file_bundle
type_config 	
content_type 	csv
json_file_bundle 	
type_name 	file_bundle
type_config 	
content_type 	json
text_file_bundle 	
type_name 	file_bundle
type_config 	
content_type 	text
binary_file_bundle 	
type_name 	file_bundle
type_config 	
content_type 	binary
	A map of qualifier profiles for this data types.
internal¶
type_name 	internal 	The registered name for this item type.
documentation 	
description 	'A 'marker' base data type for data types that are (mainly) used internally in kiara.. 	Short description of the item.
doc 	None 	Detailed documentation of the item (in markdown).
	Documentation for the item.
authors 	
authors 	

    name 	Markus Binsteiner 	The full name of the author.
    email 	markus@frkl.io 	The email address of the author

	The authors/creators of this item.
	Information about authorship for the item.
context 	
references 	
source_repo 	
url 	https://github.com/DHARPA-Project/kiara 	The url.
desc 	The kiara project git repository. 	A short description of the link content.
documentation 	
url 	https://dharpa.org/kiara_documentation/ 	The url.
desc 	The url for kiara documentation. 	A short description of the link content.
	References for the item.
tags 	

	A list of tags for the item.
labels 	
package 	kiara
	A list of labels for the item.
	Generic properties of this item (description, tags, labels, references, ...).
python_class 	
python_class_name 	InternalType 	The name of the Python class.
python_module_name 	kiara.data_types.included_core_types.internal 	The name of the Python module this class lives in.
full_name 	kiara.data_types.included_core_types.internal.InternalType 	The full class namespace.
	The python class that implements this module type.
value_cls 	
python_class_name 	object 	The name of the Python class.
python_module_name 	builtins 	The name of the Python module this class lives in.
full_name 	object 	The full class namespace.
	The python class of the value itself.
data_type_config_cls 	
python_class_name 	DataTypeConfig 	The name of the Python class.
python_module_name 	kiara.data_types 	The name of the Python module this class lives in.
full_name 	kiara.data_types.DataTypeConfig 	The full class namespace.
	The python class holding the schema for configuring this type.
lineage 	

    internal

	This types lineage.
qualifier_profiles 	
	A map of qualifier profiles for this data types.
internal_model¶
type_name 	internal_model 	The registered name for this item type.
documentation 	
description 	A value type that is used internally. 	Short description of the item.
doc 	This type should not be used by user-facing modules and/or operations. 	Detailed documentation of the item (in markdown).
	Documentation for the item.
authors 	
authors 	

    name 	Markus Binsteiner 	The full name of the author.
    email 	markus@frkl.io 	The email address of the author

	The authors/creators of this item.
	Information about authorship for the item.
context 	
references 	
source_repo 	
url 	https://github.com/DHARPA-Project/kiara 	The url.
desc 	The kiara project git repository. 	A short description of the link content.
documentation 	
url 	https://dharpa.org/kiara_documentation/ 	The url.
desc 	The url for kiara documentation. 	A short description of the link content.
	References for the item.
tags 	

	A list of tags for the item.
labels 	
package 	kiara
	A list of labels for the item.
	Generic properties of this item (description, tags, labels, references, ...).
python_class 	
python_class_name 	InternalModelValueType 	The name of the Python class.
python_module_name 	kiara.data_types.included_core_types.internal 	The name of the Python module this class lives in.
full_name 	kiara.data_types.included_core_types.internal.InternalModelValueType 	The full class namespace.
	The python class that implements this module type.
value_cls 	
python_class_name 	KiaraModel 	The name of the Python class.
python_module_name 	kiara.models 	The name of the Python module this class lives in.
full_name 	kiara.models.KiaraModel 	The full class namespace.
	The python class of the value itself.
data_type_config_cls 	
python_class_name 	InternalModelTypeConfig 	The name of the Python class.
python_module_name 	kiara.data_types.included_core_types.internal 	The name of the Python module this class lives in.
full_name 	kiara.data_types.included_core_types.internal.InternalModelTypeConfig 	The full class namespace.
	The python class holding the schema for configuring this type.
lineage 	

    internal_model
    internal

	This types lineage.
qualifier_profiles 	
	A map of qualifier profiles for this data types.
none¶
type_name 	none 	The registered name for this item type.
documentation 	
description 	Type indicating a 'None' value. 	Short description of the item.
doc 	None 	Detailed documentation of the item (in markdown).
	Documentation for the item.
authors 	
authors 	

    name 	Markus Binsteiner 	The full name of the author.
    email 	markus@frkl.io 	The email address of the author

	The authors/creators of this item.
	Information about authorship for the item.
context 	
references 	
source_repo 	
url 	https://github.com/DHARPA-Project/kiara 	The url.
desc 	The kiara project git repository. 	A short description of the link content.
documentation 	
url 	https://dharpa.org/kiara_documentation/ 	The url.
desc 	The url for kiara documentation. 	A short description of the link content.
	References for the item.
tags 	

	A list of tags for the item.
labels 	
package 	kiara
	A list of labels for the item.
	Generic properties of this item (description, tags, labels, references, ...).
python_class 	
python_class_name 	NoneType 	The name of the Python class.
python_module_name 	kiara.data_types.included_core_types 	The name of the Python module this class lives in.
full_name 	kiara.data_types.included_core_types.NoneType 	The full class namespace.
	The python class that implements this module type.
value_cls 	
python_class_name 	SpecialValue 	The name of the Python class.
python_module_name 	kiara.defaults 	The name of the Python module this class lives in.
full_name 	kiara.defaults.SpecialValue 	The full class namespace.
	The python class of the value itself.
data_type_config_cls 	
python_class_name 	DataTypeConfig 	The name of the Python class.
python_module_name 	kiara.data_types 	The name of the Python module this class lives in.
full_name 	kiara.data_types.DataTypeConfig 	The full class namespace.
	The python class holding the schema for configuring this type.
lineage 	

    none

	This types lineage.
qualifier_profiles 	
	A map of qualifier profiles for this data types.
internal¶
type_name 	internal 	The registered name for this item type.
documentation 	
description 	'A 'marker' base data type for data types that are (mainly) used internally in kiara.. 	Short description of the item.
doc 	None 	Detailed documentation of the item (in markdown).
	Documentation for the item.
authors 	
authors 	

    name 	Markus Binsteiner 	The full name of the author.
    email 	markus@frkl.io 	The email address of the author

	The authors/creators of this item.
	Information about authorship for the item.
context 	
references 	
source_repo 	
url 	https://github.com/DHARPA-Project/kiara 	The url.
desc 	The kiara project git repository. 	A short description of the link content.
documentation 	
url 	https://dharpa.org/kiara_documentation/ 	The url.
desc 	The url for kiara documentation. 	A short description of the link content.
	References for the item.
tags 	

	A list of tags for the item.
labels 	
package 	kiara
	A list of labels for the item.
	Generic properties of this item (description, tags, labels, references, ...).
python_class 	
python_class_name 	InternalType 	The name of the Python class.
python_module_name 	kiara.data_types.included_core_types.internal 	The name of the Python module this class lives in.
full_name 	kiara.data_types.included_core_types.internal.InternalType 	The full class namespace.
	The python class that implements this module type.
value_cls 	
python_class_name 	object 	The name of the Python class.
python_module_name 	builtins 	The name of the Python module this class lives in.
full_name 	object 	The full class namespace.
	The python class of the value itself.
data_type_config_cls 	
python_class_name 	DataTypeConfig 	The name of the Python class.
python_module_name 	kiara.data_types 	The name of the Python module this class lives in.
full_name 	kiara.data_types.DataTypeConfig 	The full class namespace.
	The python class holding the schema for configuring this type.
lineage 	

    internal

	This types lineage.
qualifier_profiles 	
	A map of qualifier profiles for this data types.
render_scene¶
type_name 	render_scene 	The registered name for this item type.
documentation 	
description 	A value type to contain information about how to render a value in a specific render scenario. 	Short description of the item.
doc 	None 	Detailed documentation of the item (in markdown).
	Documentation for the item.
authors 	
authors 	

    name 	Markus Binsteiner 	The full name of the author.
    email 	markus@frkl.io 	The email address of the author

	The authors/creators of this item.
	Information about authorship for the item.
context 	
references 	
source_repo 	
url 	https://github.com/DHARPA-Project/kiara 	The url.
desc 	The kiara project git repository. 	A short description of the link content.
documentation 	
url 	https://dharpa.org/kiara_documentation/ 	The url.
desc 	The url for kiara documentation. 	A short description of the link content.
	References for the item.
tags 	

	A list of tags for the item.
labels 	
package 	kiara
	A list of labels for the item.
	Generic properties of this item (description, tags, labels, references, ...).
python_class 	
python_class_name 	RenderSceneDataType 	The name of the Python class.
python_module_name 	kiara.data_types.included_core_types.internal.render_value 	The name of the Python module this class lives in.
full_name 	kiara.data_types.included_core_types.internal.render_value.RenderSceneDataType 	The full class namespace.
	The python class that implements this module type.
value_cls 	
python_class_name 	RenderScene 	The name of the Python class.
python_module_name 	kiara.models.rendering 	The name of the Python module this class lives in.
full_name 	kiara.models.rendering.RenderScene 	The full class namespace.
	The python class of the value itself.
data_type_config_cls 	
python_class_name 	RenderSceneTypeConfig 	The name of the Python class.
python_module_name 	kiara.data_types.included_core_types.internal.render_value 	The name of the Python module this class lives in.
full_name 	kiara.data_types.included_core_types.internal.render_value.RenderSceneTypeConfig 	The full class namespace.
	The python class holding the schema for configuring this type.
lineage 	

    render_scene
    internal

	This types lineage.
qualifier_profiles 	
	A map of qualifier profiles for this data types.
render_value_result¶
type_name 	render_value_result 	The registered name for this item type.
documentation 	
description 	A value type to contain information about how to render a value in a specific render scenario. 	Short description of the item.
doc 	None 	Detailed documentation of the item (in markdown).
	Documentation for the item.
authors 	
authors 	

    name 	Markus Binsteiner 	The full name of the author.
    email 	markus@frkl.io 	The email address of the author

	The authors/creators of this item.
	Information about authorship for the item.
context 	
references 	
source_repo 	
url 	https://github.com/DHARPA-Project/kiara 	The url.
desc 	The kiara project git repository. 	A short description of the link content.
documentation 	
url 	https://dharpa.org/kiara_documentation/ 	The url.
desc 	The url for kiara documentation. 	A short description of the link content.
	References for the item.
tags 	

	A list of tags for the item.
labels 	
package 	kiara
	A list of labels for the item.
	Generic properties of this item (description, tags, labels, references, ...).
python_class 	
python_class_name 	RenderValueResultDataType 	The name of the Python class.
python_module_name 	kiara.data_types.included_core_types.internal.render_value 	The name of the Python module this class lives in.
full_name 	kiara.data_types.included_core_types.internal.render_value.RenderValueResultDataType 	The full class namespace.
	The python class that implements this module type.
value_cls 	
python_class_name 	RenderValueResult 	The name of the Python class.
python_module_name 	kiara.models.rendering 	The name of the Python module this class lives in.
full_name 	kiara.models.rendering.RenderValueResult 	The full class namespace.
	The python class of the value itself.
data_type_config_cls 	
python_class_name 	DataTypeConfig 	The name of the Python class.
python_module_name 	kiara.data_types 	The name of the Python module this class lives in.
full_name 	kiara.data_types.DataTypeConfig 	The full class namespace.
	The python class holding the schema for configuring this type.
lineage 	

    render_value_result
    internal

	This types lineage.
qualifier_profiles 	
	A map of qualifier profiles for this data types.
string¶
type_name 	string 	The registered name for this item type.
documentation 	
description 	A string. 	Short description of the item.
doc 	None 	Detailed documentation of the item (in markdown).
	Documentation for the item.
authors 	
authors 	

    name 	Markus Binsteiner 	The full name of the author.
    email 	markus@frkl.io 	The email address of the author

	The authors/creators of this item.
	Information about authorship for the item.
context 	
references 	
source_repo 	
url 	https://github.com/DHARPA-Project/kiara 	The url.
desc 	The kiara project git repository. 	A short description of the link content.
documentation 	
url 	https://dharpa.org/kiara_documentation/ 	The url.
desc 	The url for kiara documentation. 	A short description of the link content.
	References for the item.
tags 	

	A list of tags for the item.
labels 	
package 	kiara
	A list of labels for the item.
	Generic properties of this item (description, tags, labels, references, ...).
python_class 	
python_class_name 	StringType 	The name of the Python class.
python_module_name 	kiara.data_types.included_core_types 	The name of the Python module this class lives in.
full_name 	kiara.data_types.included_core_types.StringType 	The full class namespace.
	The python class that implements this module type.
value_cls 	
python_class_name 	str 	The name of the Python class.
python_module_name 	builtins 	The name of the Python module this class lives in.
full_name 	str 	The full class namespace.
	The python class of the value itself.
data_type_config_cls 	
python_class_name 	StringTypeConfig 	The name of the Python class.
python_module_name 	kiara.data_types.included_core_types 	The name of the Python module this class lives in.
full_name 	kiara.data_types.included_core_types.StringTypeConfig 	The full class namespace.
	The python class holding the schema for configuring this type.
lineage 	

    string
    any

	This types lineage.
qualifier_profiles 	
	A map of qualifier profiles for this data types.
terminal_renderable¶
type_name 	terminal_renderable 	The registered name for this item type.
documentation 	
description 	A list of renderable objects, used in the 'rich' Python library, to print to the terminal or in Jupyter. 	Short description of the item.
doc 	Internally, the result list items can be either a string, a 'rich.console.ConsoleRenderable', or a 'rich.console.RichCast'. 	Detailed documentation of the item (in markdown).
	Documentation for the item.
authors 	
authors 	

    name 	Markus Binsteiner 	The full name of the author.
    email 	markus@frkl.io 	The email address of the author

	The authors/creators of this item.
	Information about authorship for the item.
context 	
references 	
source_repo 	
url 	https://github.com/DHARPA-Project/kiara 	The url.
desc 	The kiara project git repository. 	A short description of the link content.
documentation 	
url 	https://dharpa.org/kiara_documentation/ 	The url.
desc 	The url for kiara documentation. 	A short description of the link content.
	References for the item.
tags 	

	A list of tags for the item.
labels 	
package 	kiara
	A list of labels for the item.
	Generic properties of this item (description, tags, labels, references, ...).
python_class 	
python_class_name 	TerminalRenderable 	The name of the Python class.
python_module_name 	kiara.data_types.included_core_types.internal 	The name of the Python module this class lives in.
full_name 	kiara.data_types.included_core_types.internal.TerminalRenderable 	The full class namespace.
	The python class that implements this module type.
value_cls 	
python_class_name 	object 	The name of the Python class.
python_module_name 	builtins 	The name of the Python module this class lives in.
full_name 	object 	The full class namespace.
	The python class of the value itself.
data_type_config_cls 	
python_class_name 	DataTypeConfig 	The name of the Python class.
python_module_name 	kiara.data_types 	The name of the Python module this class lives in.
full_name 	kiara.data_types.DataTypeConfig 	The full class namespace.
	The python class holding the schema for configuring this type.
lineage 	

    terminal_renderable
    internal

	This types lineage.
qualifier_profiles

module_types¶

    deserialize.file: Deserialize data to a 'file' value instance.

    deserialize.file_bundle: Deserialize data to a 'file' value instance.

    deserialize.from_json: -- n/a --

    export.file: Export files.

    file_bundle.pick.file: Pick a single file from a file_bundle value.

    file_bundle.pick.sub_folder: Pick a sub-folder from a file_bundle, resulting in a new file_bundle.

    import.local.file: Import a file from the local filesystem.

    import.local.file_bundle: Import a folder (file_bundle) from the local filesystem.

    load.bytes: -- n/a --

    load.internal_model: -- n/a --

    load.string: -- n/a --

    pipeline: A utility module to run multiple connected inner-modules and present it as its own entity.

    pretty_print.any.value: -- n/a --

    pretty_print.value: -- n/a --

    render.value: A module that uses render methods attached to DataType classes.

    unpickle.value: -- n/a --

    value.extract_metadata: Base class to use when writing a module to extract metadata from a file.

deserialize.file¶
type_name 	deserialize.file 	The registered name for this item type.
documentation 	
description 	Deserialize data to a 'file' value instance. 	Short description of the item.
doc 	None 	Detailed documentation of the item (in markdown).
	Documentation for the item.
authors 	
authors 	

    name 	Markus Binsteiner 	The full name of the author.
    email 	markus@frkl.io 	The email address of the author

	The authors/creators of this item.
	Information about authorship for the item.
context 	
references 	
source_repo 	
url 	https://github.com/DHARPA-Project/kiara 	The url.
desc 	The kiara project git repository. 	A short description of the link content.
documentation 	
url 	https://dharpa.org/kiara_documentation/ 	The url.
desc 	The url for kiara documentation. 	A short description of the link content.
	References for the item.
tags 	

	A list of tags for the item.
labels 	
package 	kiara
	A list of labels for the item.
	Generic properties of this item (description, tags, labels, references, ...).
python_class 	
python_class_name 	DeserializeFileModule 	The name of the Python class.
python_module_name 	kiara.modules.included_core_modules.filesystem 	The name of the Python module this class lives in.
full_name 	kiara.modules.included_core_modules.filesystem.DeserializeFileModule 	The full class namespace.
	The python class that implements this module type.
module_src 	class DeserializeFileModule(DeserializeValueModule): """Deserialize data to a 'file' value instance.""" _module_type_name = "deserialize.file" @classmethod def retrieve_supported_target_profiles(cls) -> Mapping[str, Type]: return {"python_object": KiaraFile} @classmethod def retrieve_serialized_value_type(cls) -> str: return "file" @classmethod def retrieve_supported_serialization_profile(cls) -> str: return "copy" def to__python_object(self, data: SerializedData, **config: Any): keys = list(data.get_keys()) keys.remove("__file_metadata__") assert len(keys) == 1 file_metadata_chunks = data.get_serialized_data("__file_metadata__") assert file_metadata_chunks.get_number_of_chunks() == 1 file_metadata_json = list(file_metadata_chunks.get_chunks(as_files=False)) assert len(file_metadata_json) == 1 file_metadata = orjson.loads(file_metadata_json[0]) chunks = data.get_serialized_data(keys[0]) assert chunks.get_number_of_chunks() == 1 files = list(chunks.get_chunks(as_files=True, symlink_ok=True)) assert len(files) == 1 file: str = files[0] # type: ignore _file_name = file_metadata.pop("file_name") _file_metadata = file_metadata.pop("metadata") _file_metadata_schemas = file_metadata.pop("metadata_schemas") fm = KiaraFile.load_file( source=file, file_name=_file_name, ) fm.metadata = _file_metadata fm.metadata_schemas = _file_metadata_schemas return fm 	The source code of the process method of the module.
deserialize.file_bundle¶
type_name 	deserialize.file_bundle 	The registered name for this item type.
documentation 	
description 	Deserialize data to a 'file' value instance. 	Short description of the item.
doc 	None 	Detailed documentation of the item (in markdown).
	Documentation for the item.
authors 	
authors 	

    name 	Markus Binsteiner 	The full name of the author.
    email 	markus@frkl.io 	The email address of the author

	The authors/creators of this item.
	Information about authorship for the item.
context 	
references 	
source_repo 	
url 	https://github.com/DHARPA-Project/kiara 	The url.
desc 	The kiara project git repository. 	A short description of the link content.
documentation 	
url 	https://dharpa.org/kiara_documentation/ 	The url.
desc 	The url for kiara documentation. 	A short description of the link content.
	References for the item.
tags 	

	A list of tags for the item.
labels 	
package 	kiara
	A list of labels for the item.
	Generic properties of this item (description, tags, labels, references, ...).
python_class 	
python_class_name 	DeserializeFileBundleModule 	The name of the Python class.
python_module_name 	kiara.modules.included_core_modules.filesystem 	The name of the Python module this class lives in.
full_name 	kiara.modules.included_core_modules.filesystem.DeserializeFileBundleModule 	The full class namespace.
	The python class that implements this module type.
module_src 	class DeserializeFileBundleModule(DeserializeValueModule): """Deserialize data to a 'file' value instance.""" _module_type_name = "deserialize.file_bundle" @classmethod def retrieve_supported_target_profiles(cls) -> Mapping[str, Type]: return {"python_object": KiaraFileBundle} @classmethod def retrieve_serialized_value_type(cls) -> str: return "file_bundle" @classmethod def retrieve_supported_serialization_profile(cls) -> str: return "copy" def to__python_object(self, data: SerializedData, **config: Any): keys = list(data.get_keys()) keys.remove("__file_metadata__") file_metadata_chunks = data.get_serialized_data("__file_metadata__") assert file_metadata_chunks.get_number_of_chunks() == 1 file_metadata_json = list(file_metadata_chunks.get_chunks(as_files=False)) assert len(file_metadata_json) == 1 metadata = orjson.loads(file_metadata_json[0]) file_metadata = metadata["included_files"] bundle_name = metadata["bundle_name"] # bundle_import_time = metadata["import_time"] sum_size = metadata["size"] number_of_files = metadata["number_of_files"] included_files = {} for rel_path in keys: chunks = data.get_serialized_data(rel_path) assert chunks.get_number_of_chunks() == 1 files = list(chunks.get_chunks(as_files=True, symlink_ok=True)) assert len(files) == 1 file: str = files[0] # type: ignore file_name = file_metadata[rel_path]["file_name"] # import_time = file_metadata[rel_path]["import_time"] fm = KiaraFile.load_file(source=file, file_name=file_name) included_files[rel_path] = fm fb_metadata = metadata.pop("metadata") fb_metadata_schemas = metadata.pop("metadata_schemas") fb = KiaraFileBundle( included_files=included_files, bundle_name=bundle_name, # import_time=bundle_import_time, number_of_files=number_of_files, size=sum_size, metadata=fb_metadata, metadata_schemas=fb_metadata_schemas, ) return fb 	The source code of the process method of the module.
deserialize.from_json¶
type_name 	deserialize.from_json 	The registered name for this item type.
documentation 	
description 	-- n/a -- 	Short description of the item.
doc 	None 	Detailed documentation of the item (in markdown).
	Documentation for the item.
authors 	
authors 	

    name 	Markus Binsteiner 	The full name of the author.
    email 	markus@frkl.io 	The email address of the author

	The authors/creators of this item.
	Information about authorship for the item.
context 	
references 	
source_repo 	
url 	https://github.com/DHARPA-Project/kiara 	The url.
desc 	The kiara project git repository. 	A short description of the link content.
documentation 	
url 	https://dharpa.org/kiara_documentation/ 	The url.
desc 	The url for kiara documentation. 	A short description of the link content.
	References for the item.
tags 	

	A list of tags for the item.
labels 	
package 	kiara
	A list of labels for the item.
	Generic properties of this item (description, tags, labels, references, ...).
python_class 	
python_class_name 	DeserializeFromJsonModule 	The name of the Python class.
python_module_name 	kiara.modules.included_core_modules.serialization 	The name of the Python module this class lives in.
full_name 	kiara.modules.included_core_modules.serialization.DeserializeFromJsonModule 	The full class namespace.
	The python class that implements this module type.
module_src 	class DeserializeFromJsonModule(KiaraModule): _module_type_name: str = "deserialize.from_json" _config_cls = DeserializeJsonConfig def _retrieve_module_characteristics(self) -> ModuleCharacteristics: return DEFAULT_IDEMPOTENT_INTERNAL_MODULE_CHARACTERISTICS def create_inputs_schema( self, ) -> ValueMapSchema: return { "value": { "type": "any", "doc": "The value object to deserialize the data for.", } } def create_outputs_schema( self, ) -> ValueMapSchema: return { "python_object": { "type": "python_object", "doc": "The deserialized python object.", } } def process(self, inputs: ValueMap, outputs: ValueMap): value: Value = inputs.get_value_obj("value") serialized: SerializedData = value.serialized_data chunks = serialized.get_serialized_data(self.get_config_value("result_path")) assert chunks.get_number_of_chunks() == 1 _data = list(chunks.get_chunks(as_files=False)) assert len(_data) == 1 _chunk: bytes = _data[0] # type: ignore deserialized = orjson.loads(_chunk) outputs.set_value("python_object", deserialized) 	The source code of the process method of the module.
export.file¶
type_name 	export.file 	The registered name for this item type.
documentation 	
description 	Export files. 	Short description of the item.
doc 	None 	Detailed documentation of the item (in markdown).
	Documentation for the item.
authors 	
authors 	

    name 	Markus Binsteiner 	The full name of the author.
    email 	markus@frkl.io 	The email address of the author

	The authors/creators of this item.
	Information about authorship for the item.
context 	
references 	
source_repo 	
url 	https://github.com/DHARPA-Project/kiara 	The url.
desc 	The kiara project git repository. 	A short description of the link content.
documentation 	
url 	https://dharpa.org/kiara_documentation/ 	The url.
desc 	The url for kiara documentation. 	A short description of the link content.
	References for the item.
tags 	

	A list of tags for the item.
labels 	
package 	kiara
	A list of labels for the item.
	Generic properties of this item (description, tags, labels, references, ...).
python_class 	
python_class_name 	ExportFileModule 	The name of the Python class.
python_module_name 	kiara.modules.included_core_modules.filesystem 	The name of the Python module this class lives in.
full_name 	kiara.modules.included_core_modules.filesystem.ExportFileModule 	The full class namespace.
	The python class that implements this module type.
module_src 	class ExportFileModule(DataExportModule): """Export files.""" _module_type_name = "export.file" def export__file__as__file(self, value: KiaraFile, base_path: str, name: str): target_path = os.path.join(base_path, value.file_name) shutil.copy2(value.path, target_path) return {"files": target_path} 	The source code of the process method of the module.
file_bundle.pick.file¶
type_name 	file_bundle.pick.file 	The registered name for this item type.
documentation 	
description 	Pick a single file from a file_bundle value. 	Short description of the item.
doc 	None 	Detailed documentation of the item (in markdown).
	Documentation for the item.
authors 	
authors 	

    name 	Markus Binsteiner 	The full name of the author.
    email 	markus@frkl.io 	The email address of the author

	The authors/creators of this item.
	Information about authorship for the item.
context 	
references 	
source_repo 	
url 	https://github.com/DHARPA-Project/kiara 	The url.
desc 	The kiara project git repository. 	A short description of the link content.
documentation 	
url 	https://dharpa.org/kiara_documentation/ 	The url.
desc 	The url for kiara documentation. 	A short description of the link content.
	References for the item.
tags 	

	A list of tags for the item.
labels 	
package 	kiara
	A list of labels for the item.
	Generic properties of this item (description, tags, labels, references, ...).
python_class 	
python_class_name 	PickFileFromFileBundleModule 	The name of the Python class.
python_module_name 	kiara.modules.included_core_modules.filesystem 	The name of the Python module this class lives in.
full_name 	kiara.modules.included_core_modules.filesystem.PickFileFromFileBundleModule 	The full class namespace.
	The python class that implements this module type.
module_src 	class PickFileFromFileBundleModule(KiaraModule): """Pick a single file from a file_bundle value.""" _module_type_name = "file_bundle.pick.file" def create_inputs_schema( self, ) -> ValueMapSchema: return { "file_bundle": {"type": "file_bundle", "doc": "The file bundle."}, "path": {"type": "string", "doc": "The relative path of the file to pick."}, } def create_outputs_schema( self, ) -> ValueMapSchema: return {"file": {"type": "file", "doc": "The file."}} def process(self, inputs: ValueMap, outputs: ValueMap): file_bundle: KiaraFileBundle = inputs.get_value_data("file_bundle") path: str = inputs.get_value_data("path") if path not in file_bundle.included_files.keys(): raise KiaraProcessingException( f"Can't pick file '{path}' from file bundle: file not available." ) file: KiaraFile = file_bundle.included_files[path] outputs.set_value("file", file) 	The source code of the process method of the module.
file_bundle.pick.sub_folder¶
type_name 	file_bundle.pick.sub_folder 	The registered name for this item type.
documentation 	
description 	Pick a sub-folder from a file_bundle, resulting in a new file_bundle. 	Short description of the item.
doc 	None 	Detailed documentation of the item (in markdown).
	Documentation for the item.
authors 	
authors 	

    name 	Markus Binsteiner 	The full name of the author.
    email 	markus@frkl.io 	The email address of the author

	The authors/creators of this item.
	Information about authorship for the item.
context 	
references 	
source_repo 	
url 	https://github.com/DHARPA-Project/kiara 	The url.
desc 	The kiara project git repository. 	A short description of the link content.
documentation 	
url 	https://dharpa.org/kiara_documentation/ 	The url.
desc 	The url for kiara documentation. 	A short description of the link content.
	References for the item.
tags 	

	A list of tags for the item.
labels 	
package 	kiara
	A list of labels for the item.
	Generic properties of this item (description, tags, labels, references, ...).
python_class 	
python_class_name 	PickSubBundle 	The name of the Python class.
python_module_name 	kiara.modules.included_core_modules.filesystem 	The name of the Python module this class lives in.
full_name 	kiara.modules.included_core_modules.filesystem.PickSubBundle 	The full class namespace.
	The python class that implements this module type.
module_src 	class PickSubBundle(KiaraModule): """Pick a sub-folder from a file_bundle, resulting in a new file_bundle.""" _module_type_name = "file_bundle.pick.sub_folder" def create_inputs_schema( self, ) -> ValueMapSchema: return { "file_bundle": {"type": "file_bundle", "doc": "The file bundle."}, "sub_path": { "type": "string", "doc": "The relative path of the sub-folder to pick.", }, } def create_outputs_schema(self) -> ValueMapSchema: return { "file_bundle": { "type": "file_bundle", "doc": "The picked (sub-)file_bundle.", } } def process(self, inputs: ValueMap, outputs: ValueMap): file_bundle: KiaraFileBundle = inputs.get_value_data("file_bundle") sub_path: str = inputs.get_value_data("sub_path") result = {} for path, file in file_bundle.included_files.items(): if path.startswith(sub_path): result[path] = file if not result: raise KiaraProcessingException( f"Can't pick sub-folder '{sub_path}' from file bundle: no matches." ) new_file_bundle: KiaraFileBundle = KiaraFileBundle.create_from_file_models( result, bundle_name=f"{file_bundle.bundle_name}_{sub_path}" ) outputs.set_value("file_bundle", new_file_bundle) 	The source code of the process method of the module.
import.local.file¶
type_name 	import.local.file 	The registered name for this item type.
documentation 	
description 	Import a file from the local filesystem. 	Short description of the item.
doc 	None 	Detailed documentation of the item (in markdown).
	Documentation for the item.
authors 	
authors 	

    name 	Markus Binsteiner 	The full name of the author.
    email 	markus@frkl.io 	The email address of the author

	The authors/creators of this item.
	Information about authorship for the item.
context 	
references 	
source_repo 	
url 	https://github.com/DHARPA-Project/kiara 	The url.
desc 	The kiara project git repository. 	A short description of the link content.
documentation 	
url 	https://dharpa.org/kiara_documentation/ 	The url.
desc 	The url for kiara documentation. 	A short description of the link content.
	References for the item.
tags 	

	A list of tags for the item.
labels 	
package 	kiara
	A list of labels for the item.
	Generic properties of this item (description, tags, labels, references, ...).
python_class 	
python_class_name 	ImportLocalFileModule 	The name of the Python class.
python_module_name 	kiara.modules.included_core_modules.filesystem 	The name of the Python module this class lives in.
full_name 	kiara.modules.included_core_modules.filesystem.ImportLocalFileModule 	The full class namespace.
	The python class that implements this module type.
module_src 	class ImportLocalFileModule(KiaraModule): """Import a file from the local filesystem.""" _module_type_name = "import.local.file" def create_inputs_schema( self, ) -> ValueMapSchema: return {"path": {"type": "string", "doc": "The local path to the file."}} def create_outputs_schema( self, ) -> ValueMapSchema: return {"file": {"type": "file", "doc": "The loaded files."}} def _retrieve_module_characteristics(self) -> ModuleCharacteristics: return ModuleCharacteristics(is_idempotent=False) def process(self, inputs: ValueMap, outputs: ValueMap): path = inputs.get_value_data("path") file = KiaraFile.load_file(source=path) outputs.set_value("file", file) 	The source code of the process method of the module.
import.local.file_bundle¶
type_name 	import.local.file_bundle 	The registered name for this item type.
documentation 	
description 	Import a folder (file_bundle) from the local filesystem. 	Short description of the item.
doc 	None 	Detailed documentation of the item (in markdown).
	Documentation for the item.
authors 	
authors 	

    name 	Markus Binsteiner 	The full name of the author.
    email 	markus@frkl.io 	The email address of the author

	The authors/creators of this item.
	Information about authorship for the item.
context 	
references 	
source_repo 	
url 	https://github.com/DHARPA-Project/kiara 	The url.
desc 	The kiara project git repository. 	A short description of the link content.
documentation 	
url 	https://dharpa.org/kiara_documentation/ 	The url.
desc 	The url for kiara documentation. 	A short description of the link content.
	References for the item.
tags 	

	A list of tags for the item.
labels 	
package 	kiara
	A list of labels for the item.
	Generic properties of this item (description, tags, labels, references, ...).
python_class 	
python_class_name 	ImportLocalFileBundleModule 	The name of the Python class.
python_module_name 	kiara.modules.included_core_modules.filesystem 	The name of the Python module this class lives in.
full_name 	kiara.modules.included_core_modules.filesystem.ImportLocalFileBundleModule 	The full class namespace.
	The python class that implements this module type.
module_src 	class ImportLocalFileBundleModule(KiaraModule): """Import a folder (file_bundle) from the local filesystem.""" _module_type_name = "import.local.file_bundle" _config_cls = ImportFileBundleConfig def create_inputs_schema( self, ) -> ValueMapSchema: return { "path": {"type": "string", "doc": "The local path of the folder to import."} } def create_outputs_schema( self, ) -> ValueMapSchema: return { "file_bundle": {"type": "file_bundle", "doc": "The imported file bundle."} } def _retrieve_module_characteristics(self) -> ModuleCharacteristics: return DEFAULT_NO_IDEMPOTENT_MODULE_CHARACTERISTICS def process(self, inputs: ValueMap, outputs: ValueMap): path = inputs.get_value_data("path") include = self.get_config_value("include_file_types") exclude = self.get_config_value("exclude_file_types") config = FolderImportConfig(include_files=include, exclude_files=exclude) file_bundle = KiaraFileBundle.import_folder(source=path, import_config=config) outputs.set_value("file_bundle", file_bundle) 	The source code of the process method of the module.
load.bytes¶
type_name 	load.bytes 	The registered name for this item type.
documentation 	
description 	-- n/a -- 	Short description of the item.
doc 	None 	Detailed documentation of the item (in markdown).
	Documentation for the item.
authors 	
authors 	

    name 	Markus Binsteiner 	The full name of the author.
    email 	markus@frkl.io 	The email address of the author

	The authors/creators of this item.
	Information about authorship for the item.
context 	
references 	
source_repo 	
url 	https://github.com/DHARPA-Project/kiara 	The url.
desc 	The kiara project git repository. 	A short description of the link content.
documentation 	
url 	https://dharpa.org/kiara_documentation/ 	The url.
desc 	The url for kiara documentation. 	A short description of the link content.
	References for the item.
tags 	

	A list of tags for the item.
labels 	
package 	kiara
	A list of labels for the item.
	Generic properties of this item (description, tags, labels, references, ...).
python_class 	
python_class_name 	LoadBytesModule 	The name of the Python class.
python_module_name 	kiara.modules.included_core_modules.serialization 	The name of the Python module this class lives in.
full_name 	kiara.modules.included_core_modules.serialization.LoadBytesModule 	The full class namespace.
	The python class that implements this module type.
module_src 	class LoadBytesModule(DeserializeValueModule): _module_type_name = "load.bytes" @classmethod def retrieve_supported_target_profiles(cls) -> Mapping[str, Type]: return {"python_object": bytes} @classmethod def retrieve_supported_serialization_profile(cls) -> str: return "raw" @classmethod def retrieve_serialized_value_type(cls) -> str: return "bytes" def to__python_object(self, data: SerializedData, **config: Any) -> bytes: chunks = data.get_serialized_data("bytes") assert chunks.get_number_of_chunks() == 1 _chunks = list(chunks.get_chunks(as_files=False)) assert len(_chunks) == 1 _chunk: bytes = _chunks[0] # type: ignore return _chunk 	The source code of the process method of the module.
load.internal_model¶
type_name 	load.internal_model 	The registered name for this item type.
documentation 	
description 	-- n/a -- 	Short description of the item.
doc 	None 	Detailed documentation of the item (in markdown).
	Documentation for the item.
authors 	
authors 	

    name 	Markus Binsteiner 	The full name of the author.
    email 	markus@frkl.io 	The email address of the author

	The authors/creators of this item.
	Information about authorship for the item.
context 	
references 	
source_repo 	
url 	https://github.com/DHARPA-Project/kiara 	The url.
desc 	The kiara project git repository. 	A short description of the link content.
documentation 	
url 	https://dharpa.org/kiara_documentation/ 	The url.
desc 	The url for kiara documentation. 	A short description of the link content.
	References for the item.
tags 	

	A list of tags for the item.
labels 	
package 	kiara
	A list of labels for the item.
	Generic properties of this item (description, tags, labels, references, ...).
python_class 	
python_class_name 	LoadInternalModel 	The name of the Python class.
python_module_name 	kiara.modules.included_core_modules.serialization 	The name of the Python module this class lives in.
full_name 	kiara.modules.included_core_modules.serialization.LoadInternalModel 	The full class namespace.
	The python class that implements this module type.
module_src 	class LoadInternalModel(DeserializeValueModule): _module_type_name = "load.internal_model" @classmethod def retrieve_supported_target_profiles(cls) -> Mapping[str, Type]: return {"python_object": KiaraModel} @classmethod def retrieve_supported_serialization_profile(cls) -> str: return "json" @classmethod def retrieve_serialized_value_type(cls) -> str: return "internal_model" def to__python_object(self, data: SerializedData, **config: Any) -> KiaraModel: chunks = data.get_serialized_data("data") assert chunks.get_number_of_chunks() == 1 _chunks = list(chunks.get_chunks(as_files=False)) assert len(_chunks) == 1 bytes_string: bytes = _chunks[0] # type: ignore model_data = orjson.loads(bytes_string) model_id: str = data.data_type_config["kiara_model_id"] model_registry = ModelRegistry.instance() m_cls = model_registry.get_model_cls(kiara_model_id=model_id) obj = m_cls(**model_data) return obj 	The source code of the process method of the module.
load.string¶
type_name 	load.string 	The registered name for this item type.
documentation 	
description 	-- n/a -- 	Short description of the item.
doc 	None 	Detailed documentation of the item (in markdown).
	Documentation for the item.
authors 	
authors 	

    name 	Markus Binsteiner 	The full name of the author.
    email 	markus@frkl.io 	The email address of the author

	The authors/creators of this item.
	Information about authorship for the item.
context 	
references 	
source_repo 	
url 	https://github.com/DHARPA-Project/kiara 	The url.
desc 	The kiara project git repository. 	A short description of the link content.
documentation 	
url 	https://dharpa.org/kiara_documentation/ 	The url.
desc 	The url for kiara documentation. 	A short description of the link content.
	References for the item.
tags 	

	A list of tags for the item.
labels 	
package 	kiara
	A list of labels for the item.
	Generic properties of this item (description, tags, labels, references, ...).
python_class 	
python_class_name 	LoadStringModule 	The name of the Python class.
python_module_name 	kiara.modules.included_core_modules.serialization 	The name of the Python module this class lives in.
full_name 	kiara.modules.included_core_modules.serialization.LoadStringModule 	The full class namespace.
	The python class that implements this module type.
module_src 	class LoadStringModule(DeserializeValueModule): _module_type_name = "load.string" @classmethod def retrieve_supported_target_profiles(cls) -> Mapping[str, Type]: return {"python_object": str} @classmethod def retrieve_supported_serialization_profile(cls) -> str: return "raw" @classmethod def retrieve_serialized_value_type(cls) -> str: return "string" def to__python_object(self, data: SerializedData, **config: Any) -> str: chunks = data.get_serialized_data("string") assert chunks.get_number_of_chunks() == 1 _chunks = list(chunks.get_chunks(as_files=False)) assert len(_chunks) == 1 bytes_string: bytes = _chunks[0] # type: ignore return bytes_string.decode("utf-8") 	The source code of the process method of the module.
pipeline¶
type_name 	pipeline 	The registered name for this item type.
documentation 	
description 	A utility module to run multiple connected inner-modules and present it as its own entity. 	Short description of the item.
doc 	None 	Detailed documentation of the item (in markdown).
	Documentation for the item.
authors 	
authors 	

    name 	Markus Binsteiner 	The full name of the author.
    email 	markus@frkl.io 	The email address of the author

	The authors/creators of this item.
	Information about authorship for the item.
context 	
references 	
source_repo 	
url 	https://github.com/DHARPA-Project/kiara 	The url.
desc 	The kiara project git repository. 	A short description of the link content.
documentation 	
url 	https://dharpa.org/kiara_documentation/ 	The url.
desc 	The url for kiara documentation. 	A short description of the link content.
	References for the item.
tags 	

	A list of tags for the item.
labels 	
package 	kiara
	A list of labels for the item.
	Generic properties of this item (description, tags, labels, references, ...).
python_class 	
python_class_name 	PipelineModule 	The name of the Python class.
python_module_name 	kiara.modules.included_core_modules.pipeline 	The name of the Python module this class lives in.
full_name 	kiara.modules.included_core_modules.pipeline.PipelineModule 	The full class namespace.
	The python class that implements this module type.
module_src 	class PipelineModule(KiaraModule): """A utility module to run multiple connected inner-modules and present it as its own entity.""" _config_cls = PipelineConfig _module_type_name = "pipeline" def __init__( self, module_config: Union[None, KIARA_CONFIG, Mapping[str, Any]] = None, ): self._job_registry: Union[JobRegistry, None] = None super().__init__(module_config=module_config) @classmethod def is_pipeline(cls) -> bool: return True def _set_job_registry(self, job_registry: "JobRegistry"): self._job_registry = job_registry @property def operation(self) -> "Operation": if self._operation is not None: return self._operation from kiara.models.module.operation import Operation self._operation = Operation.create_from_module(self, doc=self.config.doc) return self._operation def create_inputs_schema( self, ) -> ValueMapSchema: pipeline_structure: PipelineStructure = self.config.structure inputs_schema = pipeline_structure.pipeline_inputs_schema return inputs_schema def create_outputs_schema( self, ) -> ValueMapSchema: pipeline_structure: PipelineStructure = self.config.structure return pipeline_structure.pipeline_outputs_schema def process(self, inputs: ValueMap, outputs: ValueMapWritable, job_log: JobLog): pipeline_structure: PipelineStructure = self.config.structure pipeline = Pipeline(structure=pipeline_structure, kiara=outputs._kiara) assert self._job_registry is not None controller = SinglePipelineBatchController( pipeline=pipeline, job_registry=self._job_registry ) job_log.add_log("setting pipeline inputs") pipeline.set_pipeline_inputs(inputs=inputs) job_log.add_log("starting pipeline processing") def event_callback(msg: str): job_log.add_log(msg) step_details = controller.process_pipeline(event_callback=event_callback) errors: Dict[str, Union[Exception, uuid.UUID]] = {} for step_id, details in step_details.items(): if isinstance(details, Exception): errors[step_id] = details else: job = self._job_registry.get_job(details) if job.error: if job._exception: errors[step_id] = job._exception else: errors[step_id] = Exception(job.error) if errors: msg = "Error processing pipeline:" for f, e in errors.items(): msg = f"{msg}\n - {f}: {e}" raise KiaraProcessingException(f"Errors while processing pipeline: {msg}") # TODO: resolve values first? outputs.set_values(**pipeline.get_current_pipeline_outputs()) 	The source code of the process method of the module.
pretty_print.any.value¶
type_name 	pretty_print.any.value 	The registered name for this item type.
documentation 	
description 	-- n/a -- 	Short description of the item.
doc 	None 	Detailed documentation of the item (in markdown).
	Documentation for the item.
authors 	
authors 	

    name 	Markus Binsteiner 	The full name of the author.
    email 	markus@frkl.io 	The email address of the author

	The authors/creators of this item.
	Information about authorship for the item.
context 	
references 	
source_repo 	
url 	https://github.com/DHARPA-Project/kiara 	The url.
desc 	The kiara project git repository. 	A short description of the link content.
documentation 	
url 	https://dharpa.org/kiara_documentation/ 	The url.
desc 	The url for kiara documentation. 	A short description of the link content.
	References for the item.
tags 	

	A list of tags for the item.
labels 	
package 	kiara
	A list of labels for the item.
	Generic properties of this item (description, tags, labels, references, ...).
python_class 	
python_class_name 	PrettyPrintAnyValueModule 	The name of the Python class.
python_module_name 	kiara.modules.included_core_modules.pretty_print 	The name of the Python module this class lives in.
full_name 	kiara.modules.included_core_modules.pretty_print.PrettyPrintAnyValueModule 	The full class namespace.
	The python class that implements this module type.
module_src 	class PrettyPrintAnyValueModule(PrettyPrintModule): _module_type_name = "pretty_print.any.value" # def pretty_print__any__as__string(self, value: Value, render_config: Dict[str, Any]): # # data = value.data # if isinstance(data, KiaraModel): # return data.json(option=orjson.OPT_INDENT_2) # else: # return str(data) 	The source code of the process method of the module.
pretty_print.value¶
type_name 	pretty_print.value 	The registered name for this item type.
documentation 	
description 	-- n/a -- 	Short description of the item.
doc 	None 	Detailed documentation of the item (in markdown).
	Documentation for the item.
authors 	
authors 	

    name 	Markus Binsteiner 	The full name of the author.
    email 	markus@frkl.io 	The email address of the author

	The authors/creators of this item.
	Information about authorship for the item.
context 	
references 	
source_repo 	
url 	https://github.com/DHARPA-Project/kiara 	The url.
desc 	The kiara project git repository. 	A short description of the link content.
documentation 	
url 	https://dharpa.org/kiara_documentation/ 	The url.
desc 	The url for kiara documentation. 	A short description of the link content.
	References for the item.
tags 	

	A list of tags for the item.
labels 	
package 	kiara
	A list of labels for the item.
	Generic properties of this item (description, tags, labels, references, ...).
python_class 	
python_class_name 	ValueTypePrettyPrintModule 	The name of the Python class.
python_module_name 	kiara.modules.included_core_modules.pretty_print 	The name of the Python module this class lives in.
full_name 	kiara.modules.included_core_modules.pretty_print.ValueTypePrettyPrintModule 	The full class namespace.
	The python class that implements this module type.
module_src 	class ValueTypePrettyPrintModule(KiaraModule): _module_type_name = "pretty_print.value" _config_cls = PrettyPrintConfig def _retrieve_module_characteristics(self) -> ModuleCharacteristics: return DEFAULT_IDEMPOTENT_INTERNAL_MODULE_CHARACTERISTICS def create_inputs_schema( self, ) -> Mapping[str, Union[ValueSchema, Mapping[str, Any]]]: source_type = self.get_config_value("source_type") assert source_type not in ["target", "base_name"] schema = { "value": { "type": source_type, "doc": "The value to render.", "optional": True, }, "render_config": { "type": "any", "doc": "Value type dependent render configuration.", "optional": True, }, } return schema def create_outputs_schema( self, ) -> Mapping[str, Union[ValueSchema, Mapping[str, Any]]]: return { "rendered_value": { "type": self.get_config_value("target_type"), "doc": "The rendered value.", } } def process(self, inputs: ValueMap, outputs: ValueMap): # source_type = self.get_config_value("source_type") target_type = self.get_config_value("target_type") source_value = inputs.get_value_obj("value") render_config = inputs.get_value_obj("render_config") if not source_value.is_set: outputs.set_value("rendered_value", "-- none/not set --") return try: data_type_cls = source_value.data_type_info.data_type_class.get_class() data_type = data_type_cls(**source_value.value_schema.type_config) except Exception as e: source_data_type = source_value.data_type_name log_message("data_type.unknown", data_type=source_data_type, error=e) from kiara.data_types.included_core_types import AnyType data_type = AnyType() func_name = f"pretty_print_as__{target_type}" func = getattr(data_type, func_name) render_config_dict = render_config.data if render_config_dict is None: render_config_dict = {} result = func(value=source_value, render_config=render_config_dict) # TODO: check we have the correct type? outputs.set_value("rendered_value", result) 	The source code of the process method of the module.
render.value¶
type_name 	render.value 	The registered name for this item type.
documentation 	
description 	A module that uses render methods attached to DataType classes. 	Short description of the item.
doc 	None 	Detailed documentation of the item (in markdown).
	Documentation for the item.
authors 	
authors 	

    name 	Markus Binsteiner 	The full name of the author.
    email 	markus@frkl.io 	The email address of the author

	The authors/creators of this item.
	Information about authorship for the item.
context 	
references 	
source_repo 	
url 	https://github.com/DHARPA-Project/kiara 	The url.
desc 	The kiara project git repository. 	A short description of the link content.
documentation 	
url 	https://dharpa.org/kiara_documentation/ 	The url.
desc 	The url for kiara documentation. 	A short description of the link content.
	References for the item.
tags 	

	A list of tags for the item.
labels 	
package 	kiara
	A list of labels for the item.
	Generic properties of this item (description, tags, labels, references, ...).
python_class 	
python_class_name 	ValueTypeRenderModule 	The name of the Python class.
python_module_name 	kiara.modules.included_core_modules.render_value 	The name of the Python module this class lives in.
full_name 	kiara.modules.included_core_modules.render_value.ValueTypeRenderModule 	The full class namespace.
	The python class that implements this module type.
module_src 	class ValueTypeRenderModule(KiaraModule): """A module that uses render methods attached to DataType classes.""" _module_type_name = "render.value" _config_cls = RenderValueModuleConfig def _retrieve_module_characteristics(self) -> ModuleCharacteristics: return DEFAULT_IDEMPOTENT_INTERNAL_MODULE_CHARACTERISTICS def create_inputs_schema( self, ) -> Mapping[str, Union[ValueSchema, Mapping[str, Any]]]: source_type = self.get_config_value("source_type") assert source_type not in ["target", "base_name"] schema = { "value": { "type": source_type, "doc": "The value to render.", "optional": False, }, "render_config": { "type": "dict", "doc": "Instructions/config on how (or what) to render the provided value.", "default": {}, }, } return schema def create_outputs_schema( self, ) -> Mapping[str, Union[ValueSchema, Mapping[str, Any]]]: outputs = { "render_value_result": { "type": "render_value_result", "doc": "The rendered value, incl. some metadata.", }, } return outputs def process(self, inputs: ValueMap, outputs: ValueMap): source_value = inputs.get_value_obj("value") if not source_value.is_set: raise KiaraProcessingException( f"Can't render value '{source_value.value_id}': value not set." ) # source_type = self.get_config_value("source_type") target_type = self.get_config_value("target_type") render_scene: KiaraDict = inputs.get_value_data("render_config") try: data_type_cls = source_value.data_type_info.data_type_class.get_class() data_type = data_type_cls(**source_value.value_schema.type_config) except Exception as e: source_data_type = source_value.data_type_name log_message("data_type.unknown", data_type=source_data_type, error=e) from kiara.data_types.included_core_types import AnyType data_type = AnyType() func_name = f"render_as__{target_type}" func = getattr(data_type, func_name) if render_scene: rc = render_scene.dict_data else: rc = {} result = func( value=source_value, render_config=rc, manifest=self.manifest, ) if isinstance(result, RenderValueResult): render_scene_result = result else: render_scene_result = RenderValueResult( value_id=source_value.value_id, render_config=rc, render_manifest=self.manifest.manifest_hash, rendered=result, related_scenes={}, manifest_lookup={self.manifest.manifest_hash: self.manifest}, ) outputs.set_value("render_value_result", render_scene_result) 	The source code of the process method of the module.
unpickle.value¶
type_name 	unpickle.value 	The registered name for this item type.
documentation 	
description 	-- n/a -- 	Short description of the item.
doc 	None 	Detailed documentation of the item (in markdown).
	Documentation for the item.
authors 	
authors 	

    name 	Markus Binsteiner 	The full name of the author.
    email 	markus@frkl.io 	The email address of the author

	The authors/creators of this item.
	Information about authorship for the item.
context 	
references 	
source_repo 	
url 	https://github.com/DHARPA-Project/kiara 	The url.
desc 	The kiara project git repository. 	A short description of the link content.
documentation 	
url 	https://dharpa.org/kiara_documentation/ 	The url.
desc 	The url for kiara documentation. 	A short description of the link content.
	References for the item.
tags 	

	A list of tags for the item.
labels 	
package 	kiara
	A list of labels for the item.
	Generic properties of this item (description, tags, labels, references, ...).
python_class 	
python_class_name 	UnpickleModule 	The name of the Python class.
python_module_name 	kiara.modules.included_core_modules.serialization 	The name of the Python module this class lives in.
full_name 	kiara.modules.included_core_modules.serialization.UnpickleModule 	The full class namespace.
	The python class that implements this module type.
module_src 	class UnpickleModule(DeserializeValueModule): _module_type_name = "unpickle.value" @classmethod def retrieve_supported_target_profiles(cls) -> Mapping[str, Type]: return {"python_object": object} @classmethod def retrieve_supported_serialization_profile(cls) -> str: return "pickle" @classmethod def retrieve_serialized_value_type(cls) -> str: return "any" def to__python_object(self, data: SerializedData, **config: Any): try: import pickle5 as pickle except Exception: import pickle # type: ignore assert "python_object" in data.get_keys() python_object_data = data.get_serialized_data("python_object") assert python_object_data.get_number_of_chunks() == 1 _bytes = list(python_object_data.get_chunks(as_files=False))[0] data = pickle.loads(_bytes) return data 	The source code of the process method of the module.
value.extract_metadata¶
type_name 	value.extract_metadata 	The registered name for this item type.
documentation 	
description 	Base class to use when writing a module to extract metadata from a file. 	Short description of the item.
doc 	It's possible to use any arbitrary *kiara* module for this purpose, but sub-classing this makes it easier. 	Detailed documentation of the item (in markdown).
	Documentation for the item.
authors 	
authors 	

    name 	Markus Binsteiner 	The full name of the author.
    email 	markus@frkl.io 	The email address of the author

	The authors/creators of this item.
	Information about authorship for the item.
context 	
references 	
source_repo 	
url 	https://github.com/DHARPA-Project/kiara 	The url.
desc 	The kiara project git repository. 	A short description of the link content.
documentation 	
url 	https://dharpa.org/kiara_documentation/ 	The url.
desc 	The url for kiara documentation. 	A short description of the link content.
	References for the item.
tags 	

	A list of tags for the item.
labels 	
package 	kiara
	A list of labels for the item.
	Generic properties of this item (description, tags, labels, references, ...).
python_class 	
python_class_name 	ExtractMetadataModule 	The name of the Python class.
python_module_name 	kiara.modules.included_core_modules.metadata 	The name of the Python module this class lives in.
full_name 	kiara.modules.included_core_modules.metadata.ExtractMetadataModule 	The full class namespace.
	The python class that implements this module type.
module_src 	class ExtractMetadataModule(KiaraModule): """ Base class to use when writing a module to extract metadata from a file. It's possible to use any arbitrary *kiara* module for this purpose, but sub-classing this makes it easier. """ _config_cls = MetadataModuleConfig _module_type_name: str = "value.extract_metadata" def _retrieve_module_characteristics(self) -> ModuleCharacteristics: return ModuleCharacteristics( is_idempotent=True, is_internal=True, unique_result_values=True ) def create_inputs_schema( self, ) -> Mapping[str, Union[ValueSchema, Mapping[str, Any]]]: data_type_name = self.get_config_value("data_type") inputs = { "value": { "type": data_type_name, "doc": f"A value of type '{data_type_name}'", "optional": False, } } return inputs def create_outputs_schema( self, ) -> Mapping[str, Union[ValueSchema, Mapping[str, Any]]]: kiara_model_id: str = self.get_config_value("kiara_model_id") # TODO: check it's subclassing the right class outputs = { "value_metadata": { "type": "internal_model", "type_config": {"kiara_model_id": kiara_model_id}, "doc": "The metadata for the provided value.", } } return outputs def process(self, inputs: ValueMap, outputs: ValueMap) -> None: value = inputs.get_value_obj("value") kiara_model_id: str = self.get_config_value("kiara_model_id") model_registry = ModelRegistry.instance() metadata_model_cls: Type[ValueMetadata] = model_registry.get_model_cls(kiara_model_id=kiara_model_id, required_subclass=ValueMetadata) # type: ignore metadata = metadata_model_cls.create_value_metadata(value=value) if not isinstance(metadata, metadata_model_cls): raise KiaraProcessingException( f"Invalid metadata model result, should be class '{metadata_model_cls.__name__}', but is: {metadata.__class__.__name__}. This is most likely a bug." ) outputs.set_value("value_metadata", metadata) 
kiara_model_types¶

    instance.module_config: Base class that describes the configuration a [KiaraModule][kiara.module.KiaraModule] class accepts. This is stored in the ``_config_cls`` class attribute in each ``KiaraModule`` class. There are two config options every ``KiaraModule`` supports: - ``constants``, and - ``defaults`` Constants are pre-set inputs, and users can't change them and an error is thrown if they try. Defaults are default values that override the schema defaults, and those can be overwritten by users. If both a constant and a default value is set for an input field, an error is thrown.

    instance.module_config.pipeline: A class to hold the configuration for a [PipelineModule][kiara.pipeline.module.PipelineModule].If you want to control the pipeline input and output names, you need to have to provide a map that uses the autogenerated field name ([step_id]__[alias] -- 2 underscores!!) as key, and the desired field name as value. The reason that schema for the autogenerated field names exist is that it's hard to ensure the uniqueness of each field; some steps can have the same input field names, but will need different input values. In some cases, some inputs of different steps need the same input. Those sorts of things. So, to make sure that we always use the right values, I chose to implement a conservative default approach, accepting that in some cases the user will be prompted for duplicate inputs for the same value. To remedy that, the pipeline creator has the option to manually specify a mapping to rename some or all of the input/output fields. Further, because in a lot of cases there won't be any overlapping fields, the creator can specify ``auto``, in which case *Kiara* will automatically create a mapping that tries to map autogenerated field names to the shortest possible names for each case. Examples: -------- Configuration for a pipeline module that functions as a ``nand`` logic gate (in Python): ``` python and_step = PipelineStepConfig(module_type="and", step_id="and") not_step = PipelineStepConfig(module_type="not", step_id="not", input_links={"a": ["and.y"]} nand_p_conf = PipelineConfig(doc="Returns 'False' if both inputs are 'True'.", steps=[and_step, not_step], input_aliases={ "and.a": "a", "and.b": "b" }, output_aliases={ "not.y": "y" }} ``` Or, the same thing in json: ``` json { "module_type_name": "nand", "doc": "Returns 'False' if both inputs are 'True'.", "steps": [ { "module_type": "and", "step_id": "and" }, { "module_type": "not", "step_id": "not", "input_links": { "a": "and.y" } } ], "input_aliases": { "and.a": "a", "and.b": "b" }, "output_aliases": { "not.y": "y" } } ```

    instance.manifest: A class to hold the type and configuration for a module instance.

    instance.manifest_with_inputs: -- n/a --

    instance.job_config: -- n/a --

    instance.job_record: -- n/a --

    instance.value_pedigree: -- n/a --

    instance.pipeline_step: A step within a pipeline-structure, includes information about it's connection(s) and other metadata.

    instance.operation: -- n/a --

    instance.destiny: A destiny is basically a link to a potential future transformation result involving one or several values as input.

    metadata.authors: Information about all authors of a resource.

    metadata.context: Information about the context of a resource.

    metadata.documentation: Documentation about a resource.

    instance.value_schema: The schema of a value.

    instance.execution_context: -- n/a --

    instance.active_job: -- n/a --

    instance.wrapped_python_class: Python class and module information.

    metadata.kiara_module_class: -- n/a --

    metadata.serialized_data: -- n/a --

    instance.serialization_result: -- n/a --

    instance.persisted_data: -- n/a --

    info.data_type_instance: -- n/a --

    instance.value_details: A wrapper class that manages and retieves value data and its details.

    instance.value: -- n/a --

    instance.unloadable_data: A special 'marker' model, indicating that the data of value can't be loaded.

    instance.value_map.readonly: -- n/a --

    instance.value_map.writeable: -- n/a --

    instance.value_map.aliases: A model class that holds a tree of values and their schemas.

    info.runtime.python: -- n/a --

    info.runtime.kiara_plugins: -- n/a --

    info.runtime.kiara_types: -- n/a --

    info.runtime.os: Manages information about the OS this kiara instance is running in.

    instance.operation_details: -- n/a --

    instance.operation_details.base: -- n/a --

    instance.operation_config.manifest: -- n/a --

    instance.operation_config.pipeline: -- n/a --

    filter: -- n/a --

    info.pipeline_stage: -- n/a --

    pipeline_stages: -- n/a --

    info.pipeline_step: -- n/a --

    instance.pipeline_structure: An object that holds one or several steps, and describes the connections between them.

    info.archive_type: -- n/a --

    info.metadata_type: -- n/a --

    info.pipeline: -- n/a --

    info.workflow: -- n/a --

    archive_info: -- n/a --

    info.archive_types: -- n/a --

    info.metadata_types: -- n/a --

    info.workflows: -- n/a --

    info.archives: -- n/a --

    instance.pipeline_state: -- n/a --

    instance.render_scene: -- n/a --

    render_value_result: Object containing all the result properties of a 'render_value' operation.

    value_matcher: An object describing requirements values should satisfy in order to be included in a query result.

    workflow_state: -- n/a --

    instance.workflow: -- n/a --

    context_info: -- n/a --

    metadata.python_class: Python class and module information.

    metadata.file: File stats.

    metadata.file_bundle: File bundle stats.

    instance.data.file: Describes properties for the 'file' value type.

    instance.data.file_bundle: Describes properties for the 'file_bundle' value type.

    info.kiara_model: -- n/a --

    info.data_type: -- n/a --

    info.kiara_module_type: -- n/a --

    info.operation_type: -- n/a --

    info.value: -- n/a --

    info.pipeline_structure: -- n/a --

    info.operation: -- n/a --

    renderer_info: -- n/a --

    info.kiara_models: -- n/a --

    info.data_types: -- n/a --

    info.module_types: -- n/a --

    info.operation_types: -- n/a --

    values_info: -- n/a --

    info.operations: -- n/a --

    renderer_infos: -- n/a --

    metadata.module_config: -- n/a --

    instance.job_desc: An object describing a compute job with both raw or referenced inputs.

    workflow_matcher: An object describing requirements values should satisfy in order to be included in a query result.

operation_types¶

    create_from: Create a dataset from a dataset of another value.This operation always has at least one input named after the source type, and one output named after the target type. It can, in addition, also have other, optional inputs, to control how exactly the target value is created.

    custom_module: -- n/a --

    deserialize: An operation that takes a value, and serializes it into the format suitable to the [serialized_value][kiara.data_types.included_core_types.SeriailzedValue] value type.

    export_as: -- n/a --

    extract_metadata: An operation that extracts metadata of a specific type from value data.

    filter: -- n/a --

    import_data: -- n/a --

    pipeline: -- n/a --

    pretty_print: An operation that takes a value, and renders into a format that can be printed for output..

    render_value: An operation that renders a value.

operations¶

    deserialize.bytes.as.python_object: -- n/a --

    deserialize.file.as.python_object: -- n/a --

    deserialize.file_bundle.as.python_object: -- n/a --

    deserialize.from_json: -- n/a --

    deserialize.internal_model.as.python_object: -- n/a --

    deserialize.string.as.python_object: -- n/a --

    deserialize.value: -- n/a --

    export.file.as.file: -- n/a --

    extract.file.metadata.from.file: Extract 'file' metadata for value type 'file'.

    extract.file_bundle.metadata.from.file_bundle: Extract 'file_bundle' metadata for value type 'file_bundle'.

    extract.python_class.metadata: Extract 'python_class' metadata for value type 'any'.

    file_bundle.pick.file: Pick a single file from a file_bundle value.

    file_bundle.pick.sub_folder: Pick a sub-folder from a file_bundle, resulting in a new file_bundle.

    import.local.file: Import a file from the local filesystem.

    import.local.file_bundle: Import a folder (file_bundle) from the local filesystem.

    pretty_print.as.string: Pretty print a any value as a string.

    pretty_print.as.terminal_renderable: Pretty print a any value as a terminal_renderable.

    pretty_print.internal.as.string: Pretty print a internal value as a string.

    pretty_print.internal.as.terminal_renderable: Pretty print a internal value as a terminal_renderable.

    pretty_print.none.as.string: Pretty print a none value as a string.

    pretty_print.none.as.terminal_renderable: Pretty print a none value as a terminal_renderable.

    pretty_print.string.as.bytes: Pretty print a string value as a bytes.

    render.as.string: Render a 'any' value as a string.

    render.as.terminal_renderable: Render a 'any' value as a terminal_renderable.

    render.dict.as.terminal_renderable: Render a 'dict' value as a terminal_renderable.

    render.internal.as.string: Render a 'internal' value as a string.

    render.internal.as.terminal_renderable: Render a 'internal' value as a terminal_renderable.

gen_info_pages
Classes¶
Functions¶
get_jina_env() ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/doc/gen_info_pages.py
render_item_listing(item_type: str, items: Mapping[str, ItemInfo], sub_path: str = 'info') ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/doc/gen_info_pages.py
generate_detail_pages(context_info: KiaraContextInfo, sub_path: str = 'info', add_summary_page: bool = False) ¶
Source code in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/kiara/doc/gen_info_pages.py

Create a module that renders a value of a custom data type¶

When you create a new data type, by default kiara does not know how to render it for specific target(s) (html, terminal, ...). Which means you'll have to create a module for each of the targets you want to support. kiara uses the custom render_value operation type for this.

There are multiple ways to implement support for rendering a new data type, the easiest one is to add a method with the following signature to the data type class:

    def render_as__<target_type>(
        self, value: "Value", render_config: Mapping[str, Any], manifest: "Manifest"
    ) -> <target_type_cls>:
        ...
        ...

So, to implement terminal rendering, that would be:

    def render_as__terminal_renderable(
        self, value: "Value", render_config: Mapping[str, Any], manifest: "Manifest"
    ) -> RenderableType:
        ...
        ...

As an example, here's how to implement basic rendering of a 'dict' value:

kiara plugin: (onboarding)

kiara modules for data onboarding.

    Documentation: https://DHARPA-Project.github.io/kiara_plugin.onboarding
    Code: https://github.com/DHARPA-Project/kiara_plugin.onboarding
    kiara: https://dharpa.org/kiara.documentation

Description

TODO
Development
Requirements

    Python (version >= 3.8)
    pip, virtualenv
    git
    make (on Linux / Mac OS X -- optional)

Prepare development environment

If you only want to work on the modules, and not the core Kiara codebase, follow the instructions below. Otherwise, please check the notes on how to setup a Kiara development environment under (TODO).
Using pixi (recommended)

The recommended way to setup a development environment is to use pixi. Check out their install instructions.

Once you have pixi installed, you need to initialize the environment once:

pixi run install-dev-env

You also need to do this whenever a depdendency of this plugin is updated (for example the core kiara package).

Once that is done, you can enter the environment with:

pixi shell

This will start a sub-shell with the virtual environment activated, and all dependencies of the plugin package installed. To confirm it works, you can run any kiara command:

kiara --version
# or
kiara operation list
# or
...
...

Once you are finished with your development session, you can exit the sub-shell as you would normally do in such cases:

exit

Alternatively, you can also run the kiara executable directly, it is located in .pixi/env/bin/kiara. So either adapt your PATH variable, or do something like:

.pixi/env/bin/kiara operation list

In most cases it's recommended to use a pixi shell though.
Using pre-defined development-related tasks

The included pixi.toml file includes some useful tasks that help with development:

    pixi run pre-commit-check: runs a set of checks against all files
    pixi run tests: runs the unit tests
    pixi run mypy: run mypy checks


kiara plugin: (onboarding)

kiara modules for data onboarding.

    Documentation: https://DHARPA-Project.github.io/kiara_plugin.onboarding
    Code: https://github.com/DHARPA-Project/kiara_plugin.onboarding
    kiara: https://dharpa.org/kiara.documentation

Description

TODO
Development
Requirements

    Python (version >= 3.8)
    pip, virtualenv
    git
    make (on Linux / Mac OS X -- optional)

Prepare development environment

If you only want to work on the modules, and not the core Kiara codebase, follow the instructions below. Otherwise, please check the notes on how to setup a Kiara development environment under (TODO).
Using pixi (recommended)

The recommended way to setup a development environment is to use pixi. Check out their install instructions.

Once you have pixi installed, you need to initialize the environment once:

pixi run install-dev-env

You also need to do this whenever a depdendency of this plugin is updated (for example the core kiara package).

Once that is done, you can enter the environment with:

pixi shell

This will start a sub-shell with the virtual environment activated, and all dependencies of the plugin package installed. To confirm it works, you can run any kiara command:

kiara --version
# or
kiara operation list
# or
...
...

Once you are finished with your development session, you can exit the sub-shell as you would normally do in such cases:

exit

Alternatively, you can also run the kiara executable directly, it is located in .pixi/env/bin/kiara. So either adapt your PATH variable, or do something like:

.pixi/env/bin/kiara operation list

In most cases it's recommended to use a pixi shell though.
Using pre-defined development-related tasks

The included pixi.toml file includes some useful tasks that help with development:

    pixi run pre-commit-check: runs a set of checks against all files
    pixi run tests: runs the unit tests
    pixi run mypy: run mypy checks

Copyright & license
This project is MPL v2.0 licensed, for the license text please check the LICENSE file in this repository.

kiara modules (core)

A set of modules (and pipelines) for Kiara.

    Documentation: https://dharpa.org/kiara_modules.core
    Code: https://github.com/DHARPA-Project/kiara_modules.core

Description

TODO
Development
Requirements

    Python (version >=3.6 -- some make targets only work for Python >=3.7 though)
    pip, virtualenv
    git
    make (on Linux / Mac OS X -- optional)

Prepare development environment

If you only want to work on the modules, and not the core Kiara codebase, follow the instructions below. Otherwise, please check the notes on how to setup a Kiara development environment under (TODO).
Linux & Mac OS X (using make)

For *NIX-like operating system, setting up a development environment is relatively easy:

git clone https://github.com/DHARPA-Project/kiara_modules.core.git
cd kiara_modules.core
python3 -m venv .venv
source .venv/bin/activate
make init

Windows (or manual pip install)

It's impossible to lay out all the ways Python can be installed on a machine, and virtual- (or conda-)envs can be created, so I'll assume you know how to do this. One simple way is to install the Anaconda (individual edition), then use the Anaconda navigator to create a new environment, install the 'git' package in it (if your system does not already have it), and use the 'Open Terminal' option of that environment to start up a terminal that has that virtual-/conda-environment activated.

Once that is done, cd into a directory where you want this project folder to live, and do:

# make sure your virtual env is activated!!!
git clone https://github.com/DHARPA-Project/kiara_modules.core.git
cd kiara_modules.core
pip install --extra-index-url https://pypi.fury.io/dharpa/ -U -e .[all_dev]

Try it out

After this is done, you should be able to run the included example module via:

kiara run core_example text_1="xxx" text_2="yyy"
...
...

Re-activate the development environment

The 'prepare' step from above only has to be done once. After that, to re-enable your virtual environment, you'll need to navigate to the directory again (wherever that is, in your case), and run the source command from before again:

cd path/to/kiara_modules.core
source .venv/bin/activate  # if it isn't activated already, for example by the Anaconda navigator
kiara --help  # or whatever, point is, kiara should be available for you now,

make targets (Linux & Mac OS X)

    init: init development project (install project & dev dependencies into virtualenv, as well as pre-commit git hook)
    update-dependencies: update development dependencies (mainly the core kiara package from git)
    flake: run flake8 tests
    mypy: run mypy tests
    test: run unit tests
    docs: create static documentation pages (under build/site)
    serve-docs: serve documentation pages (incl. auto-reload) for getting direct feedback when working on documentation
    clean: clean build directories

For details (and other, minor targets), check the Makefile.
Running tests

> make test
# or
> make coverage

Copyright & license

This project is MPL v2.0 licensed, for the license text please check the LICENSE file in this repository.

Copyright (c) 2021 DHARPA project